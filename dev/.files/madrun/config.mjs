#!/usr/bin/env node
/**
 * Madrun config file.
 *
 * Madrun is not aware of this config file's location.
 *
 * @note PLEASE DO NOT EDIT THIS FILE!
 * @note This entire file will be updated automatically.
 * @note Instead of editing here, please review <https://github.com/clevercanyon/skeleton>.
 *
 * @see https://github.com/clevercanyon/madrun
 */

import fs from 'node:fs';
import fsp from 'node:fs/promises';
import path from 'node:path';
import url from 'node:url';
import { $chalk, $cmd } from '../../../node_modules/@clevercanyon/utilities.node/dist/index.js';
import { $version } from '../../../node_modules/@clevercanyon/utilities/dist/index.js';
import u from '../bin/includes/utilities.mjs';
import wranglerSettings from '../wrangler/settings.mjs';
import events from './includes/events.mjs';

const __dirname = path.dirname(url.fileURLToPath(import.meta.url));
const projDir = path.resolve(__dirname, '../../..');
const distDir = path.resolve(__dirname, '../../../dist');

const nodeEnvVars = {
    NODE_OPTIONS: $cmd.quote(
        $cmd
            .escAll([
                // `--disable-warning ExperimentalWarning`, // v21.3.0+; {@see https://o5p.me/ZKO1Cq}.
                ...($version.compare(process.versions.node, '>=', '21.3.0') ? ['--disable-warning', 'ExperimentalWarning'] : []),
                ...['--require', path.resolve(__dirname, './includes/node.cjs')],
            ])
            .join(' '),
    ),
};
const cloudflareEnvVars = { CLOUDFLARE_API_TOKEN: process.env.USER_CLOUDFLARE_TOKEN || '' };

/**
 * Defines madrun configuration.
 */
export default async () => {
    /**
     * Composition.
     */
    return {
        /**
         * Our own commands.
         */
        'envs': async () => {
            return {
                env: { ...nodeEnvVars },
                cmds: [['./dev/.files/bin/envs.mjs', '{{@}}']],
            };
        },
        'install': async () => {
            return {
                env: { ...nodeEnvVars },
                cmds: [['./dev/.files/bin/install.mjs', '{{@}}']],
            };
        },
        'update': async () => {
            return {
                env: { ...nodeEnvVars },
                cmds: [['./dev/.files/bin/update.mjs', '{{@}}']],
            };
        },

        /**
         * Vite-powered commands.
         */
        'dev': async ({ args }) => {
            return {
                env: { ...nodeEnvVars },
                cmds: [['npx', 'vite', 'dev', '{{@}}', ...(args.mode ? [] : ['--mode', 'dev'])]],
            };
        },
        'dev:prefresh': async ({ args }) => {
            return {
                env: { ...nodeEnvVars, VITE_PREFRESH_ENABLE: 'true' },
                cmds: [['npx', 'vite', 'dev', '{{@}}', ...(args.mode ? [] : ['--mode', 'dev'])]],
            };
        },
        'preview': async ({ args }) => {
            return {
                env: { ...nodeEnvVars },
                cmds: [['npx', 'vite', 'preview', '{{@}}', ...(args.mode ? [] : ['--mode', 'dev'])]],
            };
        },
        'build': async ({ args }) => {
            return {
                env: { ...nodeEnvVars },
                cmds: [['npx', 'vite', 'build', '{{@}}', ...(args.mode ? [] : ['--mode', 'prod'])]],
            };
        },

        /**
         * Test-related commands.
         */
        'jest': async () => {
            return {
                env: { ...nodeEnvVars },
                cmds: [['npx', 'jest', '{{@}}']],
            };
        },
        'vitest': async ({ args }) => {
            return {
                env: { ...nodeEnvVars },
                cmds: [['npx', 'vitest', '{{@}}', ...(args.mode ? [] : ['--mode', 'dev'])]],
            };
        },
        'tests': async ({ args }) => {
            return {
                env: { ...nodeEnvVars },
                cmds: [['npx', 'vitest', '{{@}}', ...(args.mode ? [] : ['--mode', 'dev'])]],
            };
        },
        'tests:bench': async ({ args }) => {
            return {
                env: { ...nodeEnvVars },
                cmds: [['npx', 'vitest', 'bench', '{{@}}', ...(args.mode ? [] : ['--mode', 'dev'])]],
            };
        },
        'tests:sandbox': async ({ args }) => {
            return {
                env: { ...nodeEnvVars, VITEST_SANDBOX_ENABLE: 'true' },
                cmds: [['npx', 'vitest', '{{@}}', ...(args.mode ? [] : ['--mode', 'dev'])]],
            };
        },
        'tests:examples': async ({ args }) => {
            return {
                env: { ...nodeEnvVars, VITEST_EXAMPLES_ENABLE: 'true' },
                cmds: [['npx', 'vitest', '{{@}}', ...(args.mode ? [] : ['--mode', 'dev'])]],
            };
        },

        /**
         * Wrangler commands.
         */
        'wrangler': async ({ args }) => {
            const settings = await wranglerSettings();
            return {
                env: { ...nodeEnvVars, ...cloudflareEnvVars },
                opts: { ...('pages' === args._?.[0] ? { cwd: distDir } : {}) },
                cmds: [
                    // `$ madrun wrangler dev`, `$ madrun wrangler pages *`.
                    ...(('dev' === args._?.[0] || 'pages' === args._?.[0]) && !args.help
                        ? [
                              async () => {
                                  // OS directory must exist already.
                                  if (!(await fs.existsSync(settings.osDir))) return;

                                  // Ensure `~/.wrangler/local-cert` directory exists.
                                  await fsp.mkdir(settings.osSSLCertDir, { recursive: true, mode: 0o700 });

                                  // Link our custom SSL key to that used by Wrangler.
                                  await fsp.rm(settings.osSSLKeyFile, { recursive: true, force: true });
                                  await fsp.symlink(settings.customSSLKeyFile, settings.osSSLKeyFile);

                                  // Link our custom SSL certificate to that used by Wrangler.
                                  await fsp.rm(settings.osSSLCertFile, { recursive: true, force: true });
                                  await fsp.symlink(settings.customSSLCertFile, settings.osSSLCertFile);
                              },
                          ]
                        : []),
                    // `$ madrun wrangler dev`, `$ madrun wrangler pages dev`.
                    ...(('dev' === args._?.[0] || ('pages' === args._?.[0] && 'dev' === args._?.[1])) && !args.help
                        ? [
                              {
                                  opts: { cwd: projDir },
                                  env: { ...nodeEnvVars, ...cloudflareEnvVars, VITE_WRANGLER_MODE: 'dev' },
                                  cmd: ['npx', 'vite', 'build', '--mode', 'dev'],
                              },
                          ]
                        : []),
                    // `$ madrun wrangler deploy`, `$ madrun wrangler pages deploy`.
                    ...(('deploy' === args._?.[0] || ('pages' === args._?.[0] && 'deploy' === args._?.[1])) && !args.help
                        ? [
                              {
                                  opts: { cwd: projDir },
                                  env: { ...nodeEnvVars, ...cloudflareEnvVars, VITE_WRANGLER_MODE: 'pages' === args._?.[0] && args.branch && args.branch !== settings.defaultPagesProductionBranch ? 'stage' : 'prod' }, // prettier-ignore
                                  cmd: ['npx', 'vite', 'build', '--mode', 'pages' === args._?.[0] && args.branch && args.branch !== settings.defaultPagesProductionBranch ? 'stage' : 'prod'], // prettier-ignore
                              },
                          ]
                        : []),
                    // `$ madrun wrangler dev` command args.
                    ...('dev' === args._?.[0]
                        ? [
                              [
                                  // Base `$ madrun wrangler dev` command args.
                                  ...['npx', 'wrangler', '{{@}}'],

                                  // `$ madrun wrangler dev` command args.
                                  ...(args.env ? [] : ['--env', 'dev']),
                                  ...(args.logLevel ? [] : ['--log-level', settings.defaultDevLogLevel]),
                              ],
                          ]
                        : []),
                    // `$ madrun wrangler pages` command args.
                    ...('pages' === args._?.[0]
                        ? [
                              [
                                  // Base `$ madrun wrangler pages` command args.
                                  ...['npx', 'wrangler', '{{@}}'],

                                  // Default `$ madrun wrangler pages dev` command args.
                                  ...('dev' === args._?.[1] ? (args.logLevel ? [] : ['--log-level', settings.defaultDevLogLevel]) : []),

                                  // Default `$ madrun wrangler pages deploy` command args.
                                  ...('deploy' === args._?.[1] ? (args._?.[2] ? [] : [distDir]) : []),
                                  ...('deploy' === args._?.[1] ? (args.projectName ? [] : ['--project-name', settings.defaultPagesProjectName]) : []),
                                  ...('deploy' === args._?.[1] ? (args.branch ? [] : ['--branch', settings.defaultPagesProductionBranch]) : []),
                                  ...('deploy' === args._?.[1] ? (args.commitDirty ? [] : ['--commit-dirty', 'true']) : []),

                                  // Default `$ madrun wrangler pages project` command args.
                                  ...('project' === args._?.[1] && 'create' === args._?.[2] ? (args._?.[3] ? [] : [settings.defaultPagesProjectName]) : []),
                                  ...('project' === args._?.[1] && 'create' === args._?.[2] ? args.productionBranch ? []  : ['--production-branch', settings.defaultPagesProductionBranch] : []), // prettier-ignore

                                  // Default `$ madrun wrangler pages deployment` command args.
                                  ...('deployment' === args._?.[1] && 'list' === args._?.[2] ? args.projectName ? [] : ['--project-name', settings.defaultPagesProjectName] : []), // prettier-ignore
                                  ...('deployment' === args._?.[1] && 'tail' === args._?.[2] ? args.projectName ? [] : ['--project-name', settings.defaultPagesProjectName] : []), // prettier-ignore
                                  ...('deployment' === args._?.[1] && 'tail' === args._?.[2] ? args.environment ? [] : ['--environment', settings.defaultPagesProductionEnvironment] : []), // prettier-ignore
                              ],
                          ]
                        : []),
                    // `$ madrun wrangler *` command args !== `$ madrun wrangler dev` or `$ madrun wrangler pages`.
                    ...('dev' !== args._?.[0] && 'pages' !== args._?.[0]
                        ? [
                              [
                                  ...['npx', 'wrangler', '{{@}}'], // Nothing more at this time.
                              ],
                          ]
                        : []),
                ],
            };
        },
        'wrangler:flush': async () => {
            const settings = await wranglerSettings();
            return {
                env: { ...nodeEnvVars, ...cloudflareEnvVars },
                cmds: [
                    async () => {
                        u.log($chalk.green('Flushing Wrangler state.'));
                        await fsp.rm(settings.projStateDir, { recursive: true, force: true });
                    },
                ],
            };
        },

        /**
         * Event-driven commands.
         */
        ...events, // e.g., `on::madrun:default:new`.
    };
};
