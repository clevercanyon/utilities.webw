/**
 * `./.gitattributes` updater.
 *
 * @note PLEASE DO NOT EDIT THIS FILE!
 * @note This entire file will be updated automatically.
 * @note Instead of editing here, please review <https://github.com/clevercanyon/skeleton>.
 */

import fs from 'node:fs';
import path from 'node:path';
import { $mime, $str, $time } from '../../../../../../../node_modules/@clevercanyon/utilities/dist/index.js';
import u from '../../../../../resources/utilities.mjs';
import generatedRegExp from '../../generated-regexp.mjs';

/**
 * Updates `./.gitattributes` file.
 *
 * WARNING: In this file, don't use anything from our `u` (utilities) package that resolves relative directory paths
 * and/or derives information from relative directory paths, without first calling `u.switchProjDir()` to properly
 * prepare utilities. When this file is called upon, it is passed a `projDir` explicitly. This file should only operate
 * on that project directory. Also, don't forget to `u.restoreProjDir()`, to restore the previous project directory.
 */
export default async ({ projDir }) => {
    /**
     * Switches to `projDir`.
     */
    await u.switchProjDir(projDir);

    /**
     * Initializes vars.
     */
    const gitAttributesFile = path.resolve(u.projDir, './.gitattributes');

    /**
     * Defines text|binary contents.
     */
    let gitAttributesFileContentsTextBinary = $str.dedent(`
        # Last generated ${$time.now().toProse()}.

        # Default

        * text=auto eol=lf
    `);
    for (const [groupName, group] of Object.entries($mime.types())) {
        gitAttributesFileContentsTextBinary += '\n\n# ' + groupName + '\n';

        for (const [subgroupExts, subgroup] of Object.entries(group)) {
            for (const subgroupExt of subgroupExts.split('|')) {
                gitAttributesFileContentsTextBinary += '\n*.' + subgroupExt + ' ' + (subgroup.binary ? 'binary' : 'text eol=lf');
            }
        }
    }
    gitAttributesFileContentsTextBinary +=
        '\n\n' +
        $str.dedent(`
        # Special Cases

        *.env.* text eol=lf
        CODEOWNERS text eol=lf
        /src/cargo/_headers text eol=lf
        /src/cargo/_redirects text eol=lf
    `);

    /**
     * Defines large file storage contents.
     */
    let gitAttributesFileContentsLFStorage = $str.dedent(`
        ##
        # LFS storage rules.
        ##

        lfs/** filter=lfs diff=lfs merge=lfs -text
    `);

    /**
     * Defines `./.gitattributes` file contents.
     */
    const oldFileContents = fs.readFileSync(gitAttributesFile).toString();
    const gitAttributesFileContents = oldFileContents.replace(
        generatedRegExp,
        ($_, $1, $2, $3) =>
            $1 + //
            '\n\n' +
            gitAttributesFileContentsTextBinary +
            '\n\n' +
            gitAttributesFileContentsLFStorage +
            '\n\n' +
            $3,
    );

    /**
     * Compiles `./.gitattributes` file contents.
     */
    fs.writeFileSync(gitAttributesFile, gitAttributesFileContents);

    /**
     * Restores previous project directory.
     */
    await u.restoreProjDir();
};
