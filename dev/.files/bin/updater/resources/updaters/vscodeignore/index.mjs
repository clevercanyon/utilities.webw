/**
 * `./.vscodeignore` updater.
 *
 * @note PLEASE DO NOT EDIT THIS FILE!
 * @note This entire file will be updated automatically.
 * @note Instead of editing here, please review <https://github.com/clevercanyon/skeleton>.
 */

import fs from 'node:fs';
import path from 'node:path';
import { $is, $path, $str, $time } from '../../../../../../../node_modules/@clevercanyon/utilities/dist/index.js';
import u from '../../../../../resources/utilities.mjs';
import generatedRegExp from '../../generated-regexp.mjs';

/**
 * Updates `./.vscodeignore` file.
 *
 * WARNING: In this file, don't use anything from our `u` (utilities) package that resolves relative directory paths
 * and/or derives information from relative directory paths, without first calling `u.switchProjDir()` to properly
 * prepare utilities. When this file is called upon, it is passed a `projDir` explicitly. This file should only operate
 * on that project directory. Also, don't forget to `u.restoreProjDir()`, to restore the previous project directory.
 */
export default async ({ projDir }) => {
    /**
     * Switches to `projDir`.
     */
    await u.switchProjDir(projDir);

    /**
     * Initializes vars.
     */
    const vscodeIgnoreFile = path.resolve(u.projDir, './.vscodeignore');

    /**
     * Defines ignore contents.
     */
    let vscodeIgnoreFileContentsIgnores = $str.dedent(`
		# Last generated ${$time.now().toProse()}.
	`);
    for (const [groupName, group] of Object.entries($path.defaultNPMIgnoresByGroup())) {
        vscodeIgnoreFileContentsIgnores += '\n\n# ' + groupName;

        if (!$is.array(group)) {
            for (const [subgroupName, subgroup] of Object.entries(group)) {
                vscodeIgnoreFileContentsIgnores += '\n\n# Â» ' + subgroupName + '\n';

                for (const subgroupIgnore of subgroup) {
                    vscodeIgnoreFileContentsIgnores += '\n' + subgroupIgnore;
                }
            }
        } else {
            vscodeIgnoreFileContentsIgnores += '\n'; // Spacing.

            for (const groupIgnore of group) {
                vscodeIgnoreFileContentsIgnores += '\n' + groupIgnore;
            }
        }
    }

    /**
     * Defines `./.vscodeignore` file contents.
     */
    const oldFileContents = fs.readFileSync(vscodeIgnoreFile).toString();
    const vscodeIgnoreFileContents = oldFileContents.replace(
        generatedRegExp,
        ($_, $1, $2, $3) =>
            $1 + //
            '\n\n' +
            vscodeIgnoreFileContentsIgnores +
            '\n\n' +
            $3,
    );

    /**
     * Compiles `./.vscodeignore` file contents.
     */
    fs.writeFileSync(vscodeIgnoreFile, vscodeIgnoreFileContents);

    /**
     * Restores previous project directory.
     */
    await u.restoreProjDir();
};
