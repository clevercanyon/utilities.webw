#!/usr/bin/env node
/**
 * Dotfiles updater.
 *
 * @note PLEASE DO NOT EDIT THIS FILE!
 * @note This entire file will be updated automatically.
 * @note Instead of editing here, please review <https://github.com/clevercanyon/skeleton>.
 */
/* eslint-env es2021, node */

import os from 'node:os';
import path from 'node:path';
import crypto from 'node:crypto';
import fsp from 'node:fs/promises';

import desm from 'desm';
import chalk from 'chalk';
import spawn from 'spawn-please';

(async () => {
	/**
	 * Initializes vars.
	 */
	const __dirname = desm(import.meta.url);
	const projDir = path.resolve(__dirname, '../../..');

	/**
	 * Validates environment vars.
	 */
	if (!process.env.C10N_GITHUB_TOKEN) {
		throw new Error('`C10N_GITHUB_TOKEN` is a required environment variable.');
	}

	/**
	 * Creates temp directory.
	 */
	const tmpDir = await fsp.mkdtemp(path.resolve(os.tmpdir(), './' + crypto.randomUUID()));

	/**
	 * Downloads latest skeleton.
	 */
	console.log(chalk.green('Downloading latest `clevercanyon/skeleton`.'));

	const skeletonRepoURL =
		'https://' + // Requires personal access token.
		(process.env.C10N_GITHUB_TOKEN || '') +
		'@github.com/clevercanyon/skeleton';

	await spawn('git', ['clone', '--quiet', '--depth=1', skeletonRepoURL, tmpDir], {
		cwd: projDir, // Displays output while running.
		stdout: (buffer) => console.log(chalk.blue(buffer.toString())),
		stderr: (buffer) => console.log(chalk.redBright(buffer.toString())),
	});
	await fsp.rm(path.resolve(tmpDir, './.git'), { recursive: true, force: true });

	/**
	 * Runs `npm clean-install` in latest skeleton directory.
	 */
	console.log(chalk.green('Installing `clevercanyon/skeleton`â€™s dependencies.'));

	await spawn('npm', ['clean-install', '--include=dev', '--silent'], {
		cwd: tmpDir, // Displays output while running.
		stdout: (buffer) => console.log(chalk.blue(buffer.toString())),
		stderr: (buffer) => console.log(chalk.redBright(buffer.toString())),
	});

	/**
	 * Runs updater using files from latest skeleton.
	 */
	console.log(chalk.green('Running updater using latest `clevercanyon/skeleton`.'));

	await (await import(path.resolve(tmpDir, './dev/.files/bin/updater/index.js'))).default({ projDir });

	/**
	 * Runs cleanup tasks prior to completion.
	 */
	console.log(chalk.green('Running cleanup tasks.'));

	await fsp.rm(tmpDir, { recursive: true, force: true });

	/**
	 * Completes update.
	 */
	console.log(chalk.green('Update complete.'));
})();
