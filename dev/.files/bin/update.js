#!/usr/bin/env node
/**
 * Update CLI.
 *
 * @note PLEASE DO NOT EDIT THIS FILE!
 * @note This entire file will be updated automatically.
 * @note Instead of editing here, please review <https://github.com/clevercanyon/skeleton>.
 */
/* eslint-env es2021, node */

import fs from 'node:fs';
import os from 'node:os';
import path from 'node:path';
import crypto from 'node:crypto';
import fsp from 'node:fs/promises';

import chalk from 'chalk';
import spawn from 'spawn-please';
import { dirname, filename } from 'desm';
import { globbyStream } from 'globby';

import yargs from 'yargs';
import { hideBin } from 'yargs/helpers';

const __dirname = dirname(import.meta.url);
const __filename = filename(import.meta.url);

const projsDir = path.resolve(__dirname, '../../../..');
const projDir = path.resolve(__dirname, '../../..');

const envsDir = path.resolve(__dirname, '../../../dev/.envs');
const binDir = path.resolve(__dirname, '../../../dev/.files/bin');

const pkgFile = path.resolve(projDir, './package.json');
const pkg = JSON.parse(fs.readFileSync(pkgFile).toString());

const { log } = console;
const echo = process.stdout.write.bind(process.stdout);

const noisySpawnCfg = {
	cwd: projDir, // Displays output while running.
	stdout: (buffer) => echo(chalk.blue(buffer.toString())),
	stderr: (buffer) => echo(chalk.redBright(buffer.toString())),
};
const quietSpawnCfg = { cwd: projDir };

/**
 * Projects command.
 */
class Projects {
	constructor(args) {
		this.args = args;

		(async () => {
			await this.update();
		})();
	}

	async update() {
		const globStream = globbyStream(this.args.glob, {
			expandDirectories: false,
			onlyDirectories: true,
			absolute: false,
			cwd: projsDir,
			dot: false,
		});
		for await (const projDirSubPath of globStream) {
			const projDir = path.resolve(projsDir, projDirSubPath);
			const binDir = path.resolve(projDir, './dev/.files/bin');
			const binDirUpdate = path.resolve(binDir, './update.js');

			if (!fs.existsSync(binDirUpdate)) {
				continue; // False positive. No `binDirUpdate`.
			}
			if (!fs.existsSync(path.resolve(projDir, './package.json'))) {
				continue; // False positive. No `package.json` file.
			}
			switch (true /* Against case-based conditions. */) {
				case 'project' === this.args.update && this.args.repos && this.args.pkgs:
					log(chalk.green('Updating project:') + ' ' + chalk.yellow(projDirSubPath));
					await spawn(binDirUpdate, [this.args.update, '--repos', '--pkgs', '--mode', this.args.mode], { ...noisySpawnCfg, cwd: projDir });
					break;

				case 'project' === this.args.update && this.args.repos:
					log(chalk.green('Updating project:') + ' ' + chalk.yellow(projDirSubPath));
					await spawn(binDirUpdate, [this.args.update, '--repos', '--mode', this.args.mode], { ...noisySpawnCfg, cwd: projDir });
					break;

				case 'project' === this.args.update:
					log(chalk.green('Updating project:') + ' ' + chalk.yellow(projDirSubPath));
					await spawn(binDirUpdate, [this.args.update, '--mode', this.args.mode], { ...noisySpawnCfg, cwd: projDir });
					break;

				case 'dotfiles' === this.args.update && 'skeleton' === path.basename(projDir):
					log(chalk.green('Updating dotfiles in:') + ' ' + chalk.yellow(projDirSubPath));
					await spawn(binDirUpdate, [this.args.update, '--skeletonUpdatesOthers'], { ...noisySpawnCfg, cwd: projDir });
					break;

				case 'dotfiles' === this.args.update:
					log(chalk.green('Updating dotfiles in:') + ' ' + chalk.yellow(projDirSubPath));
					await spawn(binDirUpdate, [this.args.update], { ...noisySpawnCfg, cwd: projDir });
					break;
			}
		}
		log(chalk.green('Project updates complete.'));
	}
}

/**
 * Project command.
 */
class Project {
	constructor(args) {
		this.args = args;

		(async () => {
			await this.update();
		})();
	}

	async update() {
		log(chalk.green('Updating dotfiles.'));
		await u.updateDotfiles();

		log(chalk.green('Updating NPM packages.'));
		await u.npmUpdate();

		if (this.args.repos && this.args.pkgs && (await u.isNPMPkgPublishable({ mode: this.args.mode }))) {
			log(chalk.green('NPM package will publish, so patching NPM version prior to build.'));
			await u.npmVersionPatch(); // Git commit(s) + git tag.
		}
		log(chalk.green('Updating build; `' + this.args.mode + '` mode.'));
		await u.viteBuild({ mode: this.args.mode });

		if (this.args.repos) {
			if (await u.isGitRepo()) {
				log(chalk.green('Updating git repo; `' + (await u.gitCurrentBranch()) + '` branch.'));
				await u.gitAddCommitPush();
			} else {
				log(chalk.gray('Not a git repo.'));
			}

			if (await u.isEnvsRepo()) {
				log(chalk.green('Updating envs repo.'));
				await u.envsPush();
			} else {
				log(chalk.gray('Not an envs repo.'));
			}

			if (this.args.pkgs && (await u.isNPMPkgPublishable({ mode: this.args.mode }))) {
				log(chalk.green('Publishing NPM package.'));
				await u.npmPublish();
			} else {
				log(chalk.gray('Not an NPM package. Or, not in a publishable state.'));
			}
		}
		log(chalk.green('Project update complete.'));
	}
}

/**
 * Dotfiles command.
 */
class Dotfiles {
	constructor(args) {
		this.args = args;

		(async () => {
			await this.update();
		})();
	}

	async update() {
		/**
		 * Don't lose skeleton changes.
		 */
		if ('@clevercanyon/skeleton' === pkg.name && (await u.isGitRepoDirty())) {
			log(chalk.green('Updating `@clevercanyon/skeleton` git repo; `' + (await u.gitCurrentBranch()) + '` branch.'));
			log('    ' + chalk.green('i.e., saving latest skeleton changes before self-update.'));
			await u.gitAddCommitPush();
		}

		/**
		 * Downloads latest skeleton.
		 *
		 * @review Optimize by not re-downloading every time.
		 */
		log(chalk.green('Git-cloning latest `@clevercanyon/skeleton`.'));
		const tmpDir = await fsp.mkdtemp(path.resolve(os.tmpdir(), './' + crypto.randomUUID()));
		await spawn('git', ['clone', '--quiet', '--depth=1', 'git@github.com:clevercanyon/skeleton.git', tmpDir], { ...noisySpawnCfg, cwd: tmpDir });
		await fsp.rm(path.resolve(tmpDir, './.git'), { recursive: true, force: true });

		/**
		 * Runs `npm clean-install` in latest skeleton directory.
		 *
		 * @review Optimize by not reinstalling every time.
		 */
		log(chalk.green('Installing `@clevercanyon/skeleton`’s dependencies.'));
		await spawn('npm', ['clean-install', '--include=dev', '--silent'], { ...noisySpawnCfg, cwd: tmpDir });

		/**
		 * Runs updater using files from latest skeleton.
		 */
		log(chalk.green('Running updater using latest `@clevercanyon/skeleton`.'));
		await (await import(path.resolve(tmpDir, './dev/.files/bin/updater/index.js'))).default({ projDir, args: this.args });

		/**
		 * Runs cleanup tasks prior to completion.
		 */
		log(chalk.green('Running dotfile cleanup tasks.'));
		await fsp.rm(tmpDir, { recursive: true, force: true });

		/**
		 * Completes dotfiles update.
		 */
		log(chalk.green('Dotfiles update complete.'));
	}
}

/**
 * Utilities.
 */
class u {
	static async updateDotfiles() {
		await spawn(__filename, ['dotfiles'], noisySpawnCfg);
	}

	static async isGitRepo() {
		try {
			return 'true' === String(await spawn('git', ['rev-parse', '--is-inside-work-tree'], quietSpawnCfg)).trim();
		} catch {
			return false;
		}
	}

	static async isGitRepoDirty() {
		try {
			return (await u.isGitRepo()) && '' !== String(await spawn('git', ['status', '--short'], quietSpawnCfg)).trim();
		} catch {
			return false;
		}
	}

	static async isEnvsRepo() {
		return (
			(await u.isGitRepo()) &&
			fs.existsSync(path.resolve(projDir, './.env.me')) &&
			fs.existsSync(path.resolve(projDir, './.env.vault')) &&
			fs.existsSync(path.resolve(envsDir, './.env'))
		);
	}

	static async isNPMPkg() {
		return (await u.isGitRepo()) && false === pkg.private;
	}

	static async isNPMPkgPublishable(opts = { mode: 'prod' }) {
		return (await u.isNPMPkg()) && 'main' === (await u.gitCurrentBranch()) && 'prod' === opts.mode;
	}

	static async gitCurrentBranch() {
		return (await u.isGitRepo()) ? String(await spawn('git', ['symbolic-ref', '--short', '--quiet', 'HEAD'], quietSpawnCfg)).trim() : '';
	}

	static async gitChange() {
		await fsp.writeFile(path.resolve(projDir, './.gitchange'), String(Date.now()));
	}

	static async gitAddCommit(message = 'Robotic update.') {
		await u.gitChange(); // Force a change.
		await spawn('git', ['add', '--all'], noisySpawnCfg);
		await spawn('git', ['commit', '--message', message], noisySpawnCfg);
	}

	static async gitAddCommitPush(message = 'Robotic update.') {
		await u.gitChange(); // Force a change.
		const branch = await u.gitCurrentBranch();

		await spawn('git', ['add', '--all'], noisySpawnCfg);
		await spawn('git', ['commit', '--message', message], noisySpawnCfg);

		await spawn('git', ['push', '--set-upstream', 'origin', branch], noisySpawnCfg);
		await spawn('git', ['push', 'origin', '--tags'], noisySpawnCfg);
	}

	static async envsPush() {
		await spawn(path.resolve(binDir, './envs.js'), ['push'], quietSpawnCfg);
	}

	static async npmUpdate() {
		await spawn('npm', ['update', '--include=dev', '--silent'], quietSpawnCfg);
	}

	static async npmVersionPatch() {
		if (await u.isGitRepoDirty()) await u.gitAddCommit();
		await spawn('npm', ['version', 'patch'], noisySpawnCfg);
	}

	static async npmPublish() {
		await spawn('npm', ['publish'], noisySpawnCfg);
	}

	static async viteBuild(opts = { mode: 'prod' }) {
		await spawn('npx', ['vite', 'build', '--mode', opts.mode], noisySpawnCfg);
		await spawn('npx', ['tsc'], noisySpawnCfg); // TypeScript types.
	}
}

/**
 * Yargs ⛵🏴‍☠
 *
 * @see http://yargs.js.org/docs/
 */
(async () => {
	await yargs(hideBin(process.argv))
		.command(
			['projects'],
			'Updates projects.',
			{
				glob: {
					type: 'string',
					requiresArg: true,
					demandOption: false,
					default: '*', // Default is all projects.
					description:
						'Update only specific project directories?' + //
						' Glob matching is relative to projects directory.' + //
						' Glob matching is against project directories only.',
				},
				update: {
					type: 'string',
					requiresArg: true,
					demandOption: true,
					choices: ['project', 'dotfiles'],
					description: 'What to update in each project.',
				},
				repos: {
					type: 'boolean',
					requiresArg: false,
					demandOption: false,
					default: false,
					description: 'Update project repos?',
				},
				pkgs: {
					type: 'boolean',
					requiresArg: false,
					demandOption: false,
					default: false,
					implies: ['repos'],
					description: 'Update project packages?',
				},
				mode: {
					type: 'string',
					requiresArg: true,
					demandOption: false,
					default: 'prod',
					choices: ['dev', 'ci', 'stage', 'prod'],
					description: 'Build & env mode.',
				},
			},
			(args) => new Projects(args),
		)
		.command(
			['project'],
			'Updates project.',
			{
				repos: {
					type: 'boolean',
					requiresArg: false,
					demandOption: false,
					default: false,
					description: 'Update project repos?',
				},
				pkgs: {
					type: 'boolean',
					requiresArg: false,
					demandOption: false,
					default: false,
					implies: ['repos'],
					description: 'Update project packages?',
				},
				mode: {
					type: 'string',
					requiresArg: true,
					demandOption: false,
					default: 'prod',
					choices: ['dev', 'ci', 'stage', 'prod'],
					description: 'Build & env mode.',
				},
			},
			(args) => new Project(args),
		)
		.command(
			['dotfiles'],
			'Updates dotfiles.',
			{
				skeletonUpdatesOthers: {
					type: 'boolean',
					requiresArg: false,
					demandOption: false,
					default: false,
					description: 'Updating `@clevercanyon/skeleton` also updates others? Such as `skeleton-dev-deps` and `*.fork`s.',
				},
			},
			(args) => new Dotfiles(args),
		)
		.strict()
		.help()
		.parse();
})();
