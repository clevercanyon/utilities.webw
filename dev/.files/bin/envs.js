#!/usr/bin/env node
/**
 * Env CLI.
 *
 * @note PLEASE DO NOT EDIT THIS FILE!
 * @note This entire file will be updated automatically.
 * @note Instead of editing here, please review <https://github.com/clevercanyon/skeleton>.
 */
/* eslint-env es2021, node */

import fs from 'node:fs';
import path from 'node:path';
import fsp from 'node:fs/promises';

import desm from 'desm';
import chalk from 'chalk';
import spawn from 'spawn-please';

import yargs from 'yargs';
import { hideBin } from 'yargs/helpers';

const __dirname = desm(import.meta.url);
const projDir = path.resolve(__dirname, '../../..');

const echo = process.stdout.write.bind(process.stdout);

const spawnCfg = {
	cwd: projDir, // Displays output while running.
	stdout: (buffer) => echo(chalk.blue(buffer.toString())),
	stderr: (buffer) => echo(chalk.redBright(buffer.toString())),
};
const envFiles = {
	main: path.resolve(projDir, './dev/.envs/.env'),
	dev: path.resolve(projDir, './dev/.envs/.env.dev'),
	ci: path.resolve(projDir, './dev/.envs/.env.ci'),
	stage: path.resolve(projDir, './dev/.envs/.env.stage'),
	prod: path.resolve(projDir, './dev/.envs/.env.prod'),
};

/**
 * Setup command.
 */
class Setup {
	constructor(args) {
		this.args = args;

		(async () => {
			if (this.args['new']) {
				await this.setupNew();
			} else {
				await this.setup();
			}
		})();
	}

	async setupNew() {
		await fsp.rm(path.resolve(projDir, './.env.me'), { force: true });
		await fsp.rm(path.resolve(projDir, './.env.vault'), { force: true });

		await spawn('npx', ['dotenv-vault', 'new', '--yes'], spawnCfg);
		await spawn('npx', ['dotenv-vault', 'login', '--yes'], spawnCfg);
		await spawn('npx', ['dotenv-vault', 'build', '--yes'], spawnCfg);
		await spawn('npx', ['dotenv-vault', 'open', '--yes'], spawnCfg);

		await Utilities.push(); // Maybe existing files; else new files.
	}

	async setup() {
		await spawn('npx', ['dotenv-vault', 'login', '--yes'], spawnCfg);
		await spawn('npx', ['dotenv-vault', 'open', '--yes'], spawnCfg);

		await Utilities.pull(); // Latest and greatest!
	}
}

/**
 * Push command.
 */
class Push {
	constructor(args) {
		this.args = args;
		(async () => await Utilities.push())();
	}
}

/**
 * Pull command.
 */
class Pull {
	constructor(args) {
		this.args = args;
		(async () => await Utilities.pull())();
	}
}

/**
 * Misc. utilities.
 */
class Utilities {
	static async push() {
		for (const [envName, envFile] of Object.entries(envFiles)) {
			if (!fs.existsSync(envFile)) {
				await fsp.writeFile(envFile, '# ' + envName);
			}
			await spawn('npx', ['dotenv-vault', 'push', envName, envFile, '--yes'], spawnCfg);
		}
	}

	static async pull() {
		for (const [envName, envFile] of Object.entries(envFiles)) {
			await fsp.mkdir(path.dirname(envFile), { recursive: true });
			await spawn('npx', ['dotenv-vault', 'pull', envName, envFile, '--yes'], spawnCfg);
			await fsp.rm(envFile + '.previous', { force: true });
		}
	}
}

/**
 * Yargs ⛵🏴‍☠
 */
(async () => {
	await yargs(hideBin(process.argv))
		.command(
			'setup',
			'Sets up dotenv vault.',
			{
				'new': {
					type: 'boolean',
					default: false,
				},
			},
			(args) => new Setup(args),
		)
		.command('push', 'Pushes to dotenv vault.', {}, (args) => new Push(args))
		.command('pull', 'Pulls from dotenv vault.', {}, (args) => new Pull(args))
		.help()
		.parse();
})();
