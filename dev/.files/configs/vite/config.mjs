/**
 * Vite config file.
 *
 * Vite is not aware of this config file's location.
 *
 * @note PLEASE DO NOT EDIT THIS FILE!
 * @note This entire file will be updated automatically.
 * @note Instead of editing here, please review <https://github.com/clevercanyon/skeleton>.
 *
 * @see https://vitejs.dev/config/
 */

import appConfigHelper from './resources/helpers/app/config.mjs';
import basicConfigHelper from './resources/helpers/basic/config.mjs';
import buildConfigHelper from './resources/helpers/build/config.mjs';
import condsConfigHelper from './resources/helpers/conds/config.mjs';
import depsConfigHelper from './resources/helpers/deps/config.mjs';
import dirsConfigHelper from './resources/helpers/dirs/config.mjs';
import envConfigHelper from './resources/helpers/env/config.mjs';
import esbuildConfigHelper from './resources/helpers/esbuild/config.mjs';
import expConfigHelper from './resources/helpers/exp/config.mjs';
import loggerConfigHelper from './resources/helpers/logger/config.mjs';
import modeConfigHelper from './resources/helpers/mode/config.mjs';
import pkgUpdatesHelper from './resources/helpers/pkg/updates.mjs';
import pluginsConfigHelper from './resources/helpers/plugins/config.mjs';
import previewConfigHelper from './resources/helpers/preview/config.mjs';
import resolveConfigHelper from './resources/helpers/resolve/config.mjs';
import rollupConfigHelper from './resources/helpers/rollup/config.mjs';
import serverConfigHelper from './resources/helpers/server/config.mjs';
import sslConfigHelper from './resources/helpers/ssl/config.mjs';
import ssrConfigHelper from './resources/helpers/ssr/config.mjs';
import staticConfigHelper from './resources/helpers/static/config.mjs';
import terserConfigHelper from './resources/helpers/terser/config.mjs';
import timeConfigHelper from './resources/helpers/time/config.mjs';
import varsValidationHelper from './resources/helpers/vars/validation.mjs';
import vitestConfigHelper from './resources/helpers/vitest/config.mjs';
import workerConfigHelper from './resources/helpers/worker/config.mjs';

/**
 * Defines Vite configuration.
 *
 * @param   context Context passed by Vite.
 *
 * @returns         Vite configuration.
 */
export default async ({ mode: viteMode, command: viteCommand, isSsrBuild: viteIsSsrBuild }) => {
    /**
     * Configuration vars.
     */

    /**
     * Configures time vars.
     */
    const { time }
        = await timeConfigHelper({
            // Nothing to pass at this time.
        }); // prettier-ignore

    /**
     * Configures mode vars.
     */
    const { mode, command, isSSRBuild, wranglerMode, vitestSandboxEnable, vitestExamplesEnable }
        = await modeConfigHelper({
            viteMode, viteCommand, viteIsSsrBuild,
        }); // prettier-ignore

    /**
     * Configures environment vars.
     */
    const { appEnvPrefixes, env, appBaseURL, appBaseURLResolvedNTS }
        = await envConfigHelper({
            mode, command, isSSRBuild,
        }); // prettier-ignore

    /**
     * Configures static vars.
     */
    const { staticDefs }
        = await staticConfigHelper({
            time, appEnvPrefixes, env, appBaseURL, appBaseURLResolvedNTS,
        }); // prettier-ignore

    /**
     * Configures directory vars.
     */
    const { cacheDir, a16sDir }
        = await dirsConfigHelper({
            isSSRBuild,
        }); // prettier-ignore

    /**
     * Configures SSL vars.
     */
    const { sslKey, sslCrt }
        = await sslConfigHelper({
            // Nothing to pass at this time.
        }); // prettier-ignore

    /**
     * Configures app-related vars.
     */
    const { appType, targetEnv, targetEnvIsServer, sideEffects, appEntries,
        appEntriesAsProjRelPaths, appEntriesAsSrcSubpaths, appEntriesAsSrcSubpathsNoExt }
        = await appConfigHelper({
            isSSRBuild,
        }); // prettier-ignore

    /**
     * Configures conditional vars.
     */
    const { inProdLikeMode, sourcemapsEnable, minifyEnable, prefreshEnable }
        = await condsConfigHelper({
            mode, command, wranglerMode, appType,
        }); // prettier-ignore

    /**
     * Configuration validation.
     */

    /**
     * Validates configuration vars.
     */
    await varsValidationHelper({
        mode, isSSRBuild, appBaseURL, appType, targetEnv, targetEnvIsServer, appEntries,
    }); // prettier-ignore

    /**
     * Package updates.
     */

    /**
     * Performs `./package.json` updates and modifies `sideEffects` by reference.
     */
    const { pkgUpdates }
        = await pkgUpdatesHelper({
            command, isSSRBuild, appType, targetEnv, sideEffects,
            appEntriesAsProjRelPaths, appEntriesAsSrcSubpaths, appEntriesAsSrcSubpathsNoExt,
        }); // prettier-ignore

    /**
     * Sub-level configurations.
     */

    /**
     * Configures terser.
     */
    const { terserConfig }
        = await terserConfigHelper({
            // Nothing to pass at this time.
        }); // prettier-ignore

    /**
     * Configures rollup.
     */
    const { rollupConfig }
        = await rollupConfigHelper({
            a16sDir, appType, appEntries, minifyEnable, sideEffects,
        }); // prettier-ignore

    /**
     * Top-level configurations.
     */

    /**
     * Configures basics.
     */
    const { basicConfig }
        = await basicConfigHelper({
            isSSRBuild, appEnvPrefixes, appBaseURLResolvedNTS, staticDefs, cacheDir, appType, pkgUpdates,
        }); // prettier-ignore

    /**
     * Configures build.
     */
    const { buildConfig }
        = await buildConfigHelper({
            isSSRBuild, a16sDir, appType, targetEnvIsServer, appEntries,
            sourcemapsEnable, minifyEnable, terserConfig, rollupConfig,
        }); // prettier-ignore

    /**
     * Configures custom logger.
     */
    const { loggerConfig }
        = await loggerConfigHelper({
            // Nothing to pass at this time.
        }); // prettier-ignore

    /**
     * Configures esbuild.
     */
    const { esbuildConfig }
        = await esbuildConfigHelper({
            // Nothing to pass at this time.
        }); // prettier-ignore

    /**
     * Configures experimentals.
     */
    const { expConfig }
        = await expConfigHelper({
            // Nothing to pass at this time.
        }); // prettier-ignore

    /**
     * Configures deps.
     */
    const { depsConfig }
        = await depsConfigHelper({
            prefreshEnable,
        }); // prettier-ignore

    /**
     * Configures plugins.
     */
    const { pluginsConfig }
        = await pluginsConfigHelper({
            mode, command, isSSRBuild, wranglerMode, env, appBaseURL, staticDefs,
            appType, targetEnv, inProdLikeMode, minifyEnable, prefreshEnable, pkgUpdates,
        }); // prettier-ignore

    /**
     * Configures preview.
     */
    const { previewConfig }
        = await previewConfigHelper({
            sslKey, sslCrt,
        }); // prettier-ignore

    /**
     * Configures resolve.
     */
    const { resolveConfig }
        = await resolveConfigHelper({
            // Nothing to pass at this time.
        }); // prettier-ignore

    /**
     * Configures server.
     */
    const { serverConfig }
        = await serverConfigHelper({
            sslKey, sslCrt,
        }); // prettier-ignore

    /**
     * Configures SSR.
     */
    const { ssrConfig }
        = await ssrConfigHelper({
            targetEnv, targetEnvIsServer,
        }); // prettier-ignore

    /**
     * Configures vitest.
     */
    const { vitestConfig }
        = await vitestConfigHelper({
            mode, appType, targetEnv,
            vitestSandboxEnable, vitestExamplesEnable,
            rollupConfig, depsConfig,
        }); // prettier-ignore

    /**
     * Configures workers.
     */
    const { workerConfig }
        = await workerConfigHelper({
            rollupConfig,
        }); // prettier-ignore

    /**
     * Composition.
     */

    /**
     * Returns composition.
     */
    return {
        ...basicConfig,
        build: buildConfig,
        customLogger: loggerConfig,
        esbuild: esbuildConfig,
        experimental: expConfig,
        optimizeDeps: depsConfig,
        plugins: pluginsConfig,
        preview: previewConfig,
        resolve: resolveConfig,
        server: serverConfig,
        ssr: ssrConfig,
        test: vitestConfig,
        worker: workerConfig,
    };
};
