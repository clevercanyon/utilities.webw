/**
 * App-related configuration.
 *
 * Vite is not aware of this config file's location.
 *
 * @note PLEASE DO NOT EDIT THIS FILE!
 * @note This entire file will be updated automatically.
 * @note Instead of editing here, please review <https://github.com/clevercanyon/skeleton>.
 */

import path from 'node:path';
import { $glob } from '../../../../../../../node_modules/@clevercanyon/utilities.node/dist/index.js';
import { $str } from '../../../../../../../node_modules/@clevercanyon/utilities/dist/index.js';
import u from '../../../../../resources/utilities.mjs';

/**
 * Configures app-related vars.
 *
 * @param   props Props from vite config file driver.
 *
 * @returns       App-related configuration.
 */
export default async ({ isSSRBuild }) => {
    const appType = (isSSRBuild ? u.pkgSSRBuildAppType : u.pkgBuildAppType) || 'cma';
    const targetEnv = (isSSRBuild ? u.pkgSSRBuildTargetEnv : u.pkgBuildTargetEnv) || 'any';
    const targetEnvIsServer = ['cfw', 'node'].includes(targetEnv); // A server environment?
    const sideEffects = (isSSRBuild ? u.pkgSSRBuildSideEffects : u.pkgBuildSideEffects) || [];

    const _appDefaultEntryFiles = // Based on app type.
            ['spa'].includes(appType) ? ['./src/index.' + u.exts.asBracedGlob([...u.exts.byCanonical.html])]
            : ['mpa'].includes(appType) ? ['./src/**/index.' + u.exts.asBracedGlob([...u.exts.byCanonical.html])]
            : ['./src/*.' + u.exts.asBracedGlob([...u.exts.byDevGroup.sTypeScript, ...u.exts.byDevGroup.sTypeScriptReact])],
         _appPkgEntryFiles = (isSSRBuild ? u.pkgSSRBuildEntryFiles : u.pkgBuildEntryFiles) || [],
         _appEntryFiles = (_appPkgEntryFiles.length ? _appPkgEntryFiles : _appDefaultEntryFiles).map((v) => $str.lTrim(v, './')); // prettier-ignore

    const appEntries = _appEntryFiles.length ? await $glob.promise(_appEntryFiles, { cwd: u.projDir }) : [];
    const appEntriesAsProjRelPaths = appEntries.map((absPath) => './' + path.relative(u.projDir, absPath));
    const appEntriesAsSrcSubpaths = appEntries.map((absPath) => path.relative(u.srcDir, absPath));
    const appEntriesAsSrcSubpathsNoExt = appEntriesAsSrcSubpaths.map((subpath) => subpath.replace(/\.[^.]+$/u, ''));

    return { appType, targetEnv, targetEnvIsServer, sideEffects, appEntries, appEntriesAsProjRelPaths, appEntriesAsSrcSubpaths, appEntriesAsSrcSubpathsNoExt };
};
