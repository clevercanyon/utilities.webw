/**
 * Environment configuration.
 *
 * Vite is not aware of this config file's location.
 *
 * @note PLEASE DO NOT EDIT THIS FILE!
 * @note This entire file will be updated automatically.
 * @note Instead of editing here, please review <https://github.com/clevercanyon/skeleton>.
 */

import { loadEnv } from 'vite';
import { $env, $str } from '../../../../../../../node_modules/@clevercanyon/utilities/dist/index.js';
import u from '../../../../../resources/utilities.mjs';

/**
 * Configures environment.
 *
 * Regarding base URL. A trailing slash matters. We leave it up to an implementation to decide what type of base URL it
 * prefers to use. A base URL is only required for some app types however; e.g., `spa|mpa` app types.
 *
 * - Example: `new URL('./', 'https://example.com/')` = `https://example.com/`.
 * - Example: `new URL('./', 'https://example.com/base')` = `https://example.com/`.
 * - Example: `new URL('./', 'https://example.com/base/')` = `https://example.com/base/`.
 *
 * @param   props Props from vite config file driver.
 *
 * @returns       Environment configuration.
 */
export default async ({ mode, command, isSSRBuild }) => {
    // Must set these before running `loadEnv()`.

    $env.set('@global', 'APP_IS_VITE', command + '=' + mode);
    $env.set('@global', 'NODE_ENV', 'dev' === mode ? 'development' : 'production');

    // Configures app environment prefixes.

    const appEnvPrefixes = ['APP_'];
    if (isSSRBuild) appEnvPrefixes.push('SSR_APP_');

    // `loadEnv()` includes `process.env.[appEnvPrefixes]*`.
    // In other words, `APP_IS_VITE` will be in our resulting `env`.

    const env = loadEnv(mode, u.envsDir, appEnvPrefixes);

    // Configures app base URL vars.

    const appBaseURL = env.APP_BASE_URL || ''; // â†“ NTS = no trailing slash.
    const appBaseURLResolvedNTS = appBaseURL ? $str.rTrim(new URL('./', appBaseURL).toString(), '/') : '';

    // Informs Tailwind brand acquisition.

    $env.set('@global', '_VITE_MODE_', mode);
    $env.set('@global', '_VITE_APP_BASE_URL_', appBaseURL);

    // Returns configuration.

    return { appEnvPrefixes, env, appBaseURL, appBaseURLResolvedNTS };
};
