/**
 * Pre-processing plugin.
 *
 * Vite is not aware of this config file's location.
 *
 * @note PLEASE DO NOT EDIT THIS FILE!
 * @note This entire file will be updated automatically.
 * @note Instead of editing here, please review <https://github.com/clevercanyon/skeleton>.
 */

import fs from 'node:fs';
import os from 'node:os';
import path from 'node:path';
import { $chalk } from '../../../../../../../../node_modules/@clevercanyon/utilities.node/dist/index.js';
import u from '../../../../../../resources/utilities.mjs';
import getWranglerSettings from '../../../../../wrangler/resources/settings.mjs';

/**
 * Configures pre-processing plugin.
 *
 * @param   props Props from vite config file driver.
 *
 * @returns       Pre-processing plugin.
 */
export default async ({ command, isSSRBuild, appType }) => {
    const wranglerSettings = await getWranglerSettings();
    return {
        name: 'vite-plugin-c10n-pre-processing',
        enforce: 'pre', // Before others on this hook.

        // By 'pre', we mean before writing bundle to disk.
        // i.e., The `buildEnd` hook fires before writing to disk.
        buildEnd(error) {
            if (error) return; // Not applicable.

            const maybeEmptyDistDir = () => {
                    if ('build' !== command || isSSRBuild) return;
                    if (!fs.existsSync(u.distDir)) return;

                    if (['spa', 'mpa'].includes(appType)) {
                        // Preserving important-ish things in `wranglerSettings.distNmCacheDir`.
                        // e.g., `./dist/node_modules/.cache/wrangler/wrangler-account.json`.

                        if (fs.existsSync(wranglerSettings.distNmCacheDir)) {
                            const tmpDir = fs.mkdtempSync(path.resolve(os.tmpdir(), './wrangler-')),
                                tmpDistNmCacheDir = path.resolve(tmpDir, './distNmCacheDir');

                            u.log($chalk.gray('Preserving `./' + path.relative(u.projDir, wranglerSettings.distNmCacheDir) + '`.'));
                            fs.renameSync(wranglerSettings.distNmCacheDir, tmpDistNmCacheDir);

                            resetDistDir(); // Resets `./dist` directory.

                            u.log($chalk.gray('Restoring `./' + path.relative(u.projDir, wranglerSettings.distNmCacheDir) + '`.'));
                            fs.mkdirSync(path.dirname(wranglerSettings.distNmCacheDir), { recursive: true });
                            fs.renameSync(tmpDistNmCacheDir, wranglerSettings.distNmCacheDir);
                            fs.rmSync(tmpDir, { force: true, recursive: true });

                            return; // Done; stop here.
                        }
                    }
                    resetDistDir(); // Resets `./dist` directory.
                },
                resetDistDir = () => {
                    u.log($chalk.gray('Resetting `./' + path.relative(u.projDir, u.distDir) + '` directory.'));
                    fs.rmSync(u.distDir, { force: true, recursive: true });
                };

            maybeEmptyDistDir(); // Empties `./dist` directory prior to a new bundle being written to disk.
        },
    };
};
