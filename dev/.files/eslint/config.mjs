/**
 * ESLint config file.
 *
 * ESLint is not aware of this config file's location.
 *
 * This config file can be tested using:
 *
 *     $ ESLINT_USE_FLAT_CONFIG=true npx eslint --config ./eslint.config.mjs --print-config [file]
 *
 * @note PLEASE DO NOT EDIT THIS FILE!
 * @note This entire file will be updated automatically.
 * @note Instead of editing here, please review <https://github.com/clevercanyon/skeleton>.
 *
 * @see https://eslint.org/docs/latest/user-guide/command-line-interface
 * @see https://eslint.org/docs/latest/use/configure/configuration-files-new
 */

import eslintJS from '@eslint/js';
import pluginTypeScript from '@typescript-eslint/eslint-plugin';
import parserTypeScript from '@typescript-eslint/parser';
import configPrettier from 'eslint-config-prettier';
import pluginJSXA11y from 'eslint-plugin-jsx-a11y';
import pluginPrettier from 'eslint-plugin-prettier';
import * as parserESPree from 'espree';
import globals from 'globals';
import fs from 'node:fs';
import path from 'node:path';
import { $fs } from '../../../node_modules/@clevercanyon/utilities.node/dist/index.js';
import { $json, $obp } from '../../../node_modules/@clevercanyon/utilities/dist/index.js';
import esVersion from '../bin/includes/es-version.mjs';
import exclusions from '../bin/includes/exclusions.mjs';
import extensions from '../bin/includes/extensions.mjs';

const __dirname = $fs.imuDirname(import.meta.url);
const projDir = path.resolve(__dirname, '../../..');
const pkgFile = path.resolve(projDir, './package.json');

if (!fs.existsSync(pkgFile)) {
	throw new Error('eslint/config.cjs: Missing `./package.json`.');
}
const pkg = $json.parse(fs.readFileSync(pkgFile).toString());

const targetEnv = $obp.get(pkg, 'config.c10n.&.build.targetEnv', 'any');
const ssrTargetEnv = $obp.get(pkg, 'config.c10n.&.ssrBuild.targetEnv', '');

/**
 * Defines ESLint configuration.
 */
export default async () => {
	/**
	 * Base configs.
	 */
	const baseConfigs = [
		{
			// In a config all by itself for these to be treated as global ignores; {@see https://o5p.me/RqSMYb}.
			// Additionally, our own config files expect this to be at index position `0`.

			ignores: [
				...exclusions.vcsFilesDirs, //
				...exclusions.packageDirs,
				...exclusions.distDirs,
				...exclusions.sandboxDirs,
			],
		},
		{
			// In a config without a `files` filter for these to treated as global settings; {@see https://o5p.me/JiooH5}.
			// Additionally, our own config files expect this to be at index position `1`.

			languageOptions: {
				ecmaVersion: esVersion.year,
				sourceType: pkg.type || 'script',

				parser: parserESPree,
				parserOptions: {
					ecmaFeatures: {
						jsx: false,
						impliedStrict: true,
					},
				},
				globals: {
					// ES version globals (builtins).
					// Provided by current ES version.

					...esVersion.globals,

					// Declares globals based on target environment(s).
					// For docs on our target environments; {@see https://o5p.me/nCnEkQ}.

					...(targetEnv // Globals for target environment.
						? {
								...(['node', 'any'].includes(targetEnv) ? globals.nodeBuiltin : {}),
								...(['cfw', 'any'].includes(targetEnv) ? globals.serviceworker : {}),
								...(['cfp', 'web', 'any'].includes(targetEnv) ? globals.browser : {}),
								...(['webw', 'any'].includes(targetEnv) ? globals.worker : {}),
						  }
						: {}),
					...(ssrTargetEnv // Globals for SSR target environment.
						? {
								...(['node', 'any'].includes(ssrTargetEnv) ? globals.nodeBuiltin : {}),
								...(['cfw', 'any'].includes(ssrTargetEnv) ? globals.serviceworker : {}),
								...(['cfp', 'web', 'any'].includes(ssrTargetEnv) ? globals.browser : {}),
								...(['webw', 'any'].includes(ssrTargetEnv) ? globals.worker : {}),
						  }
						: {}),
				},
			},
			rules: {
				...eslintJS.configs.recommended.rules,
			},
		},
	];

	/**
	 * Composition.
	 */
	return {
		config: [
			...baseConfigs,

			// Source configurations.
			{
				files: ['**/*.' + extensions.asGlob(extensions.sjts)],
				languageOptions: { sourceType: pkg.type || 'script' },
			},
			{
				files: ['**/*.' + extensions.asGlob(extensions.mjts)],
				languageOptions: { sourceType: 'module' },
			},
			{
				files: ['**/*.' + extensions.asGlob(extensions.cjts)],
				languageOptions: { sourceType: 'commonjs' },
			},

			// Dotfile configurations.
			{
				files: [
					'*.' + extensions.asGlob(extensions.jts), //
					'dev/.files/**/*.' + extensions.asGlob(extensions.jts),
				],
				languageOptions: { globals: { ...globals.nodeBuiltin } },
			},
			{
				files: [
					'*.' + extensions.asGlob(extensions.cjts), //
					'dev/.files/**/*.' + extensions.asGlob(extensions.cjts),
				], // Includes CJS globals like `__dirname`.
				languageOptions: { globals: { ...globals.node } },
			},

			// JSX/TSX configurations.
			{
				files: ['**/*.' + extensions.asGlob(extensions.jtsx)],
				plugins: { 'jsx-a11y': pluginJSXA11y },

				languageOptions: {
					parserOptions: {
						ecmaFeatures: { jsx: true },
					},
				},
				rules: { ...pluginJSXA11y.configs.recommended.rules },
			},

			// TypeScript configurations.
			{
				files: ['**/*.' + extensions.asGlob(extensions.ts)],
				plugins: { '@typescript-eslint': pluginTypeScript },

				languageOptions: {
					parser: parserTypeScript,
					parserOptions: {
						requireConfigFile: true,
						project: ['**/tsconfig.json'],
					},
				},
				rules: {
					...pluginTypeScript.configs.recommended.rules,
					...pluginTypeScript.configs['recommended-requiring-type-checking'].rules,
				},
			},

			// Prettier configurations.
			{
				files: ['**/*.' + extensions.asGlob(extensions.json.concat(extensions.jts))],
				plugins: { prettier: pluginPrettier },

				rules: {
					...pluginPrettier.configs.recommended.rules,
					...configPrettier.rules, // Prettier rules.
				},
			},

			// Rule override configurations.
			{
				files: ['**/*.' + extensions.asGlob(extensions.json.concat(extensions.jts))],
				rules: {
					'no-empty': ['warn', { allowEmptyCatch: true }],
					'no-unused-vars': [
						'warn',
						{
							vars: 'all',
							args: 'after-used',
							caughtErrors: 'none',
							ignoreRestSiblings: false,
							argsIgnorePattern: '^unusedꓺ',
							varsIgnorePattern: '^unusedꓺ',
							caughtErrorsIgnorePattern: '^unusedꓺ',
							destructuredArrayIgnorePattern: '^unusedꓺ',
						},
					],
				},
			},

			// TS rule override configurations.
			{
				files: ['**/*.' + extensions.asGlob(extensions.ts)],
				rules: {
					'no-redeclare': 'off', // Disable in favor of TypeScript rule below.
					'no-unused-vars': 'off', // Disable in favor of TypeScript rule below.
					'no-undef': 'off', // Already baked into TypeScript; {@see https://o5p.me/k9TDGC}.

					'@typescript-eslint/no-redeclare': ['warn'],
					'@typescript-eslint/require-await': ['off'],
					'@typescript-eslint/no-empty-interface': ['off'],
					'@typescript-eslint/no-inferrable-types': ['off'],
					'@typescript-eslint/ban-ts-comment': [
						'warn',
						{
							'ts-check': 'allow-with-description',
							'ts-nocheck': 'allow-with-description',
							'ts-expect-error': 'allow-with-description',
							'ts-ignore': 'allow-with-description',
						},
					],
					'@typescript-eslint/triple-slash-reference': [
						'warn',
						{
							'path': 'never',
							'types': 'always',
							'lib': 'always',
						},
					],
					'@typescript-eslint/no-unused-vars': [
						'warn',
						{
							vars: 'all',
							args: 'after-used',
							caughtErrors: 'none',
							ignoreRestSiblings: false,
							argsIgnorePattern: '^unusedꓺ',
							varsIgnorePattern: '^unusedꓺ',
							caughtErrorsIgnorePattern: '^unusedꓺ',
							destructuredArrayIgnorePattern: '^unusedꓺ',
						},
					],
				},
			},
		],
	};
};
