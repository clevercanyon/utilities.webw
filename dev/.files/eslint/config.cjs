/**
 * ESLint config file.
 *
 * ESLint is not aware of this config file's location.
 *
 * This config file can be tested using:
 *
 *     $ npx eslint --print-config [file-to-lint]
 *
 * @note PLEASE DO NOT EDIT THIS FILE!
 * @note This entire file will be updated automatically.
 * @note Instead of editing here, please review <https://github.com/clevercanyon/skeleton>.
 *
 * @see https://eslint.org/docs/latest/user-guide/configuring
 * @see https://typescript-eslint.io/docs/linting/typed-linting/monorepos
 * @see https://eslint.org/docs/latest/user-guide/command-line-interface
 */
/* eslint-env es2021, node */

const fs = require('node:fs');
const path = require('node:path');

const projDir = path.resolve(__dirname, '../../..');
const pkgFile = path.resolve(projDir, './package.json');

if (!fs.existsSync(pkgFile)) {
	throw new Error('eslint/config.cjs: Missing `./package.json`.');
}
const pkg = JSON.parse(fs.readFileSync(pkgFile).toString());

const allJSExtns = ['.js', '.jsx', '.cjs', '.cjsx', '.json', '.node', '.mjs', '.mjsx'];
const allTSExtns = ['.ts', '.tsx', '.cts', '.ctsx', '.mts', '.mtsx'];

/**
 * Base config.
 */
const baseConfig = {
	root: true,
	env: { es2021: true },

	plugins: [
		'import', //
		'jsx-a11y',
		'prettier',
	],
	extends: [
		'eslint:recommended', //
		'plugin:import/recommended',
		'plugin:jsx-a11y/recommended',
		'plugin:prettier/recommended',
	],
	ignorePatterns: [
		'!**/.*', //
		'**/.git/**',
		'**/dist/**',
		'**/.yarn/**',
		'**/vendor/**',
		'**/node_modules/**',
		'**/jspm_packages/**',
		'**/bower_components/**',
	],
	settings: {
		// <https://o5p.me/Pz4Su8>.
		'import/extensions': [...allJSExtns],
		'import/resolver': {
			node: { extensions: [...allJSExtns] },
			// See: <https://o5p.me/y2hSj8>.
			exports: { conditions: [] },
		},
	}, // None at this time.

	parser: 'espree', // Default parser.
	// <https://o5p.me/RARPvV>, <https://o5p.me/U4DpMN>.

	parserOptions: {
		ecmaVersion: 2021,
		ecmaFeatures: {
			jsx: true,
			impliedStrict: true,
		},
		sourceType: pkg.type || 'script',
	},
	rules: {
		'import/no-named-as-default-member': ['off'],
		'import/no-duplicates': ['off'], // Redundant & not smart.
		'import/extensions': ['warn', 'always', { ignorePackages: true }],
		'no-empty': ['warn', { allowEmptyCatch: true }],
		'no-unused-vars': [
			'warn',
			{
				vars: 'all',
				args: 'after-used',
				caughtErrors: 'none',
				ignoreRestSiblings: false,
				argsIgnorePattern: '^unusedꓺ',
				varsIgnorePattern: '^unusedꓺ',
				caughtErrorsIgnorePattern: '^unusedꓺ',
				destructuredArrayIgnorePattern: '^unusedꓺ',
			},
		],
	},
};

/**
 * Typescript partials.
 */
const tsPlugins = [...baseConfig.plugins];
const tsExtends = [...baseConfig.extends];

tsPlugins.splice(-1, 0, '@typescript-eslint');
tsExtends.splice(-1, 0, // Prettier must come last.
	...[
		'plugin:import/typescript',
		'plugin:@typescript-eslint/recommended',
		'plugin:@typescript-eslint/recommended-requiring-type-checking',
	],
); // prettier-ignore

/**
 * Typescript overrides.
 */
const tsOverrides = {
	plugins: [...tsPlugins],
	extends: [...tsExtends],

	settings: {
		...baseConfig.settings,
		'import/extensions': [...allJSExtns, ...allTSExtns],
		'import/parsers': { '@typescript-eslint/parser': [...allTSExtns] },
		'import/resolver': {
			typescript: {
				alwaysTryTypes: true,
				project: ['**/tsconfig.json'],
			},
			node: { extensions: [...allJSExtns, ...allTSExtns] },
		},
	},
	parser: '@typescript-eslint/parser',

	parserOptions: {
		...baseConfig.parserOptions,
		project: ['**/tsconfig.json'],
		requireConfigFile: true,
	},
	rules: {
		...baseConfig.rules,
		'import/namespace': ['off'],
		'@typescript-eslint/require-await': ['off'],
		'@typescript-eslint/no-empty-interface': ['off'],
		'@typescript-eslint/no-inferrable-types': ['off'],
		'@typescript-eslint/ban-ts-comment': [
			'warn',
			{
				'ts-check': 'allow-with-description',
				'ts-nocheck': 'allow-with-description',
				'ts-expect-error': 'allow-with-description',
				'ts-ignore': 'allow-with-description',
			},
		],
		'@typescript-eslint/triple-slash-reference': [
			'warn',
			{
				'path': 'never',
				'types': 'always',
				'lib': 'always',
			},
		],
		'no-unused-vars': 'off', // Disable in favor of TypeScript flavor.
		'@typescript-eslint/no-unused-vars': [...baseConfig.rules['no-unused-vars']],

		'import/extensions': [
			'warn',
			'always', // Require all imports to include a file extension.
			{
				ignorePackages: true, // ↓ Never use TS extensions in imports.
				pattern: { ...Object.fromEntries(Array.from(allTSExtns, (e) => [e.slice(1), 'never'])) },
			},
		],
	},
};

/**
 * Composition.
 */
module.exports = {
	...baseConfig,
	overrides: [
		{
			files: ['**/*.{cjs,node}'],

			parserOptions: {
				...baseConfig.parserOptions,
				sourceType: 'commonjs',
			},
		},
		{
			files: ['**/*.mjs'],

			parserOptions: {
				...baseConfig.parserOptions,
				sourceType: 'module',
			},
		},
		{
			files: ['**/*.{ts,tsx}'],

			...tsOverrides,
			parserOptions: {
				...tsOverrides.parserOptions,
				sourceType: pkg.type || 'script',
			},
		},
		{
			files: ['**/*.{cts,ctsx}'],

			...tsOverrides,
			parserOptions: {
				...tsOverrides.parserOptions,
				sourceType: 'commonjs',
			},
		},
		{
			files: ['**/*.{mts,mtsx}'],

			...tsOverrides,
			parserOptions: {
				...tsOverrides.parserOptions,
				sourceType: 'module',
			},
		},
	],
};
