/**
 * ESLint config file.
 *
 * ESLint is not aware of this config file's location.
 *
 * This config file can be tested using:
 *
 *     $ npx eslint --print-config [file-to-lint]
 *
 * @note PLEASE DO NOT EDIT THIS FILE!
 * @note This entire file will be updated automatically.
 * @note Instead of editing here, please review <https://github.com/clevercanyon/skeleton>.
 *
 * @see https://eslint.org/docs/latest/user-guide/configuring
 * @see https://typescript-eslint.io/docs/linting/typed-linting/monorepos
 * @see https://eslint.org/docs/latest/user-guide/command-line-interface
 */
/* eslint-env es2021, node */

const fs = require('node:fs');
const path = require('node:path');

const projDir = path.resolve(__dirname, '../../..');
const pkgFile = path.resolve(projDir, './package.json');
const pkg = JSON.parse(fs.readFileSync(pkgFile).toString());

/**
 * Base config.
 */
const baseConfig = {
	root: true,
	env: { es2021: true },

	plugins: [
		'import', //
		'react',
		'react-hooks',
		'jsx-a11y',
		'prettier', // Must come last.
	],
	extends: [
		'eslint:recommended', //
		'plugin:import/recommended',
		'plugin:react/recommended',
		'plugin:react-hooks/recommended',
		'plugin:jsx-a11y/recommended',
		'plugin:prettier/recommended', // Must come last.
	],
	ignorePatterns: [
		'!**/.*', // Applied globally.
		'**/dist/**',
		'**/.yarn/**',
		'**/vendor/**',
		'**/node_modules/**',
		'**/jspm_packages/**',
		'**/bower_components/**',
	],
	settings: {}, // None at this time.

	parser: 'espree', // Default parser.
	// <https://o5p.me/RARPvV>, <https://o5p.me/U4DpMN>.

	parserOptions: {
		ecmaVersion: 2021,
		ecmaFeatures: {
			jsx: true,
			impliedStrict: true,
		},
		sourceType: pkg.type || 'script',
	},
	rules: {
		'import/no-named-as-default-member': ['off'],
		'no-empty': ['warn', { allowEmptyCatch: true }],
	},
};

/**
 * Typescript partials.
 */
const tsPlugins = [...baseConfig.plugins];
const tsExtends = [...baseConfig.extends];

tsPlugins.splice(-1, 0, '@typescript-eslint');
tsExtends.splice(-1, 0, // Prettier must come last.
	...[
		'plugin:import/typescript',
		'plugin:@typescript-eslint/recommended',
		'plugin:@typescript-eslint/recommended-requiring-type-checking',
	],
); // prettier-ignore

/**
 * Typescript overrides.
 */
const tsOverrides = {
	plugins: tsPlugins,
	extends: tsExtends,

	settings: {
		...baseConfig.settings,
		'import/parsers': {
			'@typescript-eslint/parser': ['.ts', '.tsx', '.cts', '.ctsx', '.mts', '.mtsx'],
		},
		'import/resolver': {
			typescript: {
				alwaysTryTypes: true,
				project: ['**/tsconfig.json'],
			},
		},
	},
	parser: '@typescript-eslint/parser',

	parserOptions: {
		...baseConfig.parserOptions,
		project: ['**/tsconfig.json'],
		requireConfigFile: true,
	},
	rules: {
		...baseConfig.rules,
		'@typescript-eslint/require-await': ['off'],
		'@typescript-eslint/no-empty-interface': ['off'],
		'@typescript-eslint/no-inferrable-types': ['off'],
		'@typescript-eslint/ban-ts-comment': [
			'warn',
			{
				'ts-check': 'allow-with-description',
				'ts-nocheck': 'allow-with-description',
				'ts-expect-error': 'allow-with-description',
				'ts-ignore': 'allow-with-description',
			},
		],
		'@typescript-eslint/triple-slash-reference': [
			'warn',
			{
				'path': 'never',
				'types': 'always',
				'lib': 'always',
			},
		],
	},
};

/**
 * Composition.
 */
module.exports = {
	...baseConfig,
	overrides: [
		{
			files: ['**/*.cjs'],

			parserOptions: {
				...baseConfig.parserOptions,
				sourceType: 'commonjs',
			},
		},
		{
			files: ['**/*.mjs'],

			parserOptions: {
				...baseConfig.parserOptions,
				sourceType: 'module',
			},
		},
		{
			files: ['**/*.{ts,tsx}'],

			...tsOverrides,
			parserOptions: {
				...tsOverrides.parserOptions,
				sourceType: pkg.type || 'script',
			},
		},
		{
			files: ['**/*.{cts,ctsx}'],

			...tsOverrides,
			parserOptions: {
				...tsOverrides.parserOptions,
				sourceType: 'commonjs',
			},
		},
		{
			files: ['**/*.{mts,mtsx}'],

			...tsOverrides,
			parserOptions: {
				...tsOverrides.parserOptions,
				sourceType: 'module',
			},
		},
	],
};
