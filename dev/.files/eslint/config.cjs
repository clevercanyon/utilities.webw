/**
 * ESLint config file.
 *
 * ESLint is not aware of this config file's location.
 *
 * This config file can be tested using:
 *
 *     $ npx eslint --print-config [file-to-lint]
 *
 * @note PLEASE DO NOT EDIT THIS FILE!
 * @note This entire file will be updated automatically.
 * @note Instead of editing here, please review <https://github.com/clevercanyon/skeleton>.
 *
 * @see https://eslint.org/docs/latest/user-guide/configuring
 * @see https://typescript-eslint.io/docs/linting/typed-linting/monorepos
 * @see https://eslint.org/docs/latest/user-guide/command-line-interface
 */
/* eslint-env es2021, node */

let commonPlugins = [];
let commonExtends = [];
let commonIgnorePatterns = [];
let commonParserOptions = {};
let commonSettings = {};
let commonRules = {};

const fs = require('node:fs');
const path = require('node:path');

const projDir = path.resolve(__dirname, '../../..');
const pkgFile = path.resolve(projDir, './package.json');
const pkg = JSON.parse(fs.readFileSync(pkgFile).toString());

module.exports = {
	root: true,
	env: { es2021: true },

	plugins: (commonPlugins = [
		'import', //
		'react',
		'react-hooks',
		'jsx-a11y',
	]).concat(['prettier']),

	extends: (commonExtends = [
		'eslint:recommended', //
		'plugin:import/recommended',
		'plugin:react/recommended',
		'plugin:react-hooks/recommended',
		'plugin:jsx-a11y/recommended',
	]).concat(['plugin:prettier/recommended']),

	// Ignore patterns are applied globally.
	// eslint-disable-next-line no-unused-vars -- OK.
	ignorePatterns: (commonIgnorePatterns = [
		'!**/.*', //
		'**/dist/**',
		'**/.yarn/**',
		'**/vendor/**',
		'**/node_modules/**',
		'**/jspm_packages/**',
		'**/bower_components/**',
	]),
	parser: 'espree', // Default parser.

	parserOptions: (commonParserOptions = {
		ecmaVersion: 2021,
		ecmaFeatures: {
			jsx: true,
			impliedStrict: true,
		},
		sourceType: pkg.type || 'script',
	}),
	settings: (commonSettings = {}),

	rules: (commonRules = {
		'import/no-named-as-default-member': ['off'],
		'no-empty': ['warn', { allowEmptyCatch: true }],
	}),
	overrides: [
		{
			files: ['**/*.{tsx,ts}'],
			// ignorePatterns : commonIgnorePatterns,
			// â†‘ Ignore patterns are global and not allowed here.

			plugins: [
				...commonPlugins, //
				'@typescript-eslint',
			].concat(['prettier']),

			extends: [
				...commonExtends, //
				'plugin:import/typescript',
				'plugin:@typescript-eslint/recommended',
				'plugin:@typescript-eslint/recommended-requiring-type-checking',
			].concat(['plugin:prettier/recommended']),

			parser: '@typescript-eslint/parser',

			parserOptions: {
				...commonParserOptions,
				requireConfigFile: true,
				project: ['**/tsconfig.json'],
			},
			settings: {
				...commonSettings,
				'import/parsers': {
					'@typescript-eslint/parser': ['.tsx', '.ts'],
				},
				'import/resolver': {
					typescript: {
						alwaysTryTypes: true,
						project: ['**/tsconfig.json'],
					},
				},
			},
			rules: {
				...commonRules,
				'@typescript-eslint/require-await': ['off'],
				'@typescript-eslint/no-empty-interface': ['off'],
				'@typescript-eslint/no-inferrable-types': ['off'],
				'@typescript-eslint/ban-ts-comment': [
					'warn',
					{
						'ts-check': 'allow-with-description',
						'ts-nocheck': 'allow-with-description',
						'ts-expect-error': 'allow-with-description',
						'ts-ignore': 'allow-with-description',
					},
				],
				'@typescript-eslint/triple-slash-reference': [
					'warn',
					{
						'path': 'never',
						'types': 'always',
						'lib': 'always',
					},
				],
			},
		},
	],
};
