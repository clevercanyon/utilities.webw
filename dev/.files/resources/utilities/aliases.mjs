/**
 * Aliases.
 *
 * @note PLEASE DO NOT EDIT THIS FILE!
 * @note This entire file will be updated automatically.
 * @note Instead of editing here, please review <https://github.com/clevercanyon/skeleton>.
 */

import path from 'node:path';
import { $is, $str } from '../../../../node_modules/@clevercanyon/utilities/dist/index.js';
import u from '../utilities.mjs';

/**
 * Produces userland aliases.
 *
 * Userland aliases; i.e., node subpath imports, begin with `#` and are defined in `./package.json`, such that we can
 * easily customize on a per-project basis and attain native support for aliases in; e.g., dev-only scripts.
 *
 * Regarding precedence of userland aliases. Node’s algorithm gives longer pattern matching keys higher precedence.
 * However, key length is actually determined by where the `*` appears in each pattern. Please consult Node’s resolution
 * algorithm. What is very important is that while pattern declaration order doesn’t actually matter to Node; i.e.,
 * given what was just stated about the way Node determines precedence — it **does** matter to our build tools.
 *
 * - IMPORTANT: Always declare subpath imports in the descending order of their precedence in Node. This way Vite, Rollup,
 *   esBuild, and possibly other build tools or plugins can iterate these patterns using a first-to-match strategy.
 */
const userland = async () => {
    const userlandAliasesAsGlobs = {};
    const userlandAliasesAsRegExpStrings = {};
    const userlandAliasesAsFindReplaceRegExps = [];

    for (const [glob, relPath] of Object.entries(u.pkgImports)) {
        // We do not allow nesting and/or any subpath conditionals.
        if (!$is.string(relPath)) throw new Error('Invalid subpath imports.');

        // For some reason, Vite chooses not to resolve `url()` values in CSS whenever they begin with a `#`.
        // Unfortunate, because our userland aliases use `#`. To fix, we prepend `url()` values starting with `#`, with `&#`.
        // See: `./dev/.files/configs/postcss/config.mjs` for details regarding the way we prepend CSS `url()`s with `&#`.

        // For that reason, any glob pattern found here that begins with `#` will be updated to accept an optional leading `&`.
        // This only impacts Vite/PostCSS, and therefore we only need to alter the regular expression variants of our aliases.

        let regExpRepCounter = 0; // e.g., `$1`, `$2`, `$3`, etc.
        const regExpString = '^' + (glob.startsWith('#') ? '&?' : '') + $str.escRegExp(glob).replace(/\\\*/gu, '(.+?)') + '$';

        userlandAliasesAsGlobs[glob] = path.resolve(u.projDir, relPath);
        userlandAliasesAsRegExpStrings[regExpString] = path.resolve(u.projDir, relPath).replace(/\*/gu, () => '$' + String(++regExpRepCounter));
        userlandAliasesAsFindReplaceRegExps.push({ find: new RegExp(regExpString, 'u'), replacement: userlandAliasesAsRegExpStrings[regExpString] });
    }
    return { userlandAliasesAsGlobs, userlandAliasesAsRegExpStrings, userlandAliasesAsFindReplaceRegExps };
};

/**
 * Produces aliases as globs.
 *
 * @returns Promise of aliases as globs.
 */
const asGlobs = async () => {
    const { userlandAliasesAsGlobs } = await userland();
    return {
        ...userlandAliasesAsGlobs, // In descending order of their precedence in Node.

        'react': path.resolve(u.nmDir, './preact/compat'),
        'react/jsx-runtime': path.resolve(u.nmDir, './preact/jsx-runtime'),

        'react-dom': path.resolve(u.nmDir, './preact/compat'),
        'react-dom/test-utils': path.resolve(u.nmDir, './preact/test-utils'),
    };
};

/**
 * Produces aliases as regular expression strings.
 *
 * @returns Promise of aliases as regular expression strings.
 */
const asRegExpStrings = async () => {
    const { userlandAliasesAsRegExpStrings } = await userland();
    return {
        ...userlandAliasesAsRegExpStrings, // In descending order of their precedence in Node.

        '^react$': path.resolve(u.nmDir, './preact/compat'),
        '^react/jsx-runtime$': path.resolve(u.nmDir, './preact/jsx-runtime'),

        '^react-dom$': path.resolve(u.nmDir, './preact/compat'),
        '^react-dom/test-utils$': path.resolve(u.nmDir, './preact/test-utils'),
    };
};

/**
 * Produces aliases as find/replace regular expressions.
 *
 * @returns Promise of aliases as find/replace regular expressions.
 */
const asFindReplaceRegExps = async () => {
    const { userlandAliasesAsFindReplaceRegExps } = await userland();
    return [
        ...userlandAliasesAsFindReplaceRegExps, // In descending order of their precedence in Node.

        { find: /^react$/u, replacement: path.resolve(u.nmDir, './preact/compat') },
        { find: /^react\/jsx-runtime$/u, replacement: path.resolve(u.nmDir, './preact/jsx-runtime') },

        { find: /^react-dom$/u, replacement: path.resolve(u.nmDir, './preact/compat') },
        { find: /^react-dom\/test-utils$/u, replacement: path.resolve(u.nmDir, './preact/test-utils') },
    ];
};

/**
 * Exports aliases.
 */
export default { asGlobs, asRegExpStrings, asFindReplaceRegExps };
