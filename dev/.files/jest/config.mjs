#!/usr/bin/env node
/**
 * Jest config.
 *
 * Jest is not aware of this config file's location.
 *
 * @note PLEASE DO NOT EDIT THIS FILE!
 * @note This entire file will be updated automatically.
 * @note Instead of editing here, please review <https://github.com/clevercanyon/skeleton>.
 *
 * @see https://jestjs.io/docs/configuration
 */

import fs from 'node:fs';
import path from 'node:path';
import { $fs } from '../../../node_modules/@clevercanyon/utilities.node/dist/index.js';
import { $json } from '../../../node_modules/@clevercanyon/utilities/dist/index.js';
import exclusions from '../bin/includes/exclusions.mjs';
import extensions from '../bin/includes/extensions.mjs';
import importAliases from '../bin/includes/import-aliases.mjs';

const __dirname = $fs.imuDirname(import.meta.url);
const projDir = path.resolve(__dirname, '../../..');

const srcDir = path.resolve(projDir, './src');
const srcDirExists = fs.existsSync(srcDir);

const testsDir = path.resolve(projDir, './tests');
const testsDirExists = fs.existsSync(testsDir);

const pkgFile = path.resolve(projDir, './package.json');

if (!fs.existsSync(pkgFile)) {
	throw new Error('jest/config.mjs: Missing `./package.json`.');
}
const pkg = $json.parse(fs.readFileSync(pkgFile).toString());

/**
 * Defines Jest configuration.
 */
export default async () => {
	/**
	 * Composition.
	 */
	return {
		roots: [
			...(srcDirExists ? [srcDir] : []), //
			...(testsDirExists ? [testsDir] : []),
			...(!srcDirExists && !testsDirExists ? [projDir] : []),
		],
		testPathIgnorePatterns: exclusions.asRegExpStrings([
			...exclusions.vcsFilesDirs,
			...exclusions.packageDirs,
			...exclusions.dotFilesDirs,
			...exclusions.distDirs,
			...exclusions.devDirs,
			...exclusions.sandboxDirs,
			...exclusions.docDirs,
			...exclusions.exampleDirs,
			...exclusions.benchmarkDirs,
			...exclusions.xDirs,
		]),
		// Configured to run JS tests only; not TypeScript tests.
		// To create and run TypeScript tests, use Vitest instead of Jest.
		testMatch: [
			'**/*.{test|tests|spec|specs}.' + extensions.asGlob(extensions.js), //
			'**/{__test__,__tests__,__spec__,__specs__}/**/*.' + extensions.asGlob(extensions.js),
		],
		moduleNameMapper: importAliases.asRegExpStrings,
		moduleFileExtensions: extensions.noDot(extensions.json.concat(extensions.js)),
		extensionsToTreatAsEsm: [...('module' === pkg.type ? extensions.sjs.concat(extensions.mjs) : extensions.mjs)],
	};
};
