/**
 * Tailwind themes config file.
 *
 * Tailwind is not aware of this config file's location. This configuration file serves as a base for theme
 * configurations passed into the `tailwindcss-themer` plugin, which implements themes for Tailwind CSS.
 *
 * @note PLEASE DO NOT EDIT THIS FILE!
 * @note This entire file will be updated automatically.
 * @note Instead of editing here, please review <https://github.com/clevercanyon/skeleton>.
 */
/*
-----------------------------------------------------------------------------------------------------------------------
Example `index.scss` starter file contents:
-----------------------------------------------------------------------------------------------------------------------
@use '../dev/.files/tailwind/layers';
-------------------------------------------------------------------------------------------------------------------- */

import { $color, $is, $obj } from '../../../node_modules/@clevercanyon/utilities/dist/index.js';
import getBrand from './brand.mjs'; // Uses `make-synchronous` to acquire brand in a Tailwind/Jiti context.

/**
 * Merges Tailwind themes configuration.
 *
 * Jiti, which is used by Tailwind to load ESM config files, doesnâ€™t support top-level await. Thus, we cannot use async
 * functionality here. Consider using a CLI request to acquire resources, if necessary. {@see https://o5p.me/1odhxy}.
 */
export default /* not async compatible */ ({ themesConfig } = {}) => {
    /**
     * Acquires themes.
     */
    let themes; // Initialize.

    if ($is.function(themesConfig)) {
        themes = themesConfig();
    }
    themes = Object(themes || {}); // Ensures object type.
    themes.defaultTheme = Object(themes.defaultTheme || {});

    themes.themes = $is.array(themes.themes) ? themes.themes : [];
    themes.themes.map((theme) => Object(theme || {}));

    /**
     * Acquires appâ€™s brand theme.
     */
    const brandTheme = getBrand()?.theme || {};

    /**
     * Sets color defaults, for each theme, using basic colors.
     */
    [themes.defaultTheme, ...themes.themes].forEach((theme) => {
        /**
         * Ensures objects.
         */
        theme.extend = Object(theme.extend || {});
        theme.extend.colors = Object(theme.extend.colors || {});

        /**
         * Defines basic colors.
         *
         * - Basic palette: {@see https://coolors.co/09090b-f0f0f0-80aff9-17171c-5596ff}.
         *
         * From these basic colors we derive additional colors for commonly-used sections automatically, such as those
         * prefixed as `color-prose-*`, `color-header-*`, `color-sidebar-*`, `color-footer-*`. If you'd like to override
         * any basic color derivations, explicitly define the colors you wish to override.
         *
         * ðŸ’¡ Tip: Fast track. Just change `color-basic-link` to match your brand colors. The other colors use common
         * defaults that typically work well for most brands. Tune the rest in later. It is generally a good practice to
         * simply reuse the colors defined by your brand theme; see: `./brand.config.mjs`.
         *
         * ðŸ’¡ Tip: If you change `color-basic`, please remember to adjust `themeIsDark` in `<LayoutContext>`
         * accordingly; i.e., if your theme is dark, then `themeIsDark` should be set to `true`, such that consumers of
         * `<LayoutContext>` are aware. Simply map themes by name in your `<LayoutContext>` implementation.
         */
        const defaultBasicColors = {
            'color-basic': brandTheme.color || '#09090b', // Background color.
            'color-basic-fg': brandTheme.fgColor || '#f0f0f0', // Foreground color.
            'color-basic-link': brandTheme.linkColor || '#80aff9', // Link/anchor color.
            'color-basic-line': brandTheme.lineColor || '#17171c', // Line/border color.
            'color-basic-heading': brandTheme.headingColor || '#5596ff', // Heading color.
        };
        const basicColors = $obj.defaults({}, $obj.pick(theme.extend.colors, Object.keys(defaultBasicColors)), defaultBasicColors);
        const basicBGIsDark = basicColors['color-basic'] === brandTheme.color ? brandTheme.isDark : $color.isDark(basicColors['color-basic']);

        /**
         * Defines basic prose colors.
         *
         * These color derivations are based on the configured basic colors. The goal is to make prose customizable,
         * either during or after an initial implementation. To make this work, we point Tailwindâ€™s built-in prose color
         * variables at these prose-specific color classes; {@see baseConfigThemes()}.
         */
        const defaultBasicProseColors = {
            'color-prose-body': basicColors['color-basic-fg'],
            'color-prose-links': basicColors['color-basic-link'],

            'color-prose-headings': basicColors['color-basic-heading'],
            'color-prose-lead': $color[basicBGIsDark ? 'lighten' : 'darken'](basicColors['color-basic-fg'], 0.15),
            'color-prose-bold': $color[basicBGIsDark ? 'lighten' : 'darken'](basicColors['color-basic-fg'], 0.15),

            'color-prose-counters': $color[basicBGIsDark ? 'darken' : 'lighten'](basicColors['color-basic-fg'], 0.25),
            'color-prose-bullets': $color[basicBGIsDark ? 'darken' : 'lighten'](basicColors['color-basic-fg'], 0.25),

            'color-prose-quotes': $color[basicBGIsDark ? 'darken' : 'lighten'](basicColors['color-basic-fg'], 0.25),
            'color-prose-quote-borders': $color[basicBGIsDark ? 'darken' : 'lighten'](basicColors['color-basic-fg'], 0.825),

            // We donâ€™t actually use `color-prose-kbd`; only shadows. See notes in `./config.mjs` file.
            'color-prose-kbd': $color[basicBGIsDark ? 'lighten' : 'darken'](basicColors['color-basic-fg'], 0.15),
            // This is incorporated into an `rgb(x x x / x)` final color.
            'color-prose-kbd-shadows': $color.toRGBListNoAlpha(basicColors['color-basic-fg']),

            // We donâ€™t actually use `color-prose-code`; only shadows. See notes in `./config.mjs` file.
            'color-prose-code': $color[basicBGIsDark ? 'lighten' : 'darken'](basicColors['color-basic-fg'], 0.15),
            // This is incorporated into an `rgb(x x x / x)` final color.
            'color-prose-code-shadows': $color.toRGBListNoAlpha(basicColors['color-basic-fg']),

            'color-prose-pre': $color[basicBGIsDark ? 'darken' : 'lighten'](basicColors['color-basic'], 0.005),
            // We donâ€™t actually use `color-prose-pre-code`. See notes in `./config.mjs` file.
            'color-prose-pre-code': $color[basicBGIsDark ? 'darken' : 'lighten'](basicColors['color-basic-fg'], 0.005),
            'color-prose-pre-borders': $color[basicBGIsDark ? 'darken' : 'lighten'](basicColors['color-basic-fg'], 0.825),
            'color-prose-pre-shadows': basicBGIsDark ? $color.darken(basicColors['color-basic'], 0.25) : $color.darken(basicColors['color-basic'], 0.025),

            'color-prose-th-borders': $color[basicBGIsDark ? 'darken' : 'lighten'](basicColors['color-basic-fg'], 0.825),
            'color-prose-td-borders': $color[basicBGIsDark ? 'darken' : 'lighten'](basicColors['color-basic-fg'], 0.825),

            'color-prose-hr': $color[basicBGIsDark ? 'darken' : 'lighten'](basicColors['color-basic-fg'], 0.825),
            'color-prose-captions': $color[basicBGIsDark ? 'darken' : 'lighten'](basicColors['color-basic-fg'], 0.25),
        };

        /**
         * Defines basic section colors.
         *
         * These color derivations are based on the configured basic colors. The goal is to make these sections
         * customizable, either during or after an initial implementation. Therefore, section-specific color classes
         * should always be used when building these out. If additional basic colors are needed, please add new colors
         * to accomodate vs. using any other basic color classes that are not section-specific.
         *
         * Also, we do not recommend using prose in these sections. The best practice is to apply color classes instead
         * of relying on prose in any of these sections. Why? Prose is configured using basic colors that are not
         * section-specific. Therefore, using prose would be the same as using other basic color classes.
         *
         * Itâ€™s perfectly ok to use brand colors in these sections. Just donâ€™t use 'basic' color classes that are not
         * section-specific. We want the ability to change the basic appearance of these sections later.
         */
        const defaultBasicSectionColors = {
            'color-header': $color[basicBGIsDark ? 'darken' : 'lighten'](basicColors['color-basic'], 0.015),
            'color-header-fg': $color[basicBGIsDark ? 'darken' : 'lighten'](basicColors['color-basic-fg'], 0.015),
            'color-header-link': $color[basicBGIsDark ? 'darken' : 'lighten'](basicColors['color-basic-link'], 0.015),
            'color-header-line': $color[basicBGIsDark ? 'lighten' : 'darken'](basicColors['color-basic'], 0.075),
            'color-header-heading': $color[basicBGIsDark ? 'darken' : 'lighten'](basicColors['color-basic-heading'], 0.015),

            'color-sidebar': $color[basicBGIsDark ? 'darken' : 'lighten'](basicColors['color-basic'], 0.015),
            'color-sidebar-fg': $color[basicBGIsDark ? 'darken' : 'lighten'](basicColors['color-basic-fg'], 0.015),
            'color-sidebar-link': $color[basicBGIsDark ? 'darken' : 'lighten'](basicColors['color-basic-link'], 0.015),
            'color-sidebar-line': $color[basicBGIsDark ? 'lighten' : 'darken'](basicColors['color-basic'], 0.075),
            'color-sidebar-heading': $color[basicBGIsDark ? 'darken' : 'lighten'](basicColors['color-basic-heading'], 0.015),

            'color-footer': $color[basicBGIsDark ? 'darken' : 'lighten'](basicColors['color-basic'], 0.015),
            'color-footer-fg': $color[basicBGIsDark ? 'darken' : 'lighten'](basicColors['color-basic-fg'], 0.015),
            'color-footer-link': $color[basicBGIsDark ? 'darken' : 'lighten'](basicColors['color-basic-link'], 0.015),
            'color-footer-line': $color[basicBGIsDark ? 'lighten' : 'darken'](basicColors['color-basic'], 0.075),
            'color-footer-heading': $color[basicBGIsDark ? 'darken' : 'lighten'](basicColors['color-basic-heading'], 0.015),
        };

        /**
         * Defines brand colors.
         *
         * - Abstract palette: {@see https://coolors.co/595959-2e489e-3e4660-615c49-745a2f-ffab3d-ffc170-ffe0b8}.
         * - Semantic palette: {@see https://coolors.co/1c5f35-8a2828-865027-2e489e-e4e4e7-3f3f46-18181b-fef9c3}.
         *
         * These colors should all consider the `color-basic` background color, because all of these colors should work
         * well for objects that lay on top of the background color. In some cases, you may need to stray from exact
         * colors used in a brandâ€™s logo, as these are not for the brandâ€™s logo, they are for the site. That said,
         * `color-true` is an exception. It should always be a true exact-match to a brandâ€™s primary logo color.
         *
         * From these brand colors we automatically work out an appropriate readable foreground text color; i.e., black
         * or white, based on the colorâ€™s RGB weights and/or luminance. Or, if you prefer, you can choose to define any
         * of the `*-fg` suffixed variants explicitly, effectively overriding autogenerated defaults.
         *
         * The easiest way to define brand colors is to test them being used to create a prominent component, such as a
         * button; e.g., `<Button color="primary|secondary|accent|feature|dazzle|success|info|...">`.
         *
         * ðŸ’¡ Tip: Fast track. Just change `color-true` & `color-primary` to match your brand colors. The other colors
         * use common defaults that typically work well for most brands. Tune the rest in later.
         */
        const defaultBrandColors = {
            // Abstract colors.
            'color-true': '#595959', // True exact-match to a brandâ€™s primary logo color.
            'color-primary': '#2e489e', // Primary component color. Typically a shade of `color-true`.
            'color-secondary': '#3e4660', // Secondary component color. Typically less saturated than primary.
            'color-tertiary': '#615c49', // Tertiary component color. Typically less saturated than primary.
            'color-accent': '#745a2f', // An accented component color. Typically accentuated conservatively.
            'color-feature': '#ffab3d', // An accented component color. Typically more accentuated; i.e., less subtle.
            'color-dazzle': '#ffc170', // An accented component color. Typically much more accentuated; i.e., not subtle.
            'color-amaze': '#ffe0b8', // An accented component color. Typically much more accentuated; i.e., not subtle.

            // Semantic colors.
            'color-success': '#1c5f35', // Typically a shade of green for various components.
            'color-danger': '#8a2828', // Typically a shade of red for various components.
            'color-warning': '#865027', // Typically a shade of orange for various components.
            'color-info': '#2e489e', // Typically a shade of blue for various components.
            'color-light': '#e4e4e7', // Typically a light shade of gray for various components.
            'color-neutral': '#3f3f46', // Typically between light & dark for various components.
            'color-dark': '#18181b', // Typically a dark shade of gray for various components.
            'color-hilite': '#fef9c3', // Typically a shade of yellow for various components.
        };
        for (const [name, value] of Object.entries(defaultBrandColors)) {
            defaultBrandColors[name + '-fg'] = $color.getReadable(value);
            defaultBrandColors[name + '-line'] = $color[basicBGIsDark ? 'lighten' : 'darken'](value, 0.075);
        } // We go ahead and calculate brand colors so they can be used for starry night defaults below.
        const brandColors = $obj.defaults({}, $obj.pick(theme.extend.colors, Object.keys(defaultBrandColors)), defaultBrandColors);

        /**
         * Defines starry night colors.
         *
         * Starry night is a beautiful code syntax highlighter that compiles to JSX â€” compatible with Preact/MDX. These
         * color derivations are based on the configured basic colors, and also based on configured brand colors.
         *
         * ðŸ’¡ Tip: Fast track. These colors use defaults that typically work well for most brands. That said, if you
         * customize, consider starting with `color-starry-night-syntax-*` colors. Tune the rest in later.
         */
        const defaultStarryNightColors = {
            // Highlighted bg/fg colors.
            'color-starry-night': $color[basicBGIsDark ? 'darken' : 'lighten'](basicColors['color-basic'], 0.005),
            'color-starry-night-fg': $color[basicBGIsDark ? 'darken' : 'lighten'](basicColors['color-basic-fg'], 0.005),

            // Highlighted presentation colors.
            'color-starry-night-border': $color[basicBGIsDark ? 'darken' : 'lighten'](basicColors['color-basic-fg'], 0.825),
            'color-starry-night-box-shadows': basicBGIsDark ? $color.darken(basicColors['color-basic'], 0.25) : $color.darken(basicColors['color-basic'], 0.025),
            'color-starry-night-hilited-lines': basicBGIsDark ? $color.lighten(basicColors['color-basic'], 0.05) : $color.lighten(basicColors['color-basic'], 0.0375),

            // Highlighted header colors.
            'color-starry-night-header': $color[basicBGIsDark ? 'darken' : 'lighten'](basicColors['color-basic'], 0.25),
            'color-starry-night-header-fg': $color[basicBGIsDark ? 'darken' : 'lighten'](basicColors['color-basic-fg'], 0.005),

            // Highlighted header language colors.
            'color-starry-night-header-language': brandColors['color-accent'],
            'color-starry-night-header-language-fg': brandColors['color-accent-fg'],

            ...(basicBGIsDark // Dark syntax theme.
                ? {
                      // Script comments, gutter marks, punctuation.
                      'color-starry-night-syntax-comment-fg': '#696969',
                      'color-starry-night-syntax-gutter-mark-fg': '#3c3c3c',
                      'color-starry-night-syntax-punctuation-fg': '#6a6e76',

                      // Script keywords, variables, constants, strings, etc.
                      'color-starry-night-syntax-keyword-fg': '#6382a9',
                      'color-starry-night-syntax-variable-fg': '#be7175',
                      'color-starry-night-syntax-constant-fg': '#ca9d6b',
                      'color-starry-night-syntax-modifier-fg': '#be7175',
                      'color-starry-night-syntax-entity-fg': '#ca9d6b',
                      'color-starry-night-syntax-entity-tag-fg': '#e5c07b',
                      'color-starry-night-syntax-other-link-fg': '#80aff9',
                      'color-starry-night-syntax-string-fg': '#84a267',
                      'color-starry-night-syntax-regexp-fg': '#759d6d',
                  }
                : {
                      // Script comments, gutter marks, punctuation.
                      'color-starry-night-syntax-comment-fg': '#a8a8a8',
                      'color-starry-night-syntax-gutter-mark-fg': '#d5d5d5',
                      'color-starry-night-syntax-punctuation-fg': '#333333',

                      // Script keywords, variables, constants, strings, etc.
                      'color-starry-night-syntax-keyword-fg': '#006a7a',
                      'color-starry-night-syntax-variable-fg': '#b80f15',
                      'color-starry-night-syntax-constant-fg': '#845015',
                      'color-starry-night-syntax-modifier-fg': '#224f87',
                      'color-starry-night-syntax-entity-fg': '#7a4100',
                      'color-starry-night-syntax-entity-tag-fg': '#754c00',
                      'color-starry-night-syntax-other-link-fg': '#004ecc',
                      'color-starry-night-syntax-string-fg': '#508b18',
                      'color-starry-night-syntax-regexp-fg': '#357e25',
                  }),
        };

        /**
         * Composition.
         */
        theme.extend.colors = {
            ...defaultBasicColors,
            ...defaultBasicProseColors,
            ...defaultBasicSectionColors,

            ...defaultBrandColors,
            ...defaultStarryNightColors,

            ...themes.defaultTheme.extend.colors,
            ...theme.extend.colors,
        };
    });

    /**
     * Composition.
     */
    return $obj.mergeDeep({}, baseConfigThemes(), themes);
};

/**
 * Defines Tailwind themes configuration.
 *
 * Jiti, which is used by Tailwind to load ESM config files, doesnâ€™t support top-level await. Thus, we cannot use async
 * functionality here. Consider `make-synchronous` (already in dev-deps) if necessary. {@see https://o5p.me/1odhxy}.
 */
const baseConfigThemes = /* not async compatible */ () => {
    /**
     * Configures default theme.
     */
    const defaultTheme = {
        extend: {
            /**
             * Defines font families.
             */
            fontFamily: {
                sans: [
                    'sans-serif', //
                    'Apple Color Emoji',
                    'Segoe UI Emoji',
                    'Segoe UI Symbol',
                ],
                serif: ['serif'],
                mono: ['monospace'],
            },

            /**
             * Points prose at themed color variables.
             *
             * These colors are based on the configured basic colors. The goal is to make prose customizable, either
             * during or after an initial implementation. To make this work, we point Tailwindâ€™s built-in prose color
             * variables at each of our prose-specific color class variables. See default export in this file.
             */
            typography: {
                DEFAULT: {
                    css: {
                        '--tw-prose-body': 'rgb(var(--colors-color-prose-body))',
                        '--tw-prose-links': 'rgb(var(--colors-color-prose-links))',

                        '--tw-prose-headings': 'rgb(var(--colors-color-prose-headings))',
                        '--tw-prose-lead': 'rgb(var(--colors-color-prose-lead))',
                        '--tw-prose-bold': 'rgb(var(--colors-color-prose-bold))',

                        '--tw-prose-counters': 'rgb(var(--colors-color-prose-counters))',
                        '--tw-prose-bullets': 'rgb(var(--colors-color-prose-bullets))',

                        '--tw-prose-quotes': 'rgb(var(--colors-color-prose-quotes))',
                        '--tw-prose-quote-borders': 'rgb(var(--colors-color-prose-quote-borders))',

                        '--tw-prose-kbd': 'rgb(var(--colors-color-prose-kbd))',
                        '--tw-prose-kbd-shadows': 'var(--colors-color-prose-kbd-shadows)',

                        '--tw-prose-code': 'rgb(var(--colors-color-prose-code))',
                        '--tw-prose-code-shadows': 'var(--colors-color-prose-code-shadows)',

                        '--tw-prose-pre-bg': 'rgb(var(--colors-color-prose-pre))',
                        '--tw-prose-pre-code': 'rgb(var(--colors-color-prose-pre-code))',

                        '--tw-prose-th-borders': 'rgb(var(--colors-color-prose-th-borders))',
                        '--tw-prose-td-borders': 'rgb(var(--colors-color-prose-td-borders))',

                        '--tw-prose-hr': 'rgb(var(--colors-color-prose-hr))',
                        '--tw-prose-captions': 'rgb(var(--colors-color-prose-captions))',

                        // Not using inverted colors; i.e., we prefer themes.
                        // The use of `null` effectively deletes these unused keys.

                        '--tw-prose-invert-body': null,
                        '--tw-prose-invert-links': null,

                        '--tw-prose-invert-headings': null,
                        '--tw-prose-invert-lead': null,
                        '--tw-prose-invert-bold': null,

                        '--tw-prose-invert-counters': null,
                        '--tw-prose-invert-bullets': null,

                        '--tw-prose-invert-quotes': null,
                        '--tw-prose-invert-quote-borders': null,

                        '--tw-prose-invert-kbd': null,
                        '--tw-prose-invert-kbd-shadows': null,

                        '--tw-prose-invert-code': null,
                        '--tw-prose-invert-code-shadows': null,

                        '--tw-prose-invert-pre-bg': null,
                        '--tw-prose-invert-pre-code': null,

                        '--tw-prose-invert-th-borders': null,
                        '--tw-prose-invert-td-borders': null,

                        '--tw-prose-invert-hr': null,
                        '--tw-prose-invert-captions': null,
                    },
                },
            },
        },
    };

    /**
     * Configures other named themes.
     *
     * Named themes extend the default theme, so anything configured here only needs to override defaults. To enable a
     * named theme, add `<html class="{named-theme}">`, which is handled automatically by our `<LayoutContext>` and
     * `<HTML>` components. Each themeâ€™s name must end with a `-theme` suffix. If a named theme class is not present in
     * the HTML markup, then the default theme will be applied automatically.
     *
     * Donâ€™t add named themes unnecessarily. A default theme will typically do fine. The more themes you add, the larger
     * your bundle size becomes. Also, donâ€™t name a theme `dark`; {@see https://o5p.me/jLROv0}.
     *
     * Powered by {@see https://www.npmjs.com/package/tailwindcss-themer}.
     */
    const themes = []; // None required at this time.

    /**
     * Composition.
     */
    return { defaultTheme, themes };
};
