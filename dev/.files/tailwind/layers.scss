/**
 * Starry night styles.
 */
@import './imports/starry-night.scss' layer(components);

/**
 * Our base layer.
 *
 * We borrow the `_` = `not-prose` selector here and reuse it as `not-basic`.
 * It works fine, because all basic styles already exclude `p` = `prose` altogether.
 *
 * - In our Tailwind implementation, class `p` = `prose`.
 * - In our Tailwind implementation, a much shorter `_` = `not-p` = `not-prose`.
 * - In our basic styles implementation, `_` = `not-p` = `not-prose` = `not-basic`.
 * - In our Tailwind prose implementation, `~` = prose colors should be inherited from a parent containing
 *   the special `~` class; e.g., if a component applies colors that differ from prose colors, it needs to make
 *   sure any prose it contains will inherit the colors it has assigned, and not use the default prose colors.
 *   So `~` is an alternative to `_`, indicating prose is allowed, but it must use inherited coloration.
 */
@layer base {
    /**
     * Scrollbars.
     */
    ::-webkit-scrollbar {
        @apply w-2;
        @apply h-2;
    }

    ::-webkit-scrollbar-thumb {
        @apply rounded;
        @apply bg-color-basic-fg/25;

        &:hover {
            @apply bg-color-basic-fg/50;
        }
    }

    ::-webkit-scrollbar-track {
        @apply bg-color-basic-fg/5;
    }

    /**
     * Basic HTML styles.
     */
    html {
        @apply bg-color-basic text-color-basic-fg;

        font-size: 16px; // No auto-scaling at root node.
    }

    /**
     * Basic link styles and color.
     *
     * @note Using `:is` because we need some level of specificity here
     *       in order to override Tailwind’s `a { color: inherit; }` reset CSS.
     */
    :is(a, .link):not(:where(.p, .p *, ._, ._ *)) {
        @apply cursor-pointer text-color-basic-link no-underline opacity-90 hover:underline hover:opacity-100;
    }

    /**
     * Basic heading color.
     */
    :where(h1, h2, h3, h4, h5, h6):not(:where(.p, .p *, ._, ._ *)) {
        @apply text-color-basic-heading;
    }

    /**
     * Form element placeholders.
     */
    input::placeholder,
    textarea::placeholder,
    select:has(> :checked[data-placeholder]) {
        @apply italic;

        color: rgb(from rgb(var(--colors-color-basic-fg)) r g b / calc(alpha - 0.5));
    }

    /**
     * Beautify select elements.
     */
    label:has(> select) {
        @apply relative;

        &::before {
            @apply absolute rotate-90 text-.75em opacity-50;

            top: calc(50% - 0.75em / 2);
            right: 1.25em;
            content: '❯';
        }

        > select {
            @apply cursor-pointer appearance-none;
        }
    }

    /**
     * Basic header link color.
     */
    .basic-header {
        :where(a, .link):not(:where(.p, .p *, ._, ._ *)) {
            @apply text-color-header-link;
        }
    }

    /**
     * Basic sidebar link and heading colors.
     */
    .basic-sidebar {
        :where(a, .link):not(:where(.p, .p *, ._, ._ *)) {
            @apply text-color-sidebar-link;
        }

        :where(h1, h2, h3, h4, h5, h6):not(:where(.p, .p *, ._, ._ *)) {
            @apply text-color-sidebar-heading;
        }
    }

    /**
     * Basic footer link color.
     */
    .basic-footer {
        :where(a, .link):not(:where(.p, .p *, ._, ._ *)) {
            @apply text-color-footer-link;
        }
    }
}

/**
 * Our utilities layer.
 *
 * All of our utilities get prefixed with a leading `_` to help indicate what is being used.
 * In the same way that all of our JS utilities are prefixed with a `$` sign, we use `_` in CSS.
 */
@layer utilities {
    // Y margins like prose `p` tag.
    ._my-lp {
        @apply mt-[1.25em];
        @apply mb-[1.25em];
    }

    // First child margin-top 0.
    ._fc-mt-0 {
        > :first-child {
            @apply mt-0;
        }
    }

    // Last child margin-bottom 0.
    ._lc-mb-0 {
        > :last-child {
            @apply mb-0;
        }
    }
}

/**
 * Tailwind layers.
 */
@tailwind base;
@tailwind components;
@tailwind utilities;
@tailwind variants;
