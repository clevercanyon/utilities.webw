/**
 * Tailwind CSS config file.
 *
 * Tailwind is not aware of this config file's location.
 *
 * @note PLEASE DO NOT EDIT THIS FILE!
 * @note This entire file will be updated automatically.
 * @note Instead of editing here, please review <https://github.com/clevercanyon/skeleton>.
 *
 * @see https://tailwindcss.com/docs/configuration
 */
/*
-----------------------------------------------------------------------------------------------------------------------
Example `index.scss` starter file contents:
-----------------------------------------------------------------------------------------------------------------------
@import 'https://fonts.googleapis.com/css2?family=Georama:ital,wght@0,100..900;1,100..900&display=swap';

@tailwind base;
@tailwind components;
@tailwind utilities;
@tailwind variants;
-------------------------------------------------------------------------------------------------------------------- */

import pluginForms from '@tailwindcss/forms';
import pluginTypography from '@tailwindcss/typography';
import fs from 'node:fs';
import path from 'node:path';
import extensions from '../bin/includes/extensions.mjs';

// `__dirname` already exists when loaded by Tailwind via Jiti / commonjs.
// eslint-disable-next-line no-undef -- `__dirname` is not actually missing.
const projDir = path.resolve(__dirname, '../../..');

/**
 * Defines Tailwind configuration.
 *
 * Jiti, which is used by Tailwind to load ESM config files, doesnâ€™t support top-level await. Thus, we cannot use async
 * functionality here. Consider `make-synchronous` (already in dev-deps) if necessary. {@see https://o5p.me/1odhxy}.
 */
export default /* not async compatible */ () => {
	/**
	 * Composition.
	 */
	return {
		plugins: [
			pluginTypography({ className: 'prose' }),
			pluginForms({ strategy: 'class' }), // e.g., `form-{x}`.
		],
		theme: {
			fontFamily: {
				sans: ['Georama', 'sans-serif'],
				serif: ['Georgia', 'serif'],
			},
		},
		content: [
			path.resolve(projDir, './src') + '/**/*.' + extensions.asGlob(extensions.content),

			// If this package is using `@clevercanyon/utilities` we can also scan preact files.
			...(fs.existsSync(path.resolve(projDir, './node_modules/@clevercanyon/utilities/dist/preact'))
				? [path.resolve(projDir, './node_modules/@clevercanyon/utilities/dist/preact') + '/**/*.' + extensions.asGlob(extensions.content)]
				: []),
		],
	};
};
