/**
 * Vite config file.
 *
 * @note Vite is not aware of this config file's location.
 *
 * @see https://vitejs.dev/config/
 *
 * @note PLEASE DO NOT EDIT THIS FILE!
 * This entire file will be updated automatically.
 * - Instead of editing here, please review <https://github.com/clevercanyon/skeleton>.
 */
/* eslint-env es2021, node */

import mc                                       from '@clevercanyon/js-object-mc';
import pluginBasicSSL                           from '@vitejs/plugin-basic-ssl';
import chalk                                    from 'chalk';
import desm                                     from 'desm';
import glob                                     from 'glob';
import _                                        from 'lodash';
import minimatch                                from 'minimatch';
import fsp                                      from 'node:fs/promises';
import path                                     from 'node:path';
import prettier                                 from 'prettier';
import { loadEnv }                              from 'vite';
import { ViteEjsPlugin as pluginEJS }           from 'vite-plugin-ejs';
import { ViteMinifyPlugin as pluginMinifyHTML } from 'vite-plugin-minify';
import aliases                                  from './includes/aliases.js';

/**
 * Validates project config.
 *
 * @param {object} config Project config.
 *
 * @return boolean True on successful validation.
 */
const validateProjConfig = ( config ) => {
	if ( typeof config?.appType !== 'undefined' ) {
		throw new Error(
			'Modifying `appType` is not permitted at this time.' +
			' Instead, use `config.c10n.&.build.appType` in `package.json`.',
		);
	}
	if ( typeof config.build?.formats !== 'undefined' ) {
		throw new Error( 'Modifying `build.formats` is not permitted at this time.' );
	}
};

/**
 * Defines Vite configuration.
 *
 * @param {object} vite Data passed in by Vite.
 * @param {object} projConfig Project configuration overrides.
 *
 * @return {Promise<object>} Vite configuration object properties.
 */
export default async ( { mode } /* { command, mode, ssrBuild } */, projConfig = {} ) => {
	validateProjConfig( projConfig );
	/**
	 * Initializes vars.
	 */
	const __dirname = desm( import.meta.url );
	const projDir   = path.resolve( __dirname, '../../..' );
	const srcDir    = path.resolve( __dirname, '../../../src' );
	const envsDir   = path.resolve( __dirname, '../../../src/.envs' );

	const pkgFile        = path.resolve( projDir, './package.json' );
	const pkg            = JSON.parse( await fsp.readFile( pkgFile ) );
	const pkgPrettierCfg = { ...( await prettier.resolveConfig( pkgFile ) ), parser : 'json' };

	const publicEnvPrefix = 'APP_PUBLIC_'; // Used below also.
	const env             = loadEnv( mode, envsDir, publicEnvPrefix );

	const isProd  = /^prod(uction)?$/ui.test( mode );
	const isDev   = ! isProd; // Always opposite.
	const nodeEnv = isProd ? 'production' : 'development';

	/**
	 * `appType`   = `mpa` (multipage), `cma` (custom).
	 * `targetEnv` = `any`, `cfp`, `cfw`, `node`, `web`, `webw`.
	 *
	 * 1. `mpa` = Multipage app. Must use `index.html` entry points.
	 * 2. `cma` = Custom-made app. Must use `.{tsx,ts,jsx,mjs,js}` entry points.
	 */
	const appType   = pkg.config?.c10n?.[ '&' ].build?.appType || 'cma';
	const targetEnv = pkg.config?.c10n?.[ '&' ].build?.targetEnv || 'any';
	const isMpa     = 'mpa' === appType, isCma = 'cma' === appType;

	let cmaName = ( pkg.name || '' ).toLowerCase();
	cmaName     = cmaName.replace( /\bclevercanyon\b/ug, 'c10n' );
	cmaName     = cmaName.replace( /@/ug, '' ).replace( /\./ug, '-' ).replace( /\/+/ug, '.' );
	cmaName     = cmaName.replace( /[^a-z.0-9]([^.])/ug, ( m0, m1 ) => m1.toUpperCase() );
	cmaName     = cmaName.replace( /^\.|\.$/u, '' );

	const mpaAbsIndexes = glob.sync( path.join( srcDir, '/**/index.html' ), { nodir : true } );
	const mpaRelIndexes = mpaAbsIndexes.map( absPath => './' + path.relative( srcDir, absPath ) );

	const cmaAbsEntries = glob.sync( path.join( srcDir, '/*.{tsx,ts,jsx,mjs,js}' ), { nodir : true } );
	const cmaRelEntries = cmaAbsEntries.map( absPath => './' + path.relative( srcDir, absPath ) );

	const mpaEntryIndex = mpaRelIndexes.find( ( relPath ) => minimatch( relPath, './index.html' ) );
	const cmaEntryIndex = cmaRelEntries.find( ( relPath ) => minimatch( relPath, './index.{tsx,ts,jsx,mjs,js}' ) );

	const isWeb       = [ 'web', 'webw' ].includes( targetEnv );
	const isSSR       = [ 'cfp', 'cfw', 'node' ].includes( targetEnv );
	const isSSRWorker = isSSR && [ 'cfw' ].includes( targetEnv );

	if ( ( ! isMpa && ! isCma ) || ! [ 'mpa', 'cma' ].includes( appType ) ) {
		throw new Error( 'Must have a valid `config.c10n.&.build.appType` in `package.json`.' );
	}
	if ( ! [ 'any', 'cfp', 'cfw', 'node', 'web', 'webw' ].includes( targetEnv ) ) {
		throw new Error( 'Must have a valid `config.c10n.&.build.targetEnv` in `package.json`.' );
	}
	if ( isMpa && ! mpaEntryIndex ) {
		throw new Error( 'Multipage apps must have an `./index.{tsx,ts,jsx,mjs,js}` entry point.' );
	}
	if ( isCma && ! cmaEntryIndex ) {
		throw new Error( 'Custom apps must have an `./index.{tsx,ts,jsx,mjs,js}` entry point.' );
	}
	/**
	 * Updates `package.json` accordingly.
	 */
	pkg.exports = pkg.exports || {};
	pkg.exports[ '.' ] = pkg.exports[ '.' ] || {};

	if ( isSSR ) {
		mc.patch( pkg.exports, {
			'.' : {
				import  : './dist/index.js',
				require : './dist/index.js',
			},
		} );
		pkg.module  = './dist/index.js';
		pkg.main    = './dist/index.js';
		pkg.types   = './dist/types/index.d.ts';
		pkg.browser = isWeb ? pkg.module : '';
		pkg.unpkg   = pkg.module;

	} else if ( isCma && cmaRelEntries.length > 1 ) {
		mc.patch( pkg.exports, {
			'.' : {
				import  : './dist/index.js',
				require : './dist/index.cjs',
			},
		} );
		pkg.module  = './dist/index.js';
		pkg.main    = './dist/index.cjs';
		pkg.types   = './dist/types/index.d.ts';
		pkg.browser = isWeb ? pkg.module : '';
		pkg.unpkg   = pkg.module;

	} else if ( isCma ) {
		mc.patch( pkg.exports, {
			'.' : {
				import  : './dist/index.js',
				require : './dist/index.umd.cjs',
			},
		} );
		pkg.module  = './dist/index.js';
		pkg.main    = './dist/index.umd.cjs';
		pkg.types   = './dist/types/index.d.ts';
		pkg.browser = isWeb ? pkg.main : '';
		pkg.unpkg   = pkg.main;

	} else { // It's not a CMA. It's an MPA.
		pkg.exports = {}; // Clear these out entirely.
		pkg.module  = pkg.main = pkg.unpkg = pkg.browser = pkg.types = '';
	}
	await fsp.writeFile( pkgFile, prettier.format( JSON.stringify( pkg, null, 4 ), pkgPrettierCfg ) );
	console.log(
		chalk.blue( 'Updated `package.json` properties: ' ) +
		chalk.green( JSON.stringify( _.pick( pkg, [ 'exports', 'module', 'main', 'unpkg', 'browser', 'types' ] ), null, 4 ) ),
	);

	/**
	 * Configures rollup.
	 * @see https://o5p.me/5Vupql
	 */
	const rollupConfig               = {
		input  : isCma ? // Absolute paths.
			cmaAbsEntries : mpaAbsIndexes,
		output : {
			extend     : true, // Global || checks.
			interop    : 'auto', // Like `tsconfig.json`.
			noConflict : true, // Like `jQuery.noConflict()`.
		},
	};
	const importedWorkerRollupConfig = {
		// Imported web workers; e.g., `?worker`.
		// See: <https://vitejs.dev/guide/features.html#web-workers>.
		output : {
			extend     : true, // Global || checks.
			interop    : 'auto', // Like `tsconfig.json`.
			noConflict : true, // Like `jQuery.noConflict()`.
		},
	};

	/**
	 * Configures Vite plugins.
	 * @see https://github.com/vitejs/vite-plugin-basic-ssl
	 * @see https://github.com/zhuweiyou/vite-plugin-minify
	 * @see https://github.com/trapcodeio/vite-plugin-ejs
	 */
	const pluginBasicSSLConfig   = pluginBasicSSL();
	const pluginMinifyHTMLConfig = isProd ? pluginMinifyHTML() : null;
	const pluginEJSConfig        = pluginEJS(
		{ NODE_ENV : nodeEnv, isProd, isDev, env, pkg },
		{ ejs : { root : srcDir, views : [ srcDir + '/assets/ejs' ], strict : true, localsName : '$' } },
	);
	const plugins                = [ pluginBasicSSLConfig, pluginEJSConfig, pluginMinifyHTMLConfig ];

	/**
	 * Vite config base.
	 * @see https://vitejs.dev/config/
	 * @note This is extended by project configs.
	 */
	const baseConfig = {
		define    : { // Static replacements.
			$$__APP_PKG_NAME__$$       : pkg.name || '',
			$$__APP_PKG_VERSION__$$    : pkg.version || '',
			$$__APP_PKG_REPOSITORY__$$ : pkg.repository || '',
			$$__APP_PKG_HOMEPAGE__$$   : pkg.homepage || '',
			$$__APP_PKG_BUGS__$$       : pkg.bugs || '',
		},
		root      : srcDir, // Absolute. Where entry indexes live.
		publicDir : './public', // Static assets relative to `root`.
		base      : '/', // Analagous to `<base href="/">` — use trailing slash.

		appType : isCma ? 'custom' : 'mpa', // MPA = multipage app: <https://o5p.me/ZcTkEv>.
		resolve : { alias : aliases }, // See: `../typescript/config.json` and `./includes/aliases.js`.

		envDir    : './' + path.relative( srcDir, envsDir ), // Relative to `root`.
		envPrefix : publicEnvPrefix, // Part of app; i.e., visible client-side.

		server : { open : true, https : true }, // Vite dev server.
		plugins, // Additional Vite plugins that were configured above.

		esbuild : { jsx : 'automatic' }, // ← Not necessary in Vite 4.0.x.
		// See: <https://o5p.me/240y9w>, where `jsx` will be picked up from `tsconfig.json`.

		worker : { // Imported web workers; e.g., `?worker`.
			// See: <https://vitejs.dev/guide/features.html#web-workers>.
			plugins       : [], format : 'es',
			rollupOptions : importedWorkerRollupConfig,
		},
		build  : {         // <https://vitejs.dev/config/build-options.html>
			emptyOutDir : true, // Must set as `true` explicitly.
			target      : 'es2021', // Matches `tsconfig.json`.

			outDir    : '../dist', // Relative to `root`.
			assetsDir : './assets/a19s', // Relative to `outDir`.
			// `a19s` = numeronym for 'auto-generated assets'.

			ssr : isSSR, // Server-side rendering?
			...( isSSR ? { ssrManifest : isDev } : {} ),

			sourcemap : isDev, // Enables creation of sourcemaps.
			manifest  : isDev, // Enables creation of manifest for assets.

			...( isCma ? { lib : { name : cmaName, entry : cmaRelEntries } } : {} ),
			rollupOptions : rollupConfig, // See: <https://o5p.me/5Vupql>.
		},
		...( isSSR ? {
			ssr : {
				noExternal : true, // All server side.
				target     : isSSRWorker ? 'webworker' : 'node',
			},
		} : {} ),
	};
	// Uncomment to aid in debugging.
	// console.log( JSON.stringify( baseConfig, null, 4 ) );
	/**
	 * Returns final Vite config.
	 * @note Merged with project config.
	 */
	return mc.merge( baseConfig, projConfig );
};
