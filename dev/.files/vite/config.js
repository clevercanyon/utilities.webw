/**
 * Vite config file.
 *
 * Vite is not aware of this config file's location.
 *
 * @note PLEASE DO NOT EDIT THIS FILE!
 * @note This entire file will be updated automatically.
 * @note Instead of editing here, please review <https://github.com/clevercanyon/skeleton>.
 *
 * @see https://vitejs.dev/config/
 */
/* eslint-env es2021, node */

import path from 'node:path';
import fsp from 'node:fs/promises';

import _ from 'lodash';
import chalk from 'chalk';
import mm from 'micromatch';
import mc from 'merge-change';
import { dirname } from 'desm';
import prettier from 'prettier';
import { globby } from 'globby';

import { loadEnv } from 'vite';
import pluginBasicSSL from '@vitejs/plugin-basic-ssl';
import { ViteEjsPlugin as pluginEJS } from 'vite-plugin-ejs';
import { ViteMinifyPlugin as pluginMinifyHTML } from 'vite-plugin-minify';

import aliases from './includes/aliases.js';

/**
 * Defines Vite configuration.
 *
 * @param   vite       Data passed in by Vite.
 * @param   projConfig Project configuration overrides.
 *
 * @returns            Vite configuration object properties.
 */
export default async ({ mode } /* { command, mode, ssrBuild } */, projConfig = {}) => {
	/**
	 * Directory vars.
	 */
	const __dirname = dirname(import.meta.url);
	const projDir = path.resolve(__dirname, '../../..');

	const srcDir = path.resolve(__dirname, '../../../src');
	const envsDir = path.resolve(__dirname, '../../../dev/.envs');
	const cargoDir = path.resolve(__dirname, '../../../src/cargo');

	const distDir = path.resolve(__dirname, '../../../dist');
	const a16sDir = path.resolve(__dirname, '../../../dist/assets/a16s');

	/**
	 * Package-related vars.
	 */
	const pkgFile = path.resolve(projDir, './package.json');
	const pkg = JSON.parse((await fsp.readFile(pkgFile)).toString());
	const pkgPrettierCfg = { ...(await prettier.resolveConfig(pkgFile)), parser: 'json' };

	/**
	 * Environment & mode-related vars.
	 */
	const appEnvPrefix = 'APP_'; // Part of app.
	const env = loadEnv(mode, envsDir, appEnvPrefix);

	const isDev = /^dev(?:elopment)?$/iu.test(mode);
	const isProd = !isDev; // Always opposite.

	const nodeEnv = isDev ? 'development' : 'production';
	process.env.NODE_ENV = nodeEnv; // <https://o5p.me/DscTVM>.

	/**
	 * App type, target, path, and related vars.
	 */
	const appType = pkg.config?.c10n?.['&'].build?.appType || 'cma';
	const targetEnv = pkg.config?.c10n?.['&'].build?.targetEnv || 'any';
	const appBasePath = env.APP_BASE_PATH || '/'; // From environment vars.

	const isMPA = 'mpa' === appType;
	const isCMA = 'cma' === appType || !isMPA;

	let cmaName = (pkg.name || '').toLowerCase();
	cmaName = cmaName.replace(/\bclevercanyon\b/gu, 'c10n');
	cmaName = cmaName.replace(/@/gu, '').replace(/\./gu, '-').replace(/\/+/gu, '.');
	cmaName = cmaName.replace(/[^a-z.0-9]([^.])/gu, (m0, m1) => m1.toUpperCase());
	cmaName = cmaName.replace(/^\.|\.$/u, '');

	const mpaIndexes = await globby('**/index.html', { expandDirectories: false, cwd: srcDir, absolute: true });
	const mpaIndexesSubPaths = mpaIndexes.map((absPath) => path.relative(srcDir, absPath));

	const cmaEntries = await globby('*.{tsx,ts,jsx,mjs,js}', { expandDirectories: false, cwd: srcDir, absolute: true });
	const cmaEntriesRelPaths = cmaEntries.map((absPath) => './' + path.relative(srcDir, absPath));
	const cmaEntriesSubpaths = cmaEntries.map((absPath) => path.relative(srcDir, absPath));
	const cmaEntriesSubpathsNoExt = cmaEntriesSubpaths.map((subpath) => subpath.replace(/\.[^.]+$/u, ''));

	const mpaEntryIndexSubpath = mpaIndexesSubPaths.find((subpath) => mm.isMatch(subpath, 'index.html'));
	const cmaEntryIndexSubpath = cmaEntriesSubpaths.find((subpath) => mm.isMatch(subpath, 'index.{tsx,ts,jsx,mjs,js}'));
	const cmaEntryIndexSubpathNoExt = cmaEntryIndexSubpath.replace(/\.[^.]+$/u, '');

	const isWeb = ['web', 'webw'].includes(targetEnv);
	const isSSR = ['cfp', 'cfw', 'node'].includes(targetEnv);
	const isSSRWorker = isSSR && ['cfw'].includes(targetEnv);

	/**
	 * Validates all of the above.
	 */
	if (typeof projConfig?.appType !== 'undefined') {
		throw new Error('Modifying `appType` is not permitted at this time. Instead, use `config.c10n.&.build.appType` in `package.json`.');
	}
	if (typeof projConfig.build?.formats !== 'undefined') {
		throw new Error('Modifying `build.formats` is not permitted at this time.');
	}
	if ((!isMPA && !isCMA) || !['mpa', 'cma'].includes(appType)) {
		throw new Error('Must have a valid `config.c10n.&.build.appType` in `package.json`.');
	}
	if (!['any', 'cfp', 'cfw', 'node', 'web', 'webw', 'opl'].includes(targetEnv)) {
		throw new Error('Must have a valid `config.c10n.&.build.targetEnv` in `package.json`.');
	}
	if (isMPA && !mpaEntryIndexSubpath) {
		throw new Error('Multipage apps must have an `./index.html` entry point.');
	}
	if (isCMA && !cmaEntryIndexSubpath) {
		throw new Error('Custom apps must have an `./index.{tsx,ts,jsx,mjs,js}` entry point.');
	}

	/**
	 * Updates `package.json` accordingly.
	 */
	pkg.exports = {}; // Ensure exists as object.

	if (isCMA && (isSSR || cmaEntries.length > 1)) {
		mc.patch(pkg.exports, {
			'.': {
				import: './dist/' + cmaEntryIndexSubpathNoExt + '.js',
				require: './dist/' + cmaEntryIndexSubpathNoExt + '.cjs',
				types: './dist/types/' + cmaEntryIndexSubpathNoExt + '.d.ts',
			},
		});
		pkg.module = './dist/' + cmaEntryIndexSubpathNoExt + '.js';
		pkg.main = './dist/' + cmaEntryIndexSubpathNoExt + '.cjs';

		pkg.browser = isWeb ? pkg.module : '';
		pkg.unpkg = pkg.module;

		pkg.types = './dist/types/' + cmaEntryIndexSubpathNoExt + '.d.ts';
		pkg.typesVersions = { '>=3.1': { './*': ['./dist/types/*'] } };

		for (const cmaEntrySubPathNoExt of cmaEntriesSubpathsNoExt) {
			if (cmaEntrySubPathNoExt === cmaEntryIndexSubpathNoExt) {
				continue; // Don't remap the entry index.
			}
			mc.patch(pkg.exports, {
				['./' + cmaEntrySubPathNoExt]: {
					import: './dist/' + cmaEntrySubPathNoExt + '.js',
					require: './dist/' + cmaEntrySubPathNoExt + '.cjs',
					types: './dist/types/' + cmaEntrySubPathNoExt + '.d.ts',
				},
			});
		}
	} else if (isCMA) {
		mc.patch(pkg.exports, {
			'.': {
				import: './dist/' + cmaEntryIndexSubpathNoExt + '.js',
				require: './dist/' + cmaEntryIndexSubpathNoExt + '.umd.cjs',
				types: './dist/types/' + cmaEntryIndexSubpathNoExt + '.d.ts',
			},
		});
		pkg.module = './dist/' + cmaEntryIndexSubpathNoExt + '.js';
		pkg.main = './dist/' + cmaEntryIndexSubpathNoExt + '.umd.cjs';

		pkg.browser = isWeb ? pkg.main : '';
		pkg.unpkg = pkg.main;

		pkg.types = './dist/types/' + cmaEntryIndexSubpathNoExt + '.d.ts';
		pkg.typesVersions = { '>=3.1': { './*': ['./dist/types/*'] } };
	} else {
		(pkg.exports = []), (pkg.typesVersions = {});
		// ↑ When empty, `exports` should default to an array.
		pkg.module = pkg.main = pkg.browser = pkg.unpkg = pkg.types = '';
	}
	await fsp.writeFile(pkgFile, prettier.format(JSON.stringify(pkg, null, 4), pkgPrettierCfg));

	console.log(
		chalk.blue('Updated `package.json` properties: ') + //
			chalk.green(JSON.stringify(_.pick(pkg, ['exports', 'module', 'main', 'browser', 'unpkg', 'types', 'typesVersions']), null, 4)),
	);

	/**
	 * Configures plugins for Vite.
	 *
	 * @see https://github.com/vitejs/vite-plugin-basic-ssl
	 * @see https://github.com/trapcodeio/vite-plugin-ejs
	 * @see https://github.com/zhuweiyou/vite-plugin-minify
	 */
	const pluginBasicSSLConfig = pluginBasicSSL();
	const pluginEJSConfig = pluginEJS(
		{ NODE_ENV: nodeEnv, isProd, isDev, env, pkg }, //
		{ ejs: { root: srcDir, views: [path.resolve(srcDir, './resources/ejs-views')], strict: true, localsName: '$' } },
	);
	const pluginMinifyHTMLConfig = isProd ? pluginMinifyHTML() : null;

	const plugins = [pluginBasicSSLConfig, pluginEJSConfig, pluginMinifyHTMLConfig];
	const importedWorkerPlugins = []; // <https://vitejs.dev/guide/features.html#web-workers>.

	/**
	 * Configures rollup for Vite.
	 *
	 * @see https://vitejs.dev/config/build-options.html#build-rollupoptions
	 * @see https://rollupjs.org/guide/en/#big-list-of-options
	 */
	const rollupConfig = {
		input: isCMA // Absolute paths.
			? cmaEntries
			: mpaIndexes,

		external: [
			'__STATIC_CONTENT_MANIFEST', // CF workers.
			...Object.keys(pkg.peerDependencies || {}),
		],
		output: {
			interop: 'auto', // Matches TypeScript.
			exports: 'named', // Matches TypeScript.
			esModule: true, // Matches TypeScript.

			extend: true, // i.e., Global `||` checks.
			noConflict: true, // Like `jQuery.noConflict()`.
		},
	};
	// <https://vitejs.dev/guide/features.html#web-workers>
	const importedWorkerRollupConfig = { ..._.omit(rollupConfig, ['input']) };

	/**
	 * Vite config base.
	 *
	 * This is extended by project configs.
	 *
	 * @see https://vitejs.dev/config/
	 */
	const baseConfig = {
		define: {
			// Static replacements.
			$$__APP_PKG_NAME__$$: pkg.name || '',
			$$__APP_PKG_VERSION__$$: pkg.version || '',
			$$__APP_PKG_REPOSITORY__$$: pkg.repository || '',
			$$__APP_PKG_HOMEPAGE__$$: pkg.homepage || '',
			$$__APP_PKG_BUGS__$$: pkg.bugs || '',
		},
		root: srcDir, // Absolute. Where entry indexes live.
		publicDir: path.relative(srcDir, cargoDir), // Relative to `root` directory.
		base: appBasePath, // Analagous to `<base href="/">` — leading & trailing slash.

		appType: isCMA ? 'custom' : 'mpa', // MPA = multipage app: <https://o5p.me/ZcTkEv>.
		resolve: { alias: aliases }, // See: `../typescript/config.json` and `./includes/aliases.js`.

		envDir: path.relative(srcDir, envsDir), // Relative to `root` directory.
		envPrefix: appEnvPrefix, // Environment vars w/ this prefix become a part of the app.

		server: { open: true, https: true }, // Vite dev server.
		plugins, // Additional Vite plugins that were configured above.

		esbuild: { jsx: 'automatic' }, // ← Not necessary in Vite 4.0.x.
		// See: <https://o5p.me/240y9w>, where `jsx` will be picked up from `tsconfig.json`.

		worker: /* <https://vitejs.dev/guide/features.html#web-workers> */ {
			format: 'es',
			plugins: importedWorkerPlugins,
			rollupOptions: importedWorkerRollupConfig,
		},
		build: /* <https://vitejs.dev/config/build-options.html> */ {
			target: 'es2021', // Matches `tsconfig.json`.
			emptyOutDir: true, // Must set as `true` explicitly.

			outDir: path.relative(srcDir, distDir), // Relative to `root` directory.
			assetsDir: path.relative(distDir, a16sDir), // Relative to `outDir` directory.
			// Note: `a16s` = numeronym for 'acquired resources'.

			ssr: isSSR, // Server-side rendering?
			...(isSSR ? { ssrManifest: isDev } : {}),

			sourcemap: isDev, // Enables creation of sourcemaps.
			manifest: isDev, // Enables creation of manifest for assets.

			...(isCMA // Custom-made apps = library code.
				? {
						lib: {
							name: cmaName,
							entry: cmaEntriesRelPaths,
							// Default formats explicitly. See: <https://o5p.me/v0FR3s>.
							formats: cmaEntries.length > 1 ? ['es', 'cjs'] : ['es', 'umd'],
						},
				  }
				: {}),
			rollupOptions: rollupConfig, // See: <https://o5p.me/5Vupql>.
		},
		...(isSSR // <https://vitejs.dev/config/ssr-options.html>.
			? {
					ssr: {
						noExternal: true, // All server side.
						target: isSSRWorker ? 'webworker' : 'node',
					},
			  }
			: {}),
	};

	/**
	 * Returns final Vite config.
	 *
	 * @note Merged with project config.
	 */
	return mc.merge(baseConfig, projConfig);
};
