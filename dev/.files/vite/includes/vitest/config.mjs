/**
 * Vitest config file.
 *
 * Vitest is not aware of this config file's location.
 *
 * @note PLEASE DO NOT EDIT THIS FILE!
 * @note This entire file will be updated automatically.
 * @note Instead of editing here, please review <https://github.com/clevercanyon/skeleton>.
 *
 * @see https://vitest.dev/config/
 */

import { buildPagesASSETSBinding, defineWorkersProject } from '@cloudflare/vitest-pool-workers/config';
import path from 'node:path';
import { $obj } from '../../../../../node_modules/@clevercanyon/utilities/dist/index.js';
import exclusions from '../../../bin/includes/exclusions.mjs';
import extensions from '../../../bin/includes/extensions.mjs';

/**
 * Configures tests for Vite.
 *
 * @param   props Props from vite config file driver.
 *
 * @returns       Vitest configuration.
 */
export default async ({ mode, projDir, srcDir, logsDir, pkg, appType, targetEnv, wranglerSettings, vitestSandboxEnable, vitestExamplesEnable, rollupConfig, depsConfig }) => {
    const vitestExcludes = [
        ...new Set([
            ...exclusions.localIgnores,
            ...exclusions.logIgnores,
            ...exclusions.backupIgnores,
            ...exclusions.patchIgnores,
            ...exclusions.editorIgnores,
            ...exclusions.pkgIgnores,
            ...exclusions.vcsIgnores,
            ...exclusions.osIgnores,
            ...exclusions.dotIgnores,
            ...exclusions.dtsIgnores,
            ...exclusions.configIgnores,
            ...exclusions.lockIgnores,
            ...exclusions.devIgnores,
            ...exclusions.distIgnores,
            ...exclusions.docIgnores,
            ...(vitestSandboxEnable ? [] : [...exclusions.sandboxIgnores]),
            ...(vitestExamplesEnable ? [] : [...exclusions.exampleIgnores]),
            ...exclusions.adhocExIgnores, // Deliberate ad-hoc exclusions.
        ]),
    ];
    const allEnvSuffixes = ['cfp', 'web', 'cfw', 'webw', 'node', 'any'],
        allReservedSlugs = ['test', 'tests', 'test-d', 'tests-d', 'spec', 'specs', 'spec-d', 'specs-d', 'bench', 'benchmark', 'benchmarks'],
        vitestEnvSpecificPaths = [
            '**/' +
                (allReservedSlugs.length ? extensions.asBracedGlob(allReservedSlugs) : '') +
                '/**/*.' +
                (allEnvSuffixes.length ? extensions.asBracedGlob(allEnvSuffixes) + '.' : '') +
                extensions.asBracedGlob([...extensions.byDevGroup.allJavaScript, ...extensions.byDevGroup.allTypeScript]),

            '**/*.' +
                (allEnvSuffixes.length ? extensions.asBracedGlob(allEnvSuffixes) + '.' : '') +
                (allReservedSlugs.length ? extensions.asBracedGlob(allReservedSlugs) + '.' : '') +
                extensions.asBracedGlob([...extensions.byDevGroup.allJavaScript, ...extensions.byDevGroup.allTypeScript]),
        ];
    let jsdomProjectConfig, nodeProjectConfig, workerProjectConfig; // Initialize.

    const envIncludesExcludes = (envSuffixes) => {
        return {
            include:
                vitestSandboxEnable || vitestExamplesEnable
                    ? [
                          ...(vitestSandboxEnable
                              ? [
                                    '**/sandbox/**/{test,tests,spec,specs}/**/*.' +
                                        (envSuffixes.length ? extensions.asBracedGlob(envSuffixes) + '.' : '') +
                                        extensions.asBracedGlob([...extensions.byDevGroup.allJavaScript, ...extensions.byDevGroup.allTypeScript]),

                                    '**/sandbox/**/*.' +
                                        (envSuffixes.length ? extensions.asBracedGlob(envSuffixes) + '.' : '') +
                                        '{test,tests,spec,specs}.' +
                                        extensions.asBracedGlob([...extensions.byDevGroup.allJavaScript, ...extensions.byDevGroup.allTypeScript]),
                                ]
                              : []),
                          ...(vitestExamplesEnable
                              ? [
                                    '**/{example,examples}/**/{test,tests,spec,specs}/**/*.' +
                                        (envSuffixes.length ? extensions.asBracedGlob(envSuffixes) + '.' : '') +
                                        extensions.asBracedGlob([...extensions.byDevGroup.allJavaScript, ...extensions.byDevGroup.allTypeScript]),

                                    '**/{example,examples}/**/*.' +
                                        (envSuffixes.length ? extensions.asBracedGlob(envSuffixes) + '.' : '') +
                                        '{test,tests,spec,specs}.' +
                                        extensions.asBracedGlob([...extensions.byDevGroup.allJavaScript, ...extensions.byDevGroup.allTypeScript]),
                                ]
                              : []),
                      ]
                    : [
                          '**/{test,tests,spec,specs}/**/*.' +
                              (envSuffixes.length ? extensions.asBracedGlob(envSuffixes) + '.' : '') +
                              extensions.asBracedGlob([...extensions.byDevGroup.allJavaScript, ...extensions.byDevGroup.allTypeScript]),

                          '**/*.' +
                              (envSuffixes.length ? extensions.asBracedGlob(envSuffixes) + '.' : '') +
                              '{test,tests,spec,specs}.' +
                              extensions.asBracedGlob([...extensions.byDevGroup.allJavaScript, ...extensions.byDevGroup.allTypeScript]),
                      ],
            exclude: [...new Set([...vitestExcludes, ...(!envSuffixes.length ? vitestEnvSpecificPaths : [])])],

            typecheck: {
                include:
                    vitestSandboxEnable || vitestExamplesEnable
                        ? [
                              ...(vitestSandboxEnable
                                  ? [
                                        '**/sandbox/**/{test,tests,spec,specs}-d/**/*.' +
                                            (envSuffixes.length ? extensions.asBracedGlob(envSuffixes) + '.' : '') +
                                            extensions.asBracedGlob([...extensions.byDevGroup.allTypeScript]),

                                        '**/sandbox/**/*.' +
                                            (envSuffixes.length ? extensions.asBracedGlob(envSuffixes) + '.' : '') +
                                            '{test,tests,spec,specs}-d.' +
                                            extensions.asBracedGlob([...extensions.byDevGroup.allTypeScript]),
                                    ]
                                  : []),
                              ...(vitestExamplesEnable
                                  ? [
                                        '**/{example,examples}/**/{test,tests,spec,specs}-d/**/*.' +
                                            (envSuffixes.length ? extensions.asBracedGlob(envSuffixes) + '.' : '') +
                                            extensions.asBracedGlob([...extensions.byDevGroup.allTypeScript]),

                                        '**/{example,examples}/**/*.' +
                                            (envSuffixes.length ? extensions.asBracedGlob(envSuffixes) + '.' : '') +
                                            '{test,tests,spec,specs}-d.' +
                                            extensions.asBracedGlob([...extensions.byDevGroup.allTypeScript]),
                                    ]
                                  : []),
                          ]
                        : [
                              '**/{test,tests,spec,specs}-d/**/*.' +
                                  (envSuffixes.length ? extensions.asBracedGlob(envSuffixes) + '.' : '') +
                                  extensions.asBracedGlob([...extensions.byDevGroup.allTypeScript]),

                              '**/*.' +
                                  (envSuffixes.length ? extensions.asBracedGlob(envSuffixes) + '.' : '') +
                                  '{test,tests,spec,specs}-d.' +
                                  extensions.asBracedGlob([...extensions.byDevGroup.allTypeScript]),
                          ],
                exclude: [...new Set([...vitestExcludes, ...(!envSuffixes.length ? vitestEnvSpecificPaths : [])])],
            },
            benchmark: {
                include:
                    vitestSandboxEnable || vitestExamplesEnable
                        ? [
                              ...(vitestSandboxEnable
                                  ? [
                                        '**/sandbox/**/{bench,benchmark,benchmarks}/**/*.' +
                                            (envSuffixes.length ? extensions.asBracedGlob(envSuffixes) + '.' : '') +
                                            extensions.asBracedGlob([...extensions.byDevGroup.allJavaScript, ...extensions.byDevGroup.allTypeScript]),

                                        '**/sandbox/**/*.' +
                                            (envSuffixes.length ? extensions.asBracedGlob(envSuffixes) + '.' : '') +
                                            '{bench,benchmark,benchmarks}.' +
                                            extensions.asBracedGlob([...extensions.byDevGroup.allJavaScript, ...extensions.byDevGroup.allTypeScript]),
                                    ]
                                  : []),
                              ...(vitestExamplesEnable
                                  ? [
                                        '**/{example,examples}/**/{bench,benchmark,benchmarks}/**/*.' +
                                            (envSuffixes.length ? extensions.asBracedGlob(envSuffixes) + '.' : '') +
                                            extensions.asBracedGlob([...extensions.byDevGroup.allJavaScript, ...extensions.byDevGroup.allTypeScript]),

                                        '**/{example,examples}/**/*.' +
                                            (envSuffixes.length ? extensions.asBracedGlob(envSuffixes) + '.' : '') +
                                            '{bench,benchmark,benchmarks}.' +
                                            extensions.asBracedGlob([...extensions.byDevGroup.allJavaScript, ...extensions.byDevGroup.allTypeScript]),
                                    ]
                                  : []),
                          ]
                        : [
                              '**/{bench,benchmark,benchmarks}/**/*.' +
                                  (envSuffixes.length ? extensions.asBracedGlob(envSuffixes) + '.' : '') +
                                  extensions.asBracedGlob([...extensions.byDevGroup.allJavaScript, ...extensions.byDevGroup.allTypeScript]),

                              '**/*.' +
                                  (envSuffixes.length ? extensions.asBracedGlob(envSuffixes) + '.' : '') +
                                  '{bench,benchmark,benchmarks}.' +
                                  extensions.asBracedGlob([...extensions.byDevGroup.allJavaScript, ...extensions.byDevGroup.allTypeScript]),
                          ],
                exclude: [...new Set([...vitestExcludes, ...(!envSuffixes.length ? vitestEnvSpecificPaths : [])])],
            },
            css: { include: /.+/u, exclude: [] }, // CSS includes/excludes; i.e., when following style imports.
        };
    };
    return {
        mode, // Same mode as Vite.
        root: srcDir, // Vitest root dir.

        restoreMocks: true, // Remove all mocks before a test begins.
        unstubEnvs: true, // Remove all env stubs before a test begins.
        unstubGlobals: true, // Remove all global stubs before a test begins.

        passWithNoTests: true, // Pass if there are no tests to run.
        allowOnly: true, // Allows `describe.only`, `test.only`, `bench.only`.

        watch: false, // Disable watching by default; instead use `--watch`.
        forceRerunTriggers: [], // Disable; we’ll perform our own full re-runs when necessary.
        // One of the reasons for disabling this is because it doesn’t support negated `!` patterns.

        reporters: ['verbose', 'hanging-process'], // Verbose reporting.
        // {@see https://o5p.me/p0f9j5} for further details.

        // Unprefixed vars we want added to `import.meta.env`.
        // Vars with app-environment prefixes are already included by default.
        // This is mainly for worker tests, because `process.env` is available otherwise;
        // whereas with worker tests, the pool of workers does not inherit `process.env`.
        env: $obj.pick(process.env, ['CI', 'TEST', 'VITEST']),

        outputFile: {
            json: path.resolve(logsDir, './tests/vitest.json'),
            junit: path.resolve(logsDir, './tests/vitest.junit'),
            html: path.resolve(logsDir, './tests/vitest/index.html'),
        },
        benchmark: {
            outputFile: {
                json: path.resolve(logsDir, './benchmarks/vitest.json'),
                junit: path.resolve(logsDir, './benchmarks/vitest.junit'),
                html: path.resolve(logsDir, './benchmarks/vitest.html'),
            },
        },
        coverage: {
            all: true, // All of the below.
            extension: [...extensions.byDevGroup.allJavaScript, ...extensions.byDevGroup.allTypeScript],

            include: ['**/*.' + extensions.asBracedGlob([...extensions.byDevGroup.allJavaScript, ...extensions.byDevGroup.allTypeScript])],
            exclude: [
                ...new Set([
                    ...vitestExcludes,
                    ...exclusions.sandboxIgnores,
                    ...exclusions.exampleIgnores,
                    ...exclusions.testIgnores,
                    ...exclusions.specIgnores,
                    ...exclusions.benchIgnores,
                ]),
            ],
            reporter: ['text', 'html', 'clover', 'json'],
            reportsDirectory: path.resolve(logsDir, './coverage/vitest'),
        },
        server: {
            deps: {
                inline: [], // {@see https://o5p.me/DHrjU4} for details.
                external: [...new Set([...exclusions.pkgIgnores].concat(rollupConfig.external))],
            },
        },
        poolOptions: {
            workers: {
                singleWorker: true,
                wrangler: {
                    configPath: path.resolve(projDir, './wrangler.toml'), // {@see https://o5p.me/vUsocE}.
                    // For pages projects, an explicit `dev` environment is not supported by `$ madrun wrangler pages deploy`.
                    // The only valid environment keys are `production` and `preview`. So instead of `dev`, top-level keys are `dev` keys.
                    // Remember, miniflare writes to local storage anyway, so having a separate `dev` environment is not 100% necessary.
                    // What is necessary is that miniflare knows the names of the bindings we need, so it can populate those for tests.
                    ...(['spa', 'mpa'].includes(appType) && ['cfp'].includes(targetEnv) ? {} : { environment: 'dev' }),
                },
                // Miniflare config takes precedence over wrangler config.
                miniflare: {
                    ...(['cfp', 'any'].includes(targetEnv) // For example, utilities or another library potentially targeting `cfp`.
                        ? // Explicitly defining an assets binding for `createPagesEventContext()` in `@clevercanyon/utilities.cfp/test`.
                          {
                              serviceBindings: {
                                  ASSETS:
                                      // eslint-disable-next-line no-constant-condition -- @review Can we start using `buildPagesASSETSBinding()`?
                                      'use:buildPagesASSETSBinding()' === true // Buggy; {@see https://github.com/cloudflare/workers-sdk/issues/6582}.
                                          ? await buildPagesASSETSBinding(wranglerSettings.defaultPagesAssetsDir)
                                          : async () => new Response(null, { status: 404 }),
                              },
                          }
                        : {}),
                },
            },
        },
        deps: {
            optimizer: {
                web: depsConfig, // @{see https://o5p.me/c7L3KS}.
                ssr: depsConfig, // @{see https://o5p.me/c7L3KS}.
            },
        },
        workspace: [
            $obj.mergeDeep(
                (jsdomProjectConfig = {
                    extends: true,
                    test: {
                        mode, // Same mode.
                        environment: 'jsdom',
                    },
                }),
                {
                    test: {
                        name: '[cfp,web]',
                        ...envIncludesExcludes(['cfp', 'web']),
                    },
                },
            ),
            $obj.mergeDeep(
                (workerProjectConfig = $obj.patchDeep(defineWorkersProject({}), {
                    extends: true,
                    test: {
                        mode, // Same mode.
                        environment: 'node', // + workerd; {@see https://o5p.me/QUeRzq}.
                        deps: {
                            optimizer: {
                                ssr: $obj.mergeDeep(depsConfig, {
                                    $concat: {
                                        include: [
                                            '@clevercanyon/utilities', //
                                            '@clevercanyon/utilities/**',

                                            '@clevercanyon/utilities.web',
                                            '@clevercanyon/utilities.web/**',

                                            '@clevercanyon/utilities.cfw',
                                            '@clevercanyon/utilities.cfw/**',

                                            '@clevercanyon/utilities.cfp',
                                            '@clevercanyon/utilities.cfp/**',
                                        ].filter((name) => name !== pkg.name && !name.startsWith(pkg.name + '/')),
                                    },
                                }),
                            },
                        },
                    },
                })),
                {
                    test: {
                        name: '[cfw,webw]',
                        ...envIncludesExcludes(['cfw', 'webw']),
                    },
                },
            ),
            $obj.mergeDeep(
                (nodeProjectConfig = {
                    extends: true,
                    test: {
                        mode, // Same mode.
                        environment: 'node',
                    },
                }),
                {
                    test: {
                        name: '[node,any]',
                        ...envIncludesExcludes(['node', 'any']),
                    },
                },
            ),
            $obj.mergeDeep(
                ['cfp', 'web'].includes(targetEnv) ? jsdomProjectConfig :
                ['cfw', 'webw'].includes(targetEnv) ? workerProjectConfig :
                ['node', 'any'].includes(targetEnv) ? nodeProjectConfig :
                    nodeProjectConfig, // Default is node.
                {
                    test: {
                        name: '[targetEnv:' + targetEnv + ']',
                        ...envIncludesExcludes([]),
                    },
                },
            ), // prettier-ignore
        ],
    };
};
