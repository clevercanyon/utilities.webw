#!/usr/bin/env node
/**
 * TypeScript config file.
 *
 * TypeScript is not aware of this config file's location.
 *
 * The underlying `../../../tsconfig.json` file can be recompiled using:
 *
 *     $ madrun update tsconfig
 *     or: $ madrun update dotfiles
 *
 * The underlying `../../../tsconfig.json` file can be tested using:
 *
 *     $ npx tsc --showConfig
 *     $ npx tsc --emitDeclarationOnly --explainFiles
 *
 * @note PLEASE DO NOT EDIT THIS FILE!
 * @note This entire file will be updated automatically.
 * @note Instead of editing here, please review <https://github.com/clevercanyon/skeleton>.
 *
 * @see https://www.typescriptlang.org/tsconfig
 * @see https://www.typescriptlang.org/docs/handbook/module-resolution.html
 * @see https://vitejs.dev/guide/features.html#typescript-compiler-options
 */

import path from 'node:path';
import { $fs } from '../../../node_modules/@clevercanyon/utilities.node/dist/index.js';
import esVersion from '../bin/includes/es-version.mjs';
import exclusions from '../bin/includes/exclusions.mjs';
import importAliases from '../bin/includes/import-aliases.mjs';

const __dirname = $fs.imuDirname(import.meta.url);
const projDir = path.resolve(__dirname, '../../..');

/**
 * Prepares relative import aliases.
 */
const relativeImportAliases = {}; // Relative to `tsBaseDir`.
for (const [aliasPath, realPath] of Object.entries(importAliases.asGlobs)) {
    relativeImportAliases[aliasPath] = [path.relative(path.resolve(projDir, './src'), realPath)];
}

/**
 * Defines TypeScript configuration.
 */
export default async () => {
    /**
     * Base config.
     */
    const baseConfig = {
        include: [
            './' + path.relative(projDir, path.resolve(projDir, './*.d.ts')), //
            './' + path.relative(projDir, path.resolve(projDir, './src')) + '/**/*',
        ],
        exclude: exclusions.asRelativeGlobs(projDir, [
            ...new Set([
                ...exclusions.localIgnores,
                ...exclusions.logIgnores,
                ...exclusions.backupIgnores,
                ...exclusions.patchIgnores,
                ...exclusions.editorIgnores,
                ...exclusions.pkgIgnores,
                ...exclusions.vcsIgnores,
                ...exclusions.osIgnores,
                ...exclusions.dotIgnores,
                ...exclusions.configIgnores,
                ...exclusions.lockIgnores,
                ...exclusions.devIgnores,
                ...exclusions.distIgnores,
                ...exclusions.docIgnores,
            ]),
        ]),
        compilerOptions: {
            baseUrl: './' + path.relative(projDir, path.resolve(projDir, './src')),
            rootDir: './' + path.relative(projDir, path.resolve(projDir, './src')),
            declarationDir: './' + path.relative(projDir, path.resolve(projDir, './dist/types')),

            declaration: true,
            declarationMap: false,
            emitDeclarationOnly: true,

            strict: true,
            skipLibCheck: true,
            experimentalDecorators: true,

            target: esVersion.lcnYear,
            lib: [esVersion.lcnYear],
            types: ['vite/client', '@types/mdx'],

            jsx: 'react-jsx',
            jsxImportSource: 'preact',

            module: 'node16',
            moduleResolution: 'node16',

            esModuleInterop: true,
            isolatedModules: true,
            resolveJsonModule: true,
            verbatimModuleSyntax: true,
            allowImportingTsExtensions: true,

            paths: relativeImportAliases, // Relative to `baseUrl`.
        },
        mdx: (await import(path.resolve(projDir, './.remarkrc.mjs'))).default.tsconfigMDX,
    };

    /**
     * Composition.
     */
    return {
        ...baseConfig,
    };
};
