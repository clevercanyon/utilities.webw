#!/usr/bin/env node
/**
 * TypeScript config file generator.
 *
 * TypeScript is not aware of this config file's location.
 *
 * This config file can be recompiled using:
 *
 *     $ ./dev/.files/typescript/config.mjs
 *
 * This config file can be tested using:
 *
 *     $ npx tsc --showConfig
 *     $ npx tsc --emitDeclarationOnly --explainFiles
 *
 * @note PLEASE DO NOT EDIT THIS FILE!
 * @note This entire file will be updated automatically.
 * @note Instead of editing here, please review <https://github.com/clevercanyon/skeleton>.
 *
 * @see https://www.typescriptlang.org/tsconfig
 * @see https://www.typescriptlang.org/docs/handbook/module-resolution.html
 * @see https://vitejs.dev/guide/features.html#typescript-compiler-options
 */

import fs from 'node:fs';
import path from 'node:path';
import { $fs, $prettier } from '../../../node_modules/@clevercanyon/utilities.node/dist/index.js';
import { $json, $str, $time } from '../../../node_modules/@clevercanyon/utilities/dist/index.js';
import esVersion from '../bin/includes/es-version.mjs';
import exclusions from '../bin/includes/exclusions.mjs';
import importAliases from '../bin/includes/import-aliases.mjs';

const __dirname = $fs.imuDirname(import.meta.url);
const projDir = path.resolve(__dirname, '../../..');

const pkgFile = path.resolve(projDir, './package.json');
const configFile = path.resolve(__dirname, './config.json');

/**
 * Prepares relative import aliases.
 */
const relativeImportAliases = {}; // Relative to `baseUrl`.
for (const [aliasPath, realPath] of Object.entries(importAliases.asGlobs)) {
	relativeImportAliases[aliasPath] = [path.relative(path.resolve(projDir, './src'), realPath)];
}

/**
 * Defines TypeScript configuration.
 */
const baseConfig = {
	include: [
		path.relative(__dirname, path.resolve(projDir, './src')) + '/**/*', //
		path.relative(__dirname, path.resolve(projDir, './tsconfig.d.ts')),
	],
	exclude: exclusions.asRelativeGlobs(__dirname, [
		...exclusions.vcsFilesDirs, //
		...exclusions.packageDirs,
		...exclusions.distDirs,
		...exclusions.dotFilesDirs,
	]),
	compilerOptions: {
		baseUrl: path.relative(__dirname, path.resolve(projDir, './src')),
		rootDir: path.relative(__dirname, path.resolve(projDir, './src')),
		declarationDir: path.relative(__dirname, path.resolve(projDir, './dist/types')),

		declaration: true,
		declarationMap: false,
		emitDeclarationOnly: true,

		strict: true,
		skipLibCheck: true,
		experimentalDecorators: true,

		target: esVersion.lcnYear,
		lib: [esVersion.lcnYear],
		types: ['vite/client'],

		jsx: 'react-jsx',
		jsxImportSource: 'preact',

		module: 'node16',
		moduleResolution: 'node16',

		esModuleInterop: true,
		isolatedModules: true,
		resolveJsonModule: true,
		verbatimModuleSyntax: true,
		allowImportingTsExtensions: true,

		paths: relativeImportAliases, // Relative to `baseUrl`.
	},
};

/**
 * Composes TypeScript configuration file.
 */
const configFileComments = $str.dedent(`
	/**
	 * Auto-generated TypeScript config file.
	 *
	 * TypeScript is not aware of this config file's location.
	 *
	 * @note PLEASE DO NOT EDIT THIS FILE!
	 * @note This entire file will be updated automatically.
	 * @note Instead of editing here, please review <https://github.com/clevercanyon/skeleton>.
	 *
	 * Last generated by \`./config.mjs\` ${$time.i18n()}.
	 */
`);
const pkgPrettierCfg = { ...(await $prettier.resolveConfig(pkgFile)), parser: 'json' };
const configFileJSONContents = await $prettier.format($json.stringify(baseConfig, { pretty: true }), pkgPrettierCfg);
fs.writeFileSync(configFile, configFileComments + '\n' + configFileJSONContents);
