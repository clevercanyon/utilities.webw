#!/usr/bin/env node
/**
 * Wrangler config file.
 *
 * Wrangler is not aware of this config file's location.
 *
 * The underlying `../../../wrangler.toml` file can be recompiled using:
 *
 *     $ madrun update wrangler
 *     or: $ madrun update dotfiles
 *
 * The underlying `../../../wrangler.toml` file can be partially tested using:
 *
 *     $ madrun wrangler types ... outputs: `./worker-configuration.d.ts`.
 *
 * @note PLEASE DO NOT EDIT THIS FILE!
 * @note This entire file will be updated automatically.
 * @note Instead of editing here, please review <https://github.com/clevercanyon/skeleton>.
 *
 * @see https://developers.cloudflare.com/workers/wrangler/configuration/
 */

import path from 'node:path';
import { $fs } from '../../../node_modules/@clevercanyon/utilities.node/dist/index.js';
import { $path, $url } from '../../../node_modules/@clevercanyon/utilities/dist/index.js';
import extensions from '../bin/includes/extensions.mjs';
import wranglerSettings from './settings.mjs';

const __dirname = $fs.imuDirname(import.meta.url);
const projDir = path.resolve(__dirname, '../../..');

/**
 * Defines Wrangler configuration.
 */
export default async () => {
    /**
     * Base config.
     */
    const baseConfig = {
        // Platform settings.

        send_metrics: false, // Don't share usage.
        usage_model: 'bundled', // 10M/mo free + $0.50/M.

        // Compatibility settings.

        compatibility_date: wranglerSettings.compatibilityDate,
        compatibility_flags: wranglerSettings.compatibilityFlags,

        // Worker name & account ID.

        name: wranglerSettings.defaultWorkerName,
        account_id: wranglerSettings.defaultAccountId,

        // Workers.dev configuration.

        workers_dev: false,

        // App main entry configuration.

        main: './' + path.relative(projDir, './dist/index.js'),

        // Bundling configuration; {@see <https://o5p.me/JRHxfC>}.

        rules: [
            {
                type: 'ESModule',
                globs: extensions.asNoBraceGlobstars([
                    ...extensions.byDevGroup.sJavaScript, //
                    ...extensions.byDevGroup.sJavaScriptReact,

                    ...extensions.byDevGroup.mJavaScript,
                    ...extensions.byDevGroup.mJavaScriptReact,
                ]),
                fallthrough: false,
            },
            {
                type: 'CommonJS',
                globs: extensions.asNoBraceGlobstars([
                    ...extensions.byDevGroup.cJavaScript, //
                    ...extensions.byDevGroup.cJavaScriptReact,
                ]),
                fallthrough: false,
            },
            {
                type: 'Text',
                globs: extensions.asNoBraceGlobstars(
                    [...extensions.byVSCodeLang.codeTextual].filter(
                        (ext) =>
                            ![
                                ...extensions.byDevGroup.sJavaScript, //
                                ...extensions.byDevGroup.sJavaScriptReact,

                                ...extensions.byDevGroup.mJavaScript,
                                ...extensions.byDevGroup.mJavaScriptReact,

                                ...extensions.byDevGroup.cJavaScript,
                                ...extensions.byDevGroup.cJavaScriptReact,

                                ...extensions.byCanonical.wasm,
                            ].includes(ext),
                    ),
                ),
                fallthrough: false,
            },
            {
                type: 'Data',
                globs: extensions.asNoBraceGlobstars(
                    [...extensions.byVSCodeLang.codeTextBinary].filter(
                        (ext) =>
                            ![
                                ...extensions.byDevGroup.sJavaScript, //
                                ...extensions.byDevGroup.sJavaScriptReact,

                                ...extensions.byDevGroup.mJavaScript,
                                ...extensions.byDevGroup.mJavaScriptReact,

                                ...extensions.byDevGroup.cJavaScript,
                                ...extensions.byDevGroup.cJavaScriptReact,

                                ...extensions.byCanonical.wasm,
                            ].includes(ext),
                    ),
                ),
                fallthrough: false,
            },
            { type: 'CompiledWasm', globs: extensions.asNoBraceGlobstars([...extensions.byCanonical.wasm]), fallthrough: false },
        ],
        // Custom build configuration.

        build: {
            cwd: './' + path.relative(projDir, './'),
            watch_dir: './' + path.relative(projDir, './src'),
            command: 'npx @clevercanyon/madrun build --mode=prod',
        },
        // Worker sites; i.e., bucket configuration.

        site: {
            bucket: './' + path.relative(projDir, './dist/assets'),
            exclude: [
                ...$path.defaultNPMIgnores,
                '/a16s', // A16s (top-level only).
            ],
        },
        // Worker route configuration.

        route: {
            zone_name: wranglerSettings.defaultZoneName,
            pattern: wranglerSettings.defaultZoneDomain + '/' + $url.encode(wranglerSettings.defaultWorkerName) + '/*',
        },
        // Other environments used by this worker.

        env: {
            dev: {
                workers_dev: false,
                build: { command: 'npx @clevercanyon/madrun build --mode=dev' },
            },
        },
    };

    /**
     * Composition.
     */
    return {
        ...baseConfig,
    };
};
