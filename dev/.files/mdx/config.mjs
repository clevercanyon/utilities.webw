/**
 * MDX config file.
 *
 * MDX is not aware of this config file's location.
 *
 * @note PLEASE DO NOT EDIT THIS FILE!
 * @note This entire file will be updated automatically.
 * @note Instead of editing here, please review <https://github.com/clevercanyon/skeleton>.
 *
 * @see https://mdxjs.com/packages/mdx/#api
 */

import extensions from '../bin/includes/extensions.mjs';
import pluginAnchorsPreactXHash from '../rehype/plugins/anchors/preact-x-hash.mjs';
import pluginAnchorsRelExternalNoFollow from '../rehype/plugins/anchors/rel-external-nofollow.mjs';
import pluginFootnotesFixAnchors from '../rehype/plugins/footnotes/fix-anchors.mjs';
import pluginFootnotesFixLabelSection from '../rehype/plugins/footnotes/fix-label-section.mjs';
import pluginImagesLazy from '../rehype/plugins/images/lazy.mjs';
import pluginStarryNightHeaderExts from '../rehype/plugins/starry-night/header-exts.mjs';
import pluginAlerts from '../remark/plugins/alerts/index.mjs';
import pluginDirectives from '../remark/plugins/directives/index.mjs';
import pluginTableOfContents from '../remark/plugins/toc/index.mjs';

/**
 * Defines MDX configuration.
 */
export default async () => {
    /**
     * Composition.
     */
    return {
        jsxImportSource: 'preact',
        elementAttributeNameCase: 'html',

        mdExtensions: [...extensions.byVSCodeLang.markdown],
        mdxExtensions: [...extensions.byVSCodeLang.mdx],

        remarkPlugins: [
            [(await import('remark-frontmatter')).default], // Frontmatter.
            [(await import('remark-mdx-frontmatter')).default, { name: 'frontMatter' }],
            [(await import('remark-gfm')).default, { singleTilde: false }], // GFM features.
            [(await import('remark-gemoji')).default], // GFM-style emojis using `:shortcodes:`.
            [(await import('remark-smartypants')).default], // (em dash) `--` to `—`, quotes, etc.
            [(await import('remark-directive')).default], // Custom directives; {@see https://o5p.me/0fakce}.
            [pluginAlerts], // Generates alerts using remark directives. Ultimately powered by `remark-directive`.
            [pluginDirectives], // Generates HTML using remark directives. Ultimately powered by `remark-directive`.
            [pluginTableOfContents], // Runs `remark-toc`, but instead of outputting, we export `TableOfContents`.
        ],
        rehypePlugins: [
            [(await import('rehype-slug')).default, { prefix: '~' }], // Auto-generates heading IDs using heading text and counters.
            [(await import('rehype-autolink-headings')).default, { content: { type: 'text', value: '#' } }], // Auto-links all headings.
            [pluginAnchorsRelExternalNoFollow], // Modifies external anchors, adding `rel="external nofollow"`, if applicable, for improved SEO.
            [pluginImagesLazy], // Modifies image tags without a `loading` attribute, making them `loading="lazy"` for improved performance.
            [pluginFootnotesFixAnchors], // Modifies `remark-gfm` footnote anchors, shortening ID references and enforcing a `~` prefix.
            [pluginFootnotesFixLabelSection], // Modifies `#footnote-label` section at bottom, generated by `remark-gfm` plugin.
            [pluginAnchorsPreactXHash], // Modifies hash-only anchors so they work well with `<base href>` in our preact apps.
            // Applies syntax highlighting to fenced code blocks. We also mix in our own custom header extensions.
            [(await import('@microflash/rehype-starry-night')).default, { headerExtensions: pluginStarryNightHeaderExts }],
        ],
        vsCodeTSConfig: {
            // All of this goes into `./tsconfig.json`, so it must be JSON-serializable.
            // Also, we really don’t need to sweat this, as only syntax plugins are necessary.
            // The goal here is to feed the VSCode extension what it needs to do intellisense work.
            plugins: [
                ['remark-frontmatter'], // Frontmatter.
                ['remark-mdx-frontmatter', { name: 'frontMatter' }],
                ['remark-gfm', { singleTilde: false }], // GFM features.
                ['remark-gemoji'], // GFM-style emojis using `:shortcodes:`.
                ['remark-smartypants'], // (em dash) `--` to `—`, quotes, etc.
                ['remark-directive'], // Custom directives; {@see https://o5p.me/0fakce}.
                ['remark-toc', { heading: 'Table of Contents', prefix: '~' }], // {@see https://o5p.me/Y8DLuN}.
            ],
        },
    };
};
