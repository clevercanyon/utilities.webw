%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 12.6 (Build 21G115) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 428 267
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 428 267
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0 267 m
428 267 l
428 0 l
0 0 l
h
W*
10.322718 31.533333 m
10.249115 31.380444 10.157112 30.176445 10.046709 27.921333 c
9.936306 25.666222 9.8811045 23.372889 9.8811045 21.041334 c
9.8811045 18.671556 9.936306 16.684 10.046709 15.078667 c
10.157112 14.046667 10.451522 13.043333 10.929936 12.068666 c
11.408351 11.094 11.978768 10.434667 12.641189 10.090667 c
13.929229 10.014222 14.904459 10.625778 15.566879 11.925333 c
15.511678 11.925333 l
15.842888 12.651556 16.008493 13.740889 16.008493 15.193334 c
16.008493 16.34 16.082094 17.238222 16.2293 17.888 c
17.149328 17.735111 18.032555 17.658667 18.878981 17.658667 c
21.418259 17.716 l
22.743099 17.716 23.994339 17.56311 25.171974 17.257334 c
25.613588 15.919556 25.834394 14.524445 25.834394 13.072 c
25.834394 10.893333 25.309978 8.8293333 24.261147 6.8800001 c
23.212315 4.9306664 21.76787 3.3444445 19.927813 2.1213334 c
18.087757 0.89822221 16.045294 0.24844444 13.800425 0.17200001 c
13.138004 0.057333332 12.36518 0 11.481954 0 c
8.6114645 0 6.0905876 0.66888887 3.9193206 2.0066667 c
1.7480538 3.3444445 0.53361642 5.3511109 0.27600849 8.0266666 c
0.092002831 11.848889 0 15.957778 0 20.353333 c
0 23.984444 0.018400567 26.965778 0.055201698 29.297333 c
0.1104034 31.877333 l
0.073602267 32.450668 0.11960368 33.110001 0.24840765 33.855335 c
0.3772116 34.600666 0.55201697 35.259998 0.77282375 35.833332 c
1.1040339 36.712444 1.5364473 37.591557 2.0700636 38.470665 c
2.6036801 39.349777 3.1648974 40.076 3.7537155 40.649334 c
4.5265393 41.29911 5.6673746 41.853333 7.1762209 42.312 c
8.6114645 42.770668 10.101911 43 11.647558 43 c
14.150036 43 16.505308 42.397999 18.713375 41.194 c
20.921444 39.990002 22.687899 38.346443 24.012739 36.263332 c
25.33758 34.180222 26 31.915556 26 29.469334 c
26 28.01689 25.742392 26.564444 25.227177 25.112 c
23.681528 24.768 22.39349 24.596001 21.363058 24.596001 c
19.964615 24.596001 18.032555 24.844444 15.566879 25.341333 c
15.401274 27.52 l
15.327672 29.278223 15.116065 30.606445 14.766455 31.504667 c
14.416843 32.402889 13.67162 32.83289 12.530786 32.794666 c
12.493984 32.794666 12.447983 32.78511 12.392781 32.765999 c
12.33758 32.746887 12.254777 32.737335 12.144374 32.737335 c
12.199575 32.737335 l
11.058741 32.546223 10.433121 32.14489 10.322718 31.533333 c
h
W
0 0 428 267 rc
-1 44 m
27 44 l
27 -1 l
-1 -1 l
h
f
Q
q
0 267 m
428 267 l
428 0 l
0 0 l
h
W*
52.942604 5.4737568 m
52.980869 5.0207181 53 4.3600368 53 3.4917128 c
53 2.698895 52.933041 2.142035 52.799118 1.8211325 c
52.665195 1.5002302 52.464314 1.3020258 52.196468 1.2265193 c
51.928623 1.1510129 51.469463 1.1132597 50.818985 1.1132597 c
50.417217 1.1132597 l
49.498898 1.1698895 l
48.006622 1.1132597 l
45.634289 1.0377532 42.133186 1 37.503311 1 c
33.103016 1 29.601913 1.0188766 27 1.0566298 c
27 2.3591161 l
27.267843 8.588398 27.401766 14.855433 27.401766 21.160221 c
27.401766 23.010128 27.363503 26.200275 27.286976 30.730663 c
27.286976 32.089779 l
27.286976 34.185081 l
27.248713 34.826889 27.22958 35.978359 27.22958 37.639503 c
27.172186 41.320442 l
27.707874 41.509209 28.45401 41.669659 29.410597 41.801796 c
30.367182 41.933933 31.323767 42 32.280354 42 c
33.35173 42 34.423103 41.924492 35.49448 41.773479 c
36.565857 41.622467 37.426785 41.414825 38.077263 41.150551 c
38.000736 38.43232 37.962471 36.261509 37.962471 34.638123 c
37.962471 32.372929 38.000736 28.975138 38.077263 24.444752 c
38.115524 22.179558 38.134659 18.838398 38.134659 14.42127 c
38.134659 10.740332 l
39.39735 10.740332 40.947021 10.683702 42.783665 10.570442 c
45.825607 10.457182 l
47.432671 10.343923 48.944077 10.287292 50.359825 10.287292 c
51.354671 10.287292 52.23473 10.325046 53 10.400553 c
53 9.5322285 52.980869 8.96593 52.942604 8.7016573 c
52.942604 8.7582874 l
52.866077 7.7389503 52.846947 7.0027623 52.885208 6.5497236 c
52.942604 5.4737568 l
h
W
0 0 428 267 rc
26 43 m
54 43 l
54 0 l
26 0 l
h
f
Q
q
0 267 m
428 267 l
428 0 l
0 0 l
h
W*
81 6.4435029 m
81 4.4745765 80.790939 2.7179849 80.37281 1.1737288 c
78.700294 1.1737288 76.22953 1.1351224 72.960526 1.0579096 c
65.491226 1 l
62.108189 1 58.725147 1.1158192 55.342106 1.3474576 c
55.380116 2.5828626 55.323101 7.3893595 55.171051 15.766949 c
55.057018 20.515537 55 24.163841 55 26.711864 c
55 32.000942 55.133041 36.92326 55.399124 41.478813 c
60.416668 41.652542 l
66.042397 41.884182 70.337723 42 73.302635 42 c
75.849419 42 78.320175 41.903484 80.714912 41.710453 c
80.866959 40.899719 80.942986 39.953861 80.942986 38.872883 c
80.942986 38.293785 80.904968 37.347927 80.828949 36.035309 c
80.752922 34.799908 80.714912 33.834747 80.714912 33.139832 c
78.434212 32.637947 75.887428 32.387005 73.074562 32.387005 c
65.662277 32.329098 l
65.472221 30.514595 65.37719 29.008945 65.37719 27.812147 c
65.37719 26.885593 65.491226 26.07486 65.719299 25.379944 c
69.482452 25.84322 l
70.014618 25.84322 70.812866 25.804613 71.87719 25.727402 c
72.618423 25.669491 l
72.808479 24.511299 72.903511 23.256592 72.903511 21.905367 c
72.789474 17.272598 l
71.573097 16.92514 69.938599 16.751413 67.885963 16.751413 c
66.403511 16.809322 l
66.137428 16.809322 65.966377 16.770716 65.89035 16.693502 c
65.662277 13.682203 l
65.662277 12.09934 65.738304 10.786723 65.89035 9.7443504 c
67.866959 9.7443504 69.786552 9.6864405 71.649124 9.5706215 c
72.295319 9.5320148 73.093567 9.4934082 74.043861 9.4548025 c
74.994148 9.4161959 76.115494 9.3968925 77.407898 9.3968925 c
80.885963 9.5127115 l
80.96199 7.7368174 81 6.7137475 81 6.4435029 c
h
W
0 0 428 267 rc
54 43 m
82 43 l
82 0 l
54 0 l
h
f
Q
q
0 267 m
428 267 l
428 0 l
0 0 l
h
W*
107 41.306065 m
105.83189 34.944992 104.51305 28.757404 103.04348 22.743299 c
101.57391 16.729197 99.727539 9.5585327 97.504349 1.2313117 c
96.675362 1.2313117 96.110146 1.2120358 95.808693 1.1734837 c
95.243477 1.1156559 l
94.565216 1.0385519 93.868118 1 93.152176 1 c
90.778259 1 88.931885 1.2313117 87.613045 1.6939352 c
84.334785 13.529384 82.130432 26.57922 81 40.843441 c
81.339134 41.228962 82.036232 41.518101 83.091301 41.710861 c
84.146378 41.903622 85.314491 42 86.59565 42 c
87.801453 42 89.157974 41.865067 90.665215 41.595203 c
91.004349 36.448521 l
91.230438 32.631874 91.475365 29.326046 91.739128 26.531029 c
92.002899 23.736013 92.379707 20.969912 92.869568 18.232721 c
93.321739 20.353079 94.018837 24.208275 94.960869 29.798307 c
96.091301 36.622002 96.844925 40.689232 97.221741 42 c
98.691307 41.691586 100.36812 41.537376 102.25217 41.537376 c
104.13623 41.537376 105.47392 41.460274 106.26522 41.306065 c
107 41.306065 l
h
W
0 0 428 267 rc
80 43 m
108 43 l
108 0 l
80 0 l
h
f
Q
q
0 267 m
428 267 l
428 0 l
0 0 l
h
W*
133 6.4435029 m
133 4.4745765 132.79094 2.7179849 132.3728 1.1737288 c
130.70029 1.1737288 128.22954 1.1351224 124.96053 1.0579096 c
117.49123 1 l
114.10818 1 110.72514 1.1158192 107.3421 1.3474576 c
107.38012 2.5828626 107.3231 7.3893595 107.17105 15.766949 c
107.05701 20.515537 107 24.163841 107 26.711864 c
107 32.000942 107.13304 36.92326 107.39912 41.478813 c
112.41666 41.652542 l
118.0424 41.884182 122.33772 42 125.30264 42 c
127.84942 42 130.32018 41.903484 132.7149 41.710453 c
132.86696 40.899719 132.94298 39.953861 132.94298 38.872883 c
132.94298 38.293785 132.90497 37.347927 132.82895 36.035309 c
132.75293 34.799908 132.7149 33.834747 132.7149 33.139832 c
130.4342 32.637947 127.88743 32.387005 125.07456 32.387005 c
117.66228 32.329098 l
117.47222 30.514595 117.37719 29.008945 117.37719 27.812147 c
117.37719 26.885593 117.49123 26.07486 117.7193 25.379944 c
121.48245 25.84322 l
122.01462 25.84322 122.81287 25.804613 123.87719 25.727402 c
124.61842 25.669491 l
124.80848 24.511299 124.90351 23.256592 124.90351 21.905367 c
124.78947 17.272598 l
123.5731 16.92514 121.9386 16.751413 119.88596 16.751413 c
118.40351 16.809322 l
118.13743 16.809322 117.96638 16.770716 117.89035 16.693502 c
117.66228 13.682203 l
117.66228 12.09934 117.7383 10.786723 117.89035 9.7443504 c
119.86696 9.7443504 121.78655 9.6864405 123.64912 9.5706215 c
124.29532 9.5320148 125.09357 9.4934082 126.04386 9.4548025 c
126.99415 9.4161959 128.11549 9.3968925 129.4079 9.3968925 c
132.88597 9.5127115 l
132.96199 7.7368174 133 6.7137475 133 6.4435029 c
h
W
0 0 428 267 rc
106 43 m
134 43 l
134 0 l
106 0 l
h
f
Q
q
0 267 m
428 267 l
428 0 l
0 0 l
h
W*
158.09883 12.076923 m
159.59755 9.7307692 160.80588 7.75 161.72383 6.1346154 c
162.6418 4.5192308 163.40051 2.8846154 164 1.2307693 c
163.10077 1.2307693 l
162.65117 1.2307693 161.63954 1.1923077 160.06589 1.1153846 c
158.49225 1.0384616 157.23708 1 156.30038 1 c
155.77583 1 154.98901 1.0384616 153.93993 1.1153846 c
152.9845 1.1730769 l
150.5491 6.8653846 148.37598 11.134615 146.46512 13.980769 c
146.46512 12.480769 l
146.46512 10.096154 146.59625 7.0192308 146.85852 3.25 c
146.85852 3.3076923 l
146.896 3.0384614 146.91473 2.5769231 146.91473 1.9230769 c
145.64082 1.3076923 143.54263 1 140.62015 1 c
139.27132 1.0576923 l
136.29263 1.0576923 l
135.88049 1.0576923 135.67442 4.5384617 135.67442 11.5 c
135.67442 17.807692 135.61821 24.125 135.50581 30.451923 c
135.39342 36.778847 135.22481 40.576923 135 41.846153 c
136.51744 42.076923 l
138.7655 42.384617 140.62015 42.615383 142.08139 42.76923 c
143.54263 42.923077 145.04134 43 146.57751 43 c
148.2261 43 149.63113 42.923077 150.79263 42.76923 c
152.96576 42.5 154.99838 41.73077 156.8905 40.46154 c
158.78262 39.192307 160.30006 37.634617 161.44283 35.78846 c
162.5856 33.942307 163.15698 32.03846 163.15698 30.076923 c
163.15698 28.192308 162.5575 26.134615 161.35852 23.903847 c
160.60918 22.51923 159.61627 21.365385 158.37985 20.442308 c
157.14342 19.51923 155.66344 18.961538 153.93993 18.76923 c
154.95155 16.923077 156.13179 15 157.48062 13 c
157.74289 12.538462 157.94896 12.230769 158.09883 12.076923 c
h
150.00581 26.788462 m
150.53036 26.942308 150.9425 27.326923 151.24225 27.942308 c
151.54199 28.557692 151.69186 29.288462 151.69186 30.134615 c
151.69186 31.711538 151.31718 32.73077 150.56783 33.192307 c
150.08075 33.5 149.5843 33.692307 149.07849 33.76923 c
148.57268 33.846153 148.0013 33.884617 147.36433 33.884617 c
144.94768 33.48077 l
145.02261 32.326923 145.06007 31.346153 145.06007 30.538462 c
145.06007 28.461538 145.11627 27.192308 145.22868 26.73077 c
145.86563 26.653847 146.65245 26.615385 147.58914 26.615385 c
148.4509 26.615385 149.25645 26.673077 150.00581 26.788462 c
h
W
0 0 428 267 rc
134 44 m
165 44 l
165 0 l
134 0 l
h
f
Q
q
0 267 m
428 267 l
428 0 l
0 0 l
h
W*
186.32272 31.533333 m
186.24911 31.380444 186.15712 30.176445 186.04671 27.921333 c
185.93631 25.666222 185.8811 23.372889 185.8811 21.041334 c
185.8811 18.671556 185.93631 16.684 186.04671 15.078667 c
186.15712 14.046667 186.45152 13.043333 186.92993 12.068666 c
187.40836 11.094 187.97878 10.434667 188.64119 10.090667 c
189.92923 10.014222 190.90446 10.625778 191.56688 11.925333 c
191.51167 11.925333 l
191.84288 12.651556 192.0085 13.740889 192.0085 15.193334 c
192.0085 16.34 192.08209 17.238222 192.22929 17.888 c
193.14932 17.735111 194.03256 17.658667 194.87898 17.658667 c
197.41826 17.716 l
198.7431 17.716 199.99434 17.56311 201.17198 17.257334 c
201.61359 15.919556 201.8344 14.524445 201.8344 13.072 c
201.8344 10.893333 201.30998 8.8293333 200.26114 6.8800001 c
199.21231 4.9306664 197.76787 3.3444445 195.92781 2.1213334 c
194.08775 0.89822221 192.04529 0.24844444 189.80043 0.17200001 c
189.138 0.057333332 188.36517 0 187.48195 0 c
184.61147 0 182.09059 0.66888887 179.91933 2.0066667 c
177.74805 3.3444445 176.53362 5.3511109 176.276 8.0266666 c
176.092 11.848889 176 15.957778 176 20.353333 c
176 23.984444 176.0184 26.965778 176.05521 29.297333 c
176.1104 31.877333 l
176.07361 32.450668 176.1196 33.110001 176.24841 33.855335 c
176.37721 34.600666 176.55202 35.259998 176.77283 35.833332 c
177.10403 36.712444 177.53645 37.591557 178.07007 38.470665 c
178.60368 39.349777 179.1649 40.076 179.75371 40.649334 c
180.52654 41.29911 181.66737 41.853333 183.17622 42.312 c
184.61147 42.770668 186.10191 43 187.64755 43 c
190.15004 43 192.50531 42.397999 194.71338 41.194 c
196.92145 39.990002 198.6879 38.346443 200.01274 36.263332 c
201.33759 34.180222 202 31.915556 202 29.469334 c
202 28.01689 201.74239 26.564444 201.22717 25.112 c
199.68153 24.768 198.39349 24.596001 197.36305 24.596001 c
195.96461 24.596001 194.03256 24.844444 191.56688 25.341333 c
191.40128 27.52 l
191.32767 29.278223 191.11606 30.606445 190.76645 31.504667 c
190.41684 32.402889 189.67162 32.83289 188.53079 32.794666 c
188.49399 32.794666 188.44798 32.78511 188.39278 32.765999 c
188.33759 32.746887 188.25478 32.737335 188.14438 32.737335 c
188.19957 32.737335 l
187.05875 32.546223 186.43312 32.14489 186.32272 31.533333 c
h
W
0 0 428 267 rc
175 44 m
203 44 l
203 -1 l
175 -1 l
h
f
Q
q
0 267 m
428 267 l
428 0 l
0 0 l
h
W*
229 1.3980583 m
227.79681 1.1326861 226.49963 1 225.10846 1 c
223.45409 1 221.64931 1.2085067 219.69414 1.6255201 c
219.43095 2.3458159 219.01735 3.8622284 218.45337 6.1747575 c
217.88937 8.5251961 217.43817 10.079519 217.09978 10.837726 c
215.9718 10.89459 l
215.01302 10.837726 l
214.86263 10.382802 214.61823 9.2644472 214.27983 7.4826632 c
214.01663 6.0041609 213.75343 4.8005085 213.49023 3.871706 c
213.22704 2.9429033 212.85104 2.0993991 212.36226 1.3411928 c
211.98627 1.2653722 211.42227 1.2274618 210.67029 1.2274618 c
210.33189 1.2274618 209.59869 1.2653722 208.47072 1.3411928 c
205.19957 1.492834 203.37599 1.5686547 203 1.5686547 c
203 1.7582062 203.0376 2.2036524 203.11279 2.9049931 c
203.188 3.6063337 203.3008 4.3929729 203.45119 5.2649097 c
204.69197 12.429958 l
205.66956 18.306057 206.60014 23.423948 207.48373 27.783634 c
208.36732 32.143318 209.5235 36.749424 210.95227 41.60194 c
211.47867 41.677761 212.19305 41.715672 213.09544 41.715672 c
213.43384 41.715672 l
215.87781 41.715672 218.26537 41.810448 220.59653 42 c
221.04773 40.218216 221.46132 38.464863 221.83731 36.739944 c
222.2133 35.015026 222.5517 33.470181 222.85249 32.105408 c
224.05568 26.835876 224.86406 23.329172 225.27766 21.585299 c
229 1.3980583 l
h
217.21259 18.116505 m
216.38539 25.698566 215.9906 29.489597 216.0282 29.489597 c
215.9718 30.058252 l
215.9718 30.058252 215.9342 29.603329 215.85901 28.693481 c
215.7462 25.850208 215.57701 23.594545 215.35141 21.926491 c
214.84381 18.116505 l
217.21259 18.116505 l
h
W
0 0 428 267 rc
202 43 m
230 43 l
230 0 l
202 0 l
h
f
Q
q
0 267 m
428 267 l
428 0 l
0 0 l
h
W*
243.83221 6.3257031 m
241.38927 11.527027 239.78001 15.126493 239.00447 17.124104 c
239.00447 6.2691669 l
239.00447 3.9323406 239.02386 2.3304834 239.06264 1.4635962 c
238.01566 1.1620703 236.87173 1.0113072 235.63087 1.0113072 c
235.2431 1.0113072 234.66145 1.048998 233.88591 1.1243795 c
233.03281 1.199761 232.41238 1.2374518 232.02461 1.2374518 c
229.1745 1.3505239 l
229.1745 5.5907335 l
229.1745 8.0029421 229.13573 11.4328 229.05817 15.880309 c
229.01939 18.104063 229 21.477386 229 26.000277 c
229 32.068485 229.1745 37.156738 229.52348 41.26503 c
230.57047 41.528866 231.73378 41.660782 233.01343 41.660782 c
233.86652 41.660782 234.90381 41.585403 236.12527 41.434639 c
237.34676 41.283875 238.19016 41.057732 238.65549 40.756207 c
239.19836 39.776245 239.86726 38.409954 240.66219 36.657337 c
241.45712 34.904716 242.22296 33.161518 242.95973 31.427744 c
245.28635 26.226419 l
245.2088 28.864773 245.17003 31.97426 245.17003 35.554882 c
245.17003 38.457069 245.18941 40.454678 245.2282 41.54771 c
246.81804 41.849236 248.50485 42 250.28859 42 c
251.80089 42 253.37137 41.830391 255 41.491177 c
255 1.4070601 l
254.88367 1.4070601 254.651 1.3505239 254.30202 1.2374518 c
253.91425 1.0866888 253.23564 1.0113072 252.26622 1.0113072 c
252.07233 0.97361648 251.04474 1.0301526 249.18344 1.1809156 c
248.71812 1.2186064 248.12677 1.2562971 247.40939 1.2939879 c
246.69202 1.3316786 246.27516 1.3316786 246.15884 1.2939879 c
243.83221 6.3257031 l
h
W
0 0 428 267 rc
228 43 m
256 43 l
256 -0.026383527 l
228 -0.026383527 l
h
f
Q
q
0 267 m
428 267 l
428 0 l
0 0 l
h
W*
265.76395 1 m
264.87125 1.1153306 264.01575 1.1729958 263.19742 1.1729958 c
262.6395 1.1729958 261.87695 1.1345522 260.90988 1.0576652 c
258.56653 1 l
257.8226 1 256.9671 1.0576652 256 1.1729958 c
256.8927 3.9409282 258.60373 8.7079229 261.13306 15.47398 c
263.42059 21.471167 l
263.04865 23.008907 262.58368 24.517815 262.02576 25.99789 c
261.4678 27.477964 260.76108 29.236755 259.90558 31.274261 c
258.90128 33.849976 258.14807 35.829819 257.64594 37.213783 c
257.14377 38.597748 256.70673 40.058601 256.33478 41.596344 c
257.04147 41.557899 258.13876 41.615566 259.62662 41.769341 c
260.81689 41.923115 261.69098 42 262.24893 42 c
263.55078 42 264.62946 41.750118 265.48499 41.250351 c
265.81973 39.827942 266.33118 38.05954 267.01932 35.945148 c
267.70743 33.830753 268.36768 31.947023 269 30.293953 c
269.18597 30.678387 269.78113 32.427567 270.7854 35.541492 c
271.90128 39.001408 272.53363 40.885139 272.6824 41.192688 c
274.72818 41.615566 276.75537 41.827003 278.76395 41.827003 c
279.99142 41.827003 281.0701 41.750118 282 41.596344 c
281.1073 38.136429 280.01001 34.801453 278.70816 31.591421 c
277.40628 28.381388 275.6395 24.354431 273.40771 19.510548 c
271.62231 15.743085 270.13449 12.446554 268.94421 9.6209564 c
267.75394 6.7953587 266.69385 3.9217064 265.76395 1 c
h
W
0 0 428 267 rc
255 43 m
283 43 l
283 0 l
255 0 l
h
f
Q
q
0 267 m
428 267 l
428 0 l
0 0 l
h
W*
306.82968 31.046896 m
306.94324 29.87816 307 28.690575 307 27.484138 c
306.94324 26.466208 l
306.94324 25.448277 l
306.86755 24.204138 306.82968 22.375631 306.82968 19.962759 c
306.82968 17.285976 306.77292 15.250115 306.65939 13.855172 c
306.48907 11.988966 l
306.29987 8.9351721 305.52402 6.3337932 304.16156 4.1848278 c
303.59387 3.3931034 302.74237 2.6956322 301.60699 2.0924139 c
300.47162 1.4891953 299.22272 0.99908048 297.86026 0.62206894 c
296.45996 0.20735632 294.81369 0 292.92139 0 c
292.05093 0 291.4454 0.018850574 291.1048 0.056551725 c
289.25037 0.20735632 287.5946 0.61264366 286.13754 1.2724138 c
284.68048 1.9321839 283.61136 2.9029884 282.93015 4.1848278 c
282.02182 5.8813791 281.52985 8.0114946 281.45416 10.575172 c
281.34061 12.384828 l
281.30276 12.686437 281.28384 13.308506 281.28384 14.251035 c
281.0946 17.342529 281 20.302069 281 23.129656 c
281 24.863909 281.05676 26.598162 281.17032 28.332415 c
281.28384 30.217472 281.61499 32.055401 282.16376 33.846207 c
282.71252 35.637012 283.5546 37.211033 284.68994 38.568275 c
285.93887 39.246895 l
288.36099 40.41563 291.01019 41 293.88647 41 c
295.70306 41 297.41559 40.764366 299.02402 40.293102 c
300.63245 39.821838 302.04221 39.133793 303.25327 38.228966 c
304.57788 37.02253 305.44833 35.834942 305.86462 34.666206 c
306.31879 33.45977 306.64047 32.253334 306.82968 31.046896 c
h
298.03058 24.882759 m
297.8035 27.823448 l
297.72781 28.87908 297.47235 29.812183 297.03711 30.622759 c
296.6019 31.433332 296.04367 32.008274 295.36246 32.347588 c
295.05969 32.46069 294.75693 32.517242 294.45416 32.517242 c
293.54584 32.517242 292.65646 32.215633 291.78604 31.612413 c
291.33188 31.235403 290.88718 30.69816 290.45197 30.00069 c
290.01675 29.303219 289.68558 28.596321 289.45853 27.879999 c
289.08005 26.221149 288.89084 24.109884 288.89084 21.546207 c
288.89084 20.264368 288.90976 19.302988 288.9476 18.662069 c
288.9476 18.71862 l
289.09897 17.964598 289.21252 16.965517 289.28821 15.721379 c
289.34497 14.929655 l
289.49637 13.044598 289.7045 11.649655 289.96942 10.744827 c
289.96942 10.801379 l
290.31006 10.047357 290.81149 9.472414 291.47379 9.0765514 c
292.13611 8.6806898 292.8457 8.4827585 293.60263 8.4827585 c
294.20816 8.4827585 294.82315 8.6241379 295.4476 8.9068966 c
296.07205 9.1896553 296.61136 9.5949421 297.06549 10.122759 c
297.44397 10.612874 297.68048 11.027586 297.77512 11.366897 c
297.86972 11.706207 297.91702 12.234023 297.91702 12.950345 c
297.91702 13.591265 297.93594 14.062529 297.97379 14.364138 c
298.03058 15.09931 l
298.08734 16.173794 l
298.08734 16.965517 l
298.1441 18.040001 l
298.1441 20.754482 l
298.03058 24.6 l
298.03058 24.882759 l
h
W
0 0 428 267 rc
280 42 m
308 42 l
308 -1 l
280 -1 l
h
f
Q
q
0 267 m
428 267 l
428 0 l
0 0 l
h
W*
324.83221 6.3257031 m
322.38925 11.527027 320.78003 15.126493 320.00449 17.124104 c
320.00449 6.2691669 l
320.00449 3.9323406 320.02386 2.3304834 320.06265 1.4635962 c
319.01566 1.1620703 317.87173 1.0113072 316.63086 1.0113072 c
316.2431 1.0113072 315.66144 1.048998 314.88589 1.1243795 c
314.03281 1.199761 313.41238 1.2374518 313.0246 1.2374518 c
310.1745 1.3505239 l
310.1745 5.5907335 l
310.1745 8.0029421 310.13571 11.4328 310.05817 15.880309 c
310.01938 18.104063 310 21.477386 310 26.000277 c
310 32.068485 310.1745 37.156738 310.5235 41.26503 c
311.57047 41.528866 312.7338 41.660782 314.01343 41.660782 c
314.86652 41.660782 315.90381 41.585403 317.12527 41.434639 c
318.34677 41.283875 319.19016 41.057732 319.65549 40.756207 c
320.19836 39.776245 320.86725 38.409954 321.6622 36.657337 c
322.45712 34.904716 323.22296 33.161518 323.95972 31.427744 c
326.28635 26.226419 l
326.2088 28.864773 326.17001 31.97426 326.17001 35.554882 c
326.17001 38.457069 326.18942 40.454678 326.22818 41.54771 c
327.81805 41.849236 329.50485 42 331.2886 42 c
332.8009 42 334.37137 41.830391 336 41.491177 c
336 1.4070601 l
335.88367 1.4070601 335.651 1.3505239 335.302 1.2374518 c
334.91425 1.0866888 334.23566 1.0113072 333.2662 1.0113072 c
333.07233 0.97361648 332.04474 1.0301526 330.18344 1.1809156 c
329.71811 1.2186064 329.12677 1.2562971 328.40939 1.2939879 c
327.69202 1.3316786 327.27518 1.3316786 327.15884 1.2939879 c
324.83221 6.3257031 l
h
W
0 0 428 267 rc
309 43 m
337 43 l
337 -0.026383527 l
309 -0.026383527 l
h
f
Q
q
0 267 m
428 267 l
428 0 l
0 0 l
h
W*
374.9426 5.4737568 m
374.98087 5.0207181 375 4.3600368 375 3.4917128 c
375 2.698895 374.93304 2.142035 374.7991 1.8211325 c
374.66519 1.5002302 374.46432 1.3020258 374.19647 1.2265193 c
373.92862 1.1510129 373.46945 1.1132597 372.81897 1.1132597 c
372.41721 1.1132597 l
371.4989 1.1698895 l
370.00662 1.1132597 l
367.63428 1.0377532 364.13318 1 359.50333 1 c
355.10303 1 351.6019 1.0188766 349 1.0566298 c
349 2.3591161 l
349.26785 8.588398 349.40176 14.855433 349.40176 21.160221 c
349.40176 23.010128 349.36349 26.200275 349.28699 30.730663 c
349.28699 32.089779 l
349.28699 34.185081 l
349.24872 34.826889 349.22958 35.978359 349.22958 37.639503 c
349.17218 41.320442 l
349.70789 41.509209 350.45401 41.669659 351.41058 41.801796 c
352.36719 41.933933 353.32376 42 354.28036 42 c
355.35172 42 356.4231 41.924492 357.49448 41.773479 c
358.56586 41.622467 359.42679 41.414825 360.07727 41.150551 c
360.00073 38.43232 359.96246 36.261509 359.96246 34.638123 c
359.96246 32.372929 360.00073 28.975138 360.07727 24.444752 c
360.11554 22.179558 360.13464 18.838398 360.13464 14.42127 c
360.13464 10.740332 l
361.39734 10.740332 362.94702 10.683702 364.78366 10.570442 c
367.82559 10.457182 l
369.43268 10.343923 370.94406 10.287292 372.35983 10.287292 c
373.35468 10.287292 374.23474 10.325046 375 10.400553 c
375 9.5322285 374.98087 8.96593 374.9426 8.7016573 c
374.9426 8.7582874 l
374.86609 7.7389503 374.84695 7.0027623 374.88522 6.5497236 c
374.9426 5.4737568 l
h
W
0 0 428 267 rc
348 43 m
376 43 l
376 0 l
348 0 l
h
f
Q
q
0 267 m
428 267 l
428 0 l
0 0 l
h
W*
401.9426 5.4737568 m
401.98087 5.0207181 402 4.3600368 402 3.4917128 c
402 2.698895 401.93304 2.142035 401.7991 1.8211325 c
401.66519 1.5002302 401.46432 1.3020258 401.19647 1.2265193 c
400.92862 1.1510129 400.46945 1.1132597 399.81897 1.1132597 c
399.41721 1.1132597 l
398.4989 1.1698895 l
397.00662 1.1132597 l
394.63428 1.0377532 391.13318 1 386.50333 1 c
382.10303 1 378.6019 1.0188766 376 1.0566298 c
376 2.3591161 l
376.26785 8.588398 376.40176 14.855433 376.40176 21.160221 c
376.40176 23.010128 376.36349 26.200275 376.28699 30.730663 c
376.28699 32.089779 l
376.28699 34.185081 l
376.24872 34.826889 376.22958 35.978359 376.22958 37.639503 c
376.17218 41.320442 l
376.70789 41.509209 377.45401 41.669659 378.41058 41.801796 c
379.36719 41.933933 380.32376 42 381.28036 42 c
382.35172 42 383.4231 41.924492 384.49448 41.773479 c
385.56586 41.622467 386.42679 41.414825 387.07727 41.150551 c
387.00073 38.43232 386.96246 36.261509 386.96246 34.638123 c
386.96246 32.372929 387.00073 28.975138 387.07727 24.444752 c
387.11554 22.179558 387.13464 18.838398 387.13464 14.42127 c
387.13464 10.740332 l
388.39734 10.740332 389.94702 10.683702 391.78366 10.570442 c
394.82559 10.457182 l
396.43268 10.343923 397.94406 10.287292 399.35983 10.287292 c
400.35468 10.287292 401.23474 10.325046 402 10.400553 c
402 9.5322285 401.98087 8.96593 401.9426 8.7016573 c
401.9426 8.7582874 l
401.86609 7.7389503 401.84695 7.0027623 401.88522 6.5497236 c
401.9426 5.4737568 l
h
W
0 0 428 267 rc
375 43 m
403 43 l
403 0 l
375 0 l
h
f
Q
q
0 267 m
428 267 l
428 0 l
0 0 l
h
W*
412.32272 31.533333 m
412.24911 31.380444 412.1571 30.176445 412.04672 27.921333 c
411.93631 25.666222 411.8811 23.372889 411.8811 21.041334 c
411.8811 18.671556 411.93631 16.684 412.04672 15.078667 c
412.1571 14.046667 412.45151 13.043333 412.92993 12.068666 c
413.40836 11.094 413.97876 10.434667 414.64117 10.090667 c
415.92923 10.014222 416.90445 10.625778 417.56686 11.925333 c
417.51169 11.925333 l
417.8429 12.651556 418.00848 13.740889 418.00848 15.193334 c
418.00848 16.34 418.08209 17.238222 418.22931 17.888 c
419.14932 17.735111 420.03256 17.658667 420.87897 17.658667 c
423.41827 17.716 l
424.7431 17.716 425.99432 17.56311 427.17197 17.257334 c
427.61359 15.919556 427.83438 14.524445 427.83438 13.072 c
427.83438 10.893333 427.30997 8.8293333 426.26114 6.8800001 c
425.21231 4.9306664 423.76788 3.3444445 421.92783 2.1213334 c
420.08777 0.89822221 418.04529 0.24844444 415.80042 0.17200001 c
415.138 0.057333332 414.36517 0 413.48196 0 c
410.61145 0 408.09058 0.66888887 405.91931 2.0066667 c
403.74805 3.3444445 402.53363 5.3511109 402.276 8.0266666 c
402.09201 11.848889 402 15.957778 402 20.353333 c
402 23.984444 402.0184 26.965778 402.05521 29.297333 c
402.11041 31.877333 l
402.07361 32.450668 402.1196 33.110001 402.24841 33.855335 c
402.3772 34.600666 402.552 35.259998 402.77283 35.833332 c
403.10403 36.712444 403.53644 37.591557 404.07007 38.470665 c
404.60367 39.349777 405.16489 40.076 405.75372 40.649334 c
406.52655 41.29911 407.66739 41.853333 409.17621 42.312 c
410.61145 42.770668 412.1019 43 413.64755 43 c
416.15002 43 418.50531 42.397999 420.71338 41.194 c
422.92145 39.990002 424.6879 38.346443 426.01273 36.263332 c
427.33759 34.180222 428 31.915556 428 29.469334 c
428 28.01689 427.7424 26.564444 427.22717 25.112 c
425.68152 24.768 424.39349 24.596001 423.36307 24.596001 c
421.9646 24.596001 420.03256 24.844444 417.56686 25.341333 c
417.40128 27.52 l
417.32767 29.278223 417.11606 30.606445 416.76645 31.504667 c
416.41684 32.402889 415.67163 32.83289 414.53079 32.794666 c
414.49399 32.794666 414.448 32.78511 414.39279 32.765999 c
414.33759 32.746887 414.25479 32.737335 414.14438 32.737335 c
414.19958 32.737335 l
413.05875 32.546223 412.43314 32.14489 412.32272 31.533333 c
h
W
0 0 428 267 rc
401 44 m
429 44 l
429 -1 l
401 -1 l
h
f
Q
0.92900002 0.373 0.23100001 sc
q
0 267 m
428 267 l
428 0 l
0 0 l
h
W*
94.440338 179.52281 m
68.089462 92.76503 126.48246 30.028063 199.02055 64.733788 c
297.54422 64.733788 l
305.42386 64.733788 312.60349 67.960281 317.80707 73.148827 c
317.84552 73.186325 l
322.33768 77.67115 325.36423 83.622719 326.10272 90.229187 c
346.99744 108.28708 344.85013 140.6488 326.28101 166.20959 c
326.28101 206.83463 l
326.28101 214.69943 323.0491 221.86224 317.84552 227.05515 c
317.80707 227.09265 l
312.60349 232.28381 305.42386 235.50856 297.54422 235.50856 c
263.85815 235.50856 l
263.85815 241.1619 l
263.85815 248.27238 260.94611 254.74107 256.25555 259.41687 c
251.57024 264.09442 245.08717 267 237.96088 267 c
203.54158 267 l
196.41003 267 189.93483 264.09442 185.2469 259.41687 c
180.55896 254.74107 177.64691 248.27238 177.64691 241.1619 c
177.64691 235.50856 l
143.9626 235.50856 l
136.07683 235.50856 128.90334 232.28381 123.69889 227.09265 c
123.66131 227.05515 l
118.4586 221.86224 115.22756 214.69943 115.22756 206.83463 c
115.22756 165.00969 l
107.98328 168.8187 101.05624 174.14677 94.440338 179.52281 c
h
197.87741 235.50856 m
243.62503 235.50856 l
243.62503 241.1619 l
243.62503 242.70799 242.98618 244.12242 241.95752 245.14879 c
240.92973 246.17168 239.50954 246.81436 237.96088 246.81436 c
203.54158 246.81436 l
201.99466 246.81436 200.57535 246.17168 199.5493 245.14879 c
198.52066 244.12242 197.87741 242.70799 197.87741 241.1619 c
197.87741 235.50856 l
h
W*
0 0 428 267 rc
67.089462 268 m
347.99744 268 l
347.99744 29.028063 l
67.089462 29.028063 l
h
f
Q
0 0 0 sc
q
0 267 m
428 267 l
428 0 l
0 0 l
h
W*
230 86 m
248.65167 101.06677 266.58881 117.06506 287.17493 121.96683 c
294.3707 122.31876 300.67941 119.83616 306 116.15179 c
306 94.45665 l
306 92.133942 305.05893 90.021515 303.54535 88.489548 c
303.50702 88.451317 l
301.96991 86.939339 299.85162 86 297.52158 86 c
230 86 l
h
W*
0 0 428 267 rc
229 123.31876 m
307 123.31876 l
307 85 l
229 85 l
h
f
Q
q
0 267 m
428 267 l
428 0 l
0 0 l
h
W*
305 185.88486 m
274.42734 207.98569 225.9603 214.02869 168.61748 174.83926 c
162.1908 170.44864 156.38684 166.48468 151.94766 163.89507 c
146.13412 160.51337 140.48781 159.05508 135 159 c
135 206.49068 l
135 208.82849 135.94061 210.95386 137.45605 212.49432 c
137.49438 212.53455 l
139.03072 214.05579 141.14624 215 143.47513 215 c
296.52573 215 l
298.85464 215 300.97189 214.05579 302.50824 212.53455 c
302.54657 212.49432 l
304.05939 210.95386 305 208.82849 305 206.49068 c
305 185.88486 l
h
W*
0 0 428 267 rc
134 216 m
306 216 l
306 158 l
134 158 l
h
f
Q
1 1 1 sc
q
0 267 m
428 267 l
428 0 l
0 0 l
h
W*
235.14691 159.91646 m
219.47076 149.72815 207.74686 139.6301 188.43759 130.52231 c
188.43759 130.52231 203.47202 158.2926 207.26601 175 c
185.62111 152.62006 141.61751 122.25668 111.11263 140.33292 c
109.7422 112.29972 120.80155 91.38327 148.45213 81.072266 c
182.562 68.355721 220.78496 97.408974 242 126.15989 c
231.82672 122.64753 223.82823 118.00644 211.75972 118.09057 c
221.6974 128.61978 231.32918 143.44568 235.14691 159.91646 c
235.14691 159.91646 l
h
W*
0 0 428 267 rc
108.7422 176 m
243 176 l
243 67.355721 l
108.7422 67.355721 l
h
f
ep
end
%%Trailer
%%EOF
