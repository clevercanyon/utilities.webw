%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 13.1 (Build 22C65) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 530 60
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 530 60
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.4509804 0.4509804 0.4509804 sc
q
0 60 m
530 60 l
530 0 l
0 0 l
h
W*
96.589088 38.16568 m
96.510193 38.007889 96.411575 36.765285 96.293228 34.43787 c
96.174889 32.110455 96.115715 29.743589 96.115715 27.337278 c
96.115715 24.89152 96.174889 22.840237 96.293228 21.183432 c
96.411575 20.118343 96.727158 19.08284 97.239975 18.076923 c
97.7528 17.071007 98.364235 16.390533 99.074295 16.035503 c
100.45496 15.956608 101.50033 16.58777 102.21039 17.928993 c
102.15122 17.928993 l
102.50625 18.678501 102.68376 19.802761 102.68376 21.301775 c
102.68376 22.485207 102.76266 23.41223 102.92045 24.08284 c
103.90665 23.925049 104.85339 23.846153 105.76069 23.846153 c
108.48258 23.905325 l
109.90269 23.905325 111.24392 23.747534 112.50625 23.431953 c
112.97962 22.051283 113.21631 20.611441 113.21631 19.112427 c
113.21631 16.863905 112.65417 14.733727 111.52991 12.721893 c
110.40565 10.710059 108.85733 9.072978 106.88495 7.8106508 c
104.91256 6.5483236 102.72321 5.8777122 100.3169 5.7988167 c
99.606842 5.6804733 98.778435 5.6213017 97.831696 5.6213017 c
94.754768 5.6213017 92.052597 6.3116369 89.725182 7.6923075 c
87.397766 9.072978 86.095993 11.143984 85.819855 13.905326 c
85.62262 17.8501 85.524002 22.090731 85.524002 26.627218 c
85.524002 30.374754 85.543724 33.451675 85.583168 35.857986 c
85.642342 38.52071 l
85.602898 39.112427 85.652206 39.7929 85.790276 40.56213 c
85.928337 41.33136 86.115715 42.011833 86.352402 42.60355 c
86.707436 43.510849 87.170944 44.418144 87.742935 45.325443 c
88.314926 46.232742 88.916504 46.98225 89.547668 47.573963 c
90.376068 48.244576 91.598953 48.816566 93.216309 49.28994 c
94.754768 49.763313 96.352402 50 98.009209 50 c
100.69165 50 103.21631 49.378696 105.58317 48.136093 c
107.95004 46.89349 109.84353 45.197239 111.26364 43.047337 c
112.68376 40.897434 113.39382 38.560158 113.39382 36.035503 c
113.39382 34.536488 113.11769 33.037476 112.56542 31.538462 c
110.90862 31.183432 109.52795 31.005917 108.42341 31.005917 c
106.92439 31.005917 104.85339 31.262327 102.21039 31.775148 c
102.03288 34.02367 l
101.95398 35.838264 101.72716 37.209072 101.3524 38.136093 c
100.97765 39.063118 100.17883 39.506905 98.955956 39.467457 c
98.916504 39.467457 98.867195 39.457592 98.808022 39.43787 c
98.748856 39.418144 98.660095 39.408283 98.541748 39.408283 c
98.600922 39.408283 l
97.378044 39.211044 96.707436 38.796844 96.589088 38.16568 c
h
W
0 0 530 60 rc
84.524002 51 m
114.39382 51 l
114.39382 4.6213017 l
84.524002 4.6213017 l
h
f
Q
q
0 60 m
530 60 l
530 0 l
0 0 l
h
W*
141.44116 11.005918 m
141.48061 10.532544 141.50034 9.8422089 141.50034 8.9349108 c
141.50034 8.1065092 141.4313 7.5246549 141.29323 7.1893492 c
141.15517 6.8540435 140.94806 6.6469426 140.67194 6.5680475 c
140.3958 6.489152 139.92242 6.4497042 139.25182 6.4497042 c
138.83762 6.4497042 l
137.89087 6.5088758 l
136.3524 6.4497042 l
133.90665 6.3708086 130.29718 6.3313608 125.524 6.3313608 c
120.98751 6.3313608 117.37804 6.3510847 114.69559 6.3905325 c
114.69559 7.7514791 l
114.97173 14.260355 115.1098 20.808678 115.1098 27.39645 c
115.1098 29.329388 115.07035 32.662724 114.99146 37.39645 c
114.99146 38.816566 l
114.99146 41.005917 l
114.95201 41.676529 114.93228 42.879684 114.93228 44.615383 c
114.87312 48.46154 l
115.42538 48.658775 116.19461 48.826431 117.1808 48.964497 c
118.167 49.102566 119.15319 49.171597 120.13938 49.171597 c
121.24392 49.171597 122.34846 49.092701 123.453 48.93491 c
124.55753 48.777119 125.44511 48.560158 126.11572 48.284023 c
126.03682 45.443787 125.99738 43.175541 125.99738 41.47929 c
125.99738 39.112427 126.03682 35.56213 126.11572 30.828402 c
126.15517 28.461538 126.17489 24.970415 126.17489 20.35503 c
126.17489 16.508875 l
127.47666 16.508875 129.0743 16.449703 130.96779 16.331362 c
134.10388 16.213018 l
135.76068 16.094675 137.31888 16.035503 138.77844 16.035503 c
139.80408 16.035503 140.71138 16.074951 141.50034 16.153847 c
141.50034 15.246549 141.48061 14.654832 141.44116 14.378698 c
141.44116 14.43787 l
141.36226 13.372781 141.34254 12.60355 141.38199 12.130177 c
141.44116 11.005918 l
h
W
0 0 530 60 rc
113.69559 50.171597 m
142.50034 50.171597 l
142.50034 5.3313608 l
113.69559 5.3313608 l
h
f
Q
q
0 60 m
530 60 l
530 0 l
0 0 l
h
W*
169.13347 12.011834 m
169.13347 10 168.9165 8.2051287 168.48257 6.6272187 c
166.74689 6.6272187 164.18277 6.5877714 160.79027 6.5088758 c
153.03879 6.4497042 l
149.52794 6.4497042 146.01709 6.5680475 142.50626 6.8047338 c
142.5457 8.0670614 142.48653 12.978304 142.32874 21.538462 c
142.21039 26.390533 142.15121 30.118343 142.15121 32.721893 c
142.15121 38.126232 142.28929 43.155819 142.56541 47.81065 c
147.77252 47.988167 l
153.61078 48.224854 158.06837 48.343197 161.14529 48.343197 c
163.7883 48.343197 166.3524 48.244576 168.83762 48.047337 c
168.99541 47.218933 169.0743 46.252464 169.0743 45.14793 c
169.0743 44.556213 169.03485 43.589745 168.95595 42.24852 c
168.87706 40.986195 168.83762 40 168.83762 39.28994 c
166.47075 38.777119 163.82774 38.52071 160.90862 38.52071 c
153.21631 38.46154 l
153.01907 36.607494 152.92046 35.069035 152.92046 33.846153 c
152.92046 32.899406 153.03879 32.071007 153.27548 31.360947 c
157.1808 31.83432 l
157.73308 31.83432 158.56148 31.794872 159.66602 31.715977 c
160.43524 31.656805 l
160.63248 30.473373 160.73109 29.191322 160.73109 27.810652 c
160.61276 23.076923 l
159.35043 22.721893 157.65417 22.544378 155.524 22.544378 c
153.98553 22.60355 l
153.70941 22.60355 153.53189 22.564102 153.45299 22.485207 c
153.21631 19.408283 l
153.21631 17.790928 153.2952 16.449703 153.45299 15.384615 c
155.50427 15.384615 157.49638 15.325444 159.42932 15.207101 c
160.09993 15.167653 160.92834 15.128205 161.91454 15.088758 c
162.90073 15.04931 164.06444 15.029586 165.40565 15.029586 c
169.01512 15.147929 l
169.09402 13.333333 169.13347 12.287969 169.13347 12.011834 c
h
W
0 0 530 60 rc
141.15121 49.343197 m
170.13347 49.343197 l
170.13347 5.4497042 l
141.15121 5.4497042 l
h
f
Q
q
0 60 m
530 60 l
530 0 l
0 0 l
h
W*
196.47075 47.514793 m
195.24786 41.005917 193.8672 34.674557 192.32874 28.52071 c
190.79027 22.366863 188.85733 15.029586 186.52992 6.5088758 c
185.66206 6.5088758 185.07036 6.489152 184.75478 6.4497042 c
184.16306 6.3905325 l
183.45299 6.3116369 182.72321 6.2721891 181.97371 6.2721891 c
179.48849 6.2721891 177.55556 6.5088758 176.17488 6.9822483 c
172.74294 19.092703 170.43524 32.445759 169.25182 47.04142 c
169.60684 47.435898 170.33662 47.731754 171.44116 47.928993 c
172.5457 48.126232 173.76857 48.224854 175.1098 48.224854 c
176.37213 48.224854 177.79225 48.086784 179.37015 47.81065 c
179.72519 42.54438 l
179.96187 38.639053 180.21828 35.256409 180.49442 32.39645 c
180.77055 29.536489 181.16502 26.706114 181.67784 23.905325 c
182.15121 26.074951 182.881 30.019724 183.8672 35.739643 c
185.05063 42.721893 185.83958 46.883629 186.23405 48.224854 c
187.77252 47.909271 189.52794 47.75148 191.50034 47.75148 c
193.47272 47.75148 194.87311 47.672585 195.70151 47.514793 c
196.47075 47.514793 l
h
W
0 0 530 60 rc
168.25182 49.224854 m
197.47075 49.224854 l
197.47075 5.2721891 l
168.25182 5.2721891 l
h
f
Q
q
0 60 m
530 60 l
530 0 l
0 0 l
h
W*
223.63051 12.011834 m
223.63051 10 223.41354 8.2051287 222.97961 6.6272187 c
221.24393 6.6272187 218.67982 6.5877714 215.28731 6.5088758 c
207.53583 6.4497042 l
204.02498 6.4497042 200.51414 6.5680475 197.0033 6.8047338 c
197.04274 8.0670614 196.98357 12.978304 196.82578 21.538462 c
196.70743 26.390533 196.64825 30.118343 196.64825 32.721893 c
196.64825 38.126232 196.78633 43.155819 197.06245 47.81065 c
202.26956 47.988167 l
208.10783 48.224854 212.56541 48.343197 215.64235 48.343197 c
218.28534 48.343197 220.84944 48.244576 223.33466 48.047337 c
223.49245 47.218933 223.57133 46.252464 223.57133 45.14793 c
223.57133 44.556213 223.53189 43.589745 223.45299 42.24852 c
223.3741 40.986195 223.33466 40 223.33466 39.28994 c
220.96779 38.777119 218.32478 38.52071 215.40565 38.52071 c
207.71335 38.46154 l
207.51611 36.607494 207.4175 35.069035 207.4175 33.846153 c
207.4175 32.899406 207.53583 32.071007 207.77252 31.360947 c
211.67784 31.83432 l
212.23012 31.83432 213.05852 31.794872 214.16306 31.715977 c
214.93228 31.656805 l
215.12952 30.473373 215.22815 29.191322 215.22815 27.810652 c
215.1098 23.076923 l
213.84747 22.721893 212.15121 22.544378 210.02104 22.544378 c
208.48257 22.60355 l
208.20645 22.60355 208.02893 22.564102 207.95004 22.485207 c
207.71335 19.408283 l
207.71335 17.790928 207.79225 16.449703 207.95004 15.384615 c
210.00131 15.384615 211.99342 15.325444 213.92636 15.207101 c
214.59698 15.167653 215.42538 15.128205 216.41158 15.088758 c
217.39777 15.04931 218.56148 15.029586 219.90269 15.029586 c
223.51216 15.147929 l
223.59106 13.333333 223.63051 12.287969 223.63051 12.011834 c
h
W
0 0 530 60 rc
195.64825 49.343197 m
224.63051 49.343197 l
224.63051 5.4497042 l
195.64825 5.4497042 l
h
f
Q
q
0 60 m
530 60 l
530 0 l
0 0 l
h
W*
249.01512 17.75148 m
250.59303 15.345168 251.86522 13.313609 252.8317 11.656805 c
253.79816 10 254.59698 8.3234711 255.22815 6.6272187 c
254.2814 6.6272187 l
253.80803 6.6272187 252.74294 6.5877714 251.08614 6.5088758 c
249.42932 6.4299803 248.10783 6.3905325 247.12163 6.3905325 c
246.56937 6.3905325 245.74097 6.4299803 244.63643 6.5088758 c
243.63051 6.5680475 l
241.06641 12.406312 238.77844 16.785009 236.7666 19.704142 c
236.7666 18.16568 l
236.7666 15.719921 236.90466 12.564102 237.1808 8.698225 c
237.1808 8.7573967 l
237.22025 8.4812622 237.23997 8.0078897 237.23997 7.3372779 c
235.89876 6.7061143 233.68968 6.3905325 230.61276 6.3905325 c
229.19264 6.4497042 l
226.05655 6.4497042 l
225.62262 6.4497042 225.40565 10.019724 225.40565 17.159763 c
225.40565 23.62919 225.34648 30.10848 225.22815 36.597633 c
225.1098 43.086784 224.93228 46.98225 224.6956 48.284023 c
226.29323 48.52071 l
228.6601 48.836292 230.61276 49.072979 232.15121 49.23077 c
233.68968 49.388561 235.26759 49.467457 236.88495 49.467457 c
238.62065 49.467457 240.09993 49.388561 241.32281 49.23077 c
243.61078 48.954636 245.75082 48.16568 247.74294 46.863907 c
249.73505 45.56213 251.33267 43.964497 252.53583 42.071007 c
253.73898 40.177513 254.34056 38.224854 254.34056 36.213017 c
254.34056 34.280079 253.70941 32.169624 252.44708 29.881657 c
251.65813 28.461538 250.61276 27.278107 249.31099 26.331362 c
248.0092 25.384615 246.45102 24.812624 244.63643 24.615385 c
245.70151 22.721893 246.94412 20.749506 248.36424 18.698225 c
248.64037 18.224852 248.85733 17.909269 249.01512 17.75148 c
h
240.49442 32.840237 m
241.04668 32.998028 241.48061 33.392506 241.79619 34.02367 c
242.11177 34.654831 242.26956 35.404339 242.26956 36.27219 c
242.26956 37.889545 241.87509 38.93491 241.08614 39.408283 c
240.5733 39.723866 240.05063 39.921104 239.51808 40 c
238.98553 40.078896 238.38396 40.118343 237.71335 40.118343 c
235.16898 39.704144 l
235.24786 38.52071 235.28731 37.514793 235.28731 36.68639 c
235.28731 34.556213 235.34648 33.254436 235.46483 32.781067 c
236.13544 32.702171 236.96384 32.662724 237.95004 32.662724 c
238.85733 32.662724 239.70546 32.721893 240.49442 32.840237 c
h
W
0 0 530 60 rc
223.6956 50.467457 m
256.22815 50.467457 l
256.22815 5.3905325 l
223.6956 5.3905325 l
h
f
Q
q
0 60 m
530 60 l
530 0 l
0 0 l
h
W*
278.18674 38.16568 m
278.10782 38.007889 278.00922 36.765285 277.89087 34.43787 c
277.77252 32.110455 277.71335 29.743589 277.71335 27.337278 c
277.71335 24.89152 277.77252 22.840237 277.89087 21.183432 c
278.00922 20.118343 278.3248 19.08284 278.83762 18.076923 c
279.35043 17.071007 279.96188 16.390533 280.67194 16.035503 c
282.05261 15.956608 283.09796 16.58777 283.80801 17.928993 c
283.74884 17.928993 l
284.10388 18.678501 284.2814 19.802761 284.2814 21.301775 c
284.2814 22.485207 284.36029 23.41223 284.5181 24.08284 c
285.50427 23.925049 286.45102 23.846153 287.35831 23.846153 c
290.0802 23.905325 l
291.50034 23.905325 292.84155 23.747534 294.10388 23.431953 c
294.57724 22.051283 294.81393 20.611441 294.81393 19.112427 c
294.81393 16.863905 294.2518 14.733727 293.12756 12.721893 c
292.0033 10.710059 290.45496 9.072978 288.48257 7.8106508 c
286.51019 6.5483236 284.32083 5.8777122 281.91452 5.7988167 c
281.20447 5.6804733 280.37607 5.6213017 279.42932 5.6213017 c
276.35242 5.6213017 273.65024 6.3116369 271.32281 7.6923075 c
268.99539 9.072978 267.69363 11.143984 267.41748 13.905326 c
267.22025 17.8501 267.12164 22.090731 267.12164 26.627218 c
267.12164 30.374754 267.14136 33.451675 267.18082 35.857986 c
267.23999 38.52071 l
267.20053 39.112427 267.24985 39.7929 267.38791 40.56213 c
267.52597 41.33136 267.71335 42.011833 267.95004 42.60355 c
268.30505 43.510849 268.76859 44.418144 269.34058 45.325443 c
269.91257 46.232742 270.51413 46.98225 271.14529 47.573963 c
271.97369 48.244576 273.19659 48.816566 274.81393 49.28994 c
276.35242 49.763313 277.95004 50 279.60684 50 c
282.28928 50 284.81393 49.378696 287.18082 48.136093 c
289.54767 46.89349 291.44116 45.197239 292.86127 43.047337 c
294.2814 40.897434 294.99146 38.560158 294.99146 36.035503 c
294.99146 34.536488 294.71533 33.037476 294.16306 31.538462 c
292.50626 31.183432 291.12558 31.005917 290.02103 31.005917 c
288.52203 31.005917 286.45102 31.262327 283.80801 31.775148 c
283.63052 34.02367 l
283.55161 35.838264 283.3248 37.209072 282.95004 38.136093 c
282.57529 39.063118 281.77646 39.506905 280.55359 39.467457 c
280.51413 39.467457 280.46481 39.457592 280.40567 39.43787 c
280.3465 39.418144 280.25772 39.408283 280.13937 39.408283 c
280.19855 39.408283 l
278.97568 39.211044 278.30505 38.796844 278.18674 38.16568 c
h
W
0 0 530 60 rc
266.12164 51 m
295.99146 51 l
295.99146 4.6213017 l
266.12164 4.6213017 l
h
f
Q
q
0 60 m
530 60 l
530 0 l
0 0 l
h
W*
321.85535 6.5680475 m
320.59305 6.291913 319.23209 6.1538463 317.77252 6.1538463 c
316.03683 6.1538463 314.14334 6.3708086 312.09204 6.8047338 c
311.81592 7.5542407 311.38199 9.1321497 310.79028 11.538462 c
310.19855 13.984221 309.72519 15.601578 309.37015 16.390533 c
308.18674 16.449703 l
307.18082 16.390533 l
307.02301 15.91716 306.7666 14.753451 306.41156 12.899408 c
306.13544 11.360947 305.85931 10.108481 305.58316 9.1420116 c
305.30704 8.1755428 304.91257 7.2978306 304.39975 6.5088758 c
304.00525 6.4299803 303.41354 6.3905325 302.6246 6.3905325 c
302.26956 6.3905325 301.50034 6.4299803 300.31689 6.5088758 c
296.88495 6.6666665 294.97174 6.7455621 294.57724 6.7455621 c
294.57724 6.942801 294.6167 7.4063115 294.69559 8.136095 c
294.77451 8.8658781 294.89282 9.6844177 295.05063 10.591716 c
296.35242 18.047337 l
297.37805 24.161736 298.35437 29.487179 299.2814 34.02367 c
300.2084 38.560158 301.42145 43.353058 302.92044 48.402367 c
303.47272 48.481262 304.22223 48.52071 305.16898 48.52071 c
305.52399 48.52071 l
308.0881 48.52071 310.59305 48.619328 313.03879 48.816566 c
313.51218 46.962524 313.94611 45.138065 314.34058 43.343197 c
314.73505 41.548325 315.09009 39.94083 315.40567 38.52071 c
316.668 33.037476 317.51611 29.388559 317.95004 27.573965 c
321.85535 6.5680475 l
h
309.48849 23.964497 m
308.62064 31.854044 308.20645 35.798817 308.24588 35.798817 c
308.18674 36.390533 l
308.18674 36.390533 308.14728 35.91716 308.06839 34.970413 c
307.95004 32.011833 307.77252 29.664694 307.53583 27.928993 c
307.0033 23.964497 l
309.48849 23.964497 l
h
W
0 0 530 60 rc
293.57724 49.816566 m
322.85535 49.816566 l
322.85535 5.1538463 l
293.57724 5.1538463 l
h
f
Q
q
0 60 m
530 60 l
530 0 l
0 0 l
h
W*
337.23999 11.715977 m
334.75476 17.159763 333.11768 20.927021 332.32874 23.017752 c
332.32874 11.656805 l
332.32874 9.2110453 332.34845 7.5345168 332.38791 6.6272187 c
331.32281 6.3116369 330.15912 6.1538463 328.89679 6.1538463 c
328.50229 6.1538463 327.91058 6.193294 327.12164 6.2721891 c
326.25378 6.3510847 325.62262 6.3905325 325.22815 6.3905325 c
322.32874 6.5088758 l
322.32874 10.946746 l
322.32874 13.4714 322.28928 17.061144 322.21039 21.715977 c
322.17093 24.043392 322.15121 27.573965 322.15121 32.307693 c
322.15121 38.658775 322.32874 43.984222 322.68378 48.284023 c
323.74884 48.560158 324.93228 48.698223 326.23407 48.698223 c
327.1019 48.698223 328.15714 48.619328 329.39975 48.46154 c
330.64233 48.303749 331.50034 48.067062 331.97369 47.75148 c
332.52597 46.725838 333.20645 45.295856 334.01514 43.46154 c
334.82379 41.62722 335.60291 39.802761 336.35242 37.988167 c
338.71927 32.54438 l
338.64038 35.305721 338.60092 38.560158 338.60092 42.307693 c
338.60092 45.345169 338.62064 47.435898 338.6601 48.57988 c
340.27747 48.895462 341.99344 49.053253 343.80801 49.053253 c
345.3465 49.053253 346.94412 48.87574 348.60092 48.52071 c
348.60092 6.5680475 l
348.48257 6.5680475 348.24588 6.5088758 347.89087 6.3905325 c
347.4964 6.2327418 346.80606 6.1538463 345.81985 6.1538463 c
345.62262 6.1143985 344.57724 6.1735702 342.68378 6.3313608 c
342.21039 6.3708086 341.60883 6.4102564 340.87903 6.4497042 c
340.14926 6.489152 339.72519 6.489152 339.60684 6.4497042 c
337.23999 11.715977 l
h
W
0 0 530 60 rc
321.15121 50.053253 m
349.60092 50.053253 l
349.60092 5.1143985 l
321.15121 5.1143985 l
h
f
Q
q
0 60 m
530 60 l
530 0 l
0 0 l
h
W*
360.19855 6.3313608 m
359.2518 6.4497042 358.34451 6.5088758 357.47665 6.5088758 c
356.88495 6.5088758 356.07626 6.4694281 355.05063 6.3905325 c
352.56543 6.3313608 l
351.77646 6.3313608 350.86917 6.3905325 349.84354 6.5088758 c
350.79028 9.3491125 352.60486 14.240631 355.28732 21.183432 c
357.71335 27.337278 l
357.31888 28.915188 356.82578 30.463511 356.23407 31.982248 c
355.64233 33.500988 354.89282 35.305721 353.98553 37.39645 c
352.92044 40.039448 352.12164 42.071007 351.58908 43.491123 c
351.05655 44.911243 350.59305 46.410255 350.19855 47.988167 c
350.94806 47.948719 352.11179 48.007889 353.68967 48.16568 c
354.952 48.323471 355.87903 48.402367 356.47073 48.402367 c
357.85141 48.402367 358.99539 48.145958 359.90271 47.633137 c
360.25772 46.173569 360.80014 44.358974 361.52991 42.18935 c
362.2597 40.019722 362.9599 38.086784 363.63052 36.390533 c
363.82776 36.785011 364.45892 38.57988 365.52399 41.775146 c
366.70743 45.325443 367.37805 47.258381 367.53583 47.573963 c
369.70544 48.007889 371.85535 48.224854 373.98553 48.224854 c
375.28732 48.224854 376.4313 48.145958 377.41748 47.988167 c
376.47073 44.43787 375.30704 41.015778 373.92636 37.721893 c
372.54568 34.428009 370.67194 30.295858 368.30505 25.325443 c
366.41156 21.459566 364.83368 18.076923 363.57135 15.177515 c
362.30902 12.278107 361.18475 9.3293886 360.19855 6.3313608 c
h
W
0 0 530 60 rc
348.84354 49.402367 m
378.41748 49.402367 l
378.41748 5.3313608 l
348.84354 5.3313608 l
h
f
Q
q
0 60 m
530 60 l
530 0 l
0 0 l
h
W*
403.63052 38.10651 m
403.74884 36.883629 403.80801 35.641026 403.80801 34.378696 c
403.74884 33.31361 l
403.74884 32.24852 l
403.66995 30.946745 403.63052 29.033531 403.63052 26.508875 c
403.63052 23.708086 403.57135 21.577909 403.453 20.118343 c
403.27548 18.16568 l
403.07825 14.970414 402.26956 12.248521 400.84946 10 c
400.25772 9.1715975 399.37015 8.4418144 398.18674 7.8106508 c
397.0033 7.1794872 395.70151 6.6666665 394.2814 6.2721891 c
392.82184 5.8382645 391.10587 5.6213017 389.13345 5.6213017 c
388.22617 5.6213017 387.595 5.6410255 387.23999 5.6804733 c
385.30704 5.8382645 383.58121 6.2623272 382.06247 6.9526629 c
380.54373 7.6429982 379.42932 8.6587772 378.71927 10 c
377.77252 11.775148 377.2597 14.003944 377.18082 16.68639 c
377.06247 18.579882 l
377.02301 18.895464 377.0033 19.54635 377.0033 20.532545 c
376.80606 23.767258 376.70743 26.863905 376.70743 29.822485 c
376.70743 31.637081 376.7666 33.451675 376.88495 35.266273 c
377.0033 37.238659 377.34845 39.161736 377.92044 41.035503 c
378.49243 42.909271 379.37015 44.556213 380.55359 45.97633 c
381.85535 46.68639 l
384.38 47.909271 387.14136 48.52071 390.13937 48.52071 c
392.03287 48.52071 393.81787 48.274162 395.49442 47.781067 c
397.17093 47.287968 398.64038 46.568047 399.90271 45.621304 c
401.28336 44.358974 402.19067 43.116371 402.6246 41.89349 c
403.09796 40.631165 403.43326 39.368835 403.63052 38.10651 c
h
394.45892 31.656805 m
394.22223 34.733727 l
394.14334 35.838264 393.87704 36.814594 393.4234 37.662724 c
392.96976 38.510849 392.38791 39.112427 391.67786 39.467457 c
391.36227 39.5858 391.04669 39.64497 390.73111 39.64497 c
389.78436 39.64497 388.85733 39.329388 387.95004 38.698223 c
387.47665 38.303749 387.01315 37.741619 386.55951 37.011833 c
386.10587 36.282051 385.76068 35.542408 385.52399 34.7929 c
385.12952 33.057198 384.93228 30.848125 384.93228 28.16568 c
384.93228 26.824457 384.952 25.818541 384.99146 25.147928 c
384.99146 25.2071 l
385.14926 24.418146 385.26758 23.372782 385.3465 22.071007 c
385.40567 21.242603 l
385.56345 19.270218 385.7804 17.810652 386.05655 16.863905 c
386.05655 16.923077 l
386.41156 16.134123 386.93427 15.532544 387.6246 15.118343 c
388.31494 14.704142 389.05457 14.497042 389.84354 14.497042 c
390.4747 14.497042 391.11572 14.64497 391.7666 14.940828 c
392.41748 15.236687 392.97961 15.660749 393.453 16.213018 c
393.84747 16.725838 394.09402 17.159763 394.19263 17.514793 c
394.29126 17.869822 394.34058 18.422091 394.34058 19.171598 c
394.34058 19.842209 394.36029 20.335306 394.39975 20.650888 c
394.45892 21.420118 l
394.5181 22.544378 l
394.5181 23.372782 l
394.57724 24.497042 l
394.57724 27.337278 l
394.45892 31.360947 l
394.45892 31.656805 l
h
W
0 0 530 60 rc
375.70743 49.52071 m
404.80801 49.52071 l
404.80801 4.6213017 l
375.70743 4.6213017 l
h
f
Q
q
0 60 m
530 60 l
530 0 l
0 0 l
h
W*
421.02695 11.715977 m
418.54175 17.159763 416.90466 20.927021 416.11572 23.017752 c
416.11572 11.656805 l
416.11572 9.2110453 416.13544 7.5345168 416.1749 6.6272187 c
415.1098 6.3116369 413.94611 6.1538463 412.68378 6.1538463 c
412.28928 6.1538463 411.69757 6.193294 410.90863 6.2721891 c
410.04077 6.3510847 409.40961 6.3905325 409.01514 6.3905325 c
406.11572 6.5088758 l
406.11572 10.946746 l
406.11572 13.4714 406.07626 17.061144 405.99738 21.715977 c
405.95792 24.043392 405.9382 27.573965 405.9382 32.307693 c
405.9382 38.658775 406.11572 43.984222 406.47073 48.284023 c
407.53583 48.560158 408.71927 48.698223 410.02103 48.698223 c
410.88889 48.698223 411.94412 48.619328 413.18674 48.46154 c
414.42932 48.303749 415.28732 48.067062 415.76068 47.75148 c
416.31296 46.725838 416.99344 45.295856 417.80209 43.46154 c
418.61078 41.62722 419.38989 39.802761 420.13937 37.988167 c
422.50626 32.54438 l
422.42737 35.305721 422.38791 38.560158 422.38791 42.307693 c
422.38791 45.345169 422.40762 47.435898 422.44708 48.57988 c
424.06442 48.895462 425.7804 49.053253 427.595 49.053253 c
429.13345 49.053253 430.73111 48.87574 432.38791 48.52071 c
432.38791 6.5680475 l
432.26956 6.5680475 432.03287 6.5088758 431.67786 6.3905325 c
431.28336 6.2327418 430.59305 6.1538463 429.60684 6.1538463 c
429.40961 6.1143985 428.36423 6.1735702 426.47073 6.3313608 c
425.99738 6.3708086 425.39578 6.4102564 424.66602 6.4497042 c
423.93622 6.489152 423.51218 6.489152 423.39383 6.4497042 c
421.02695 11.715977 l
h
W
0 0 530 60 rc
404.9382 50.053253 m
433.38791 50.053253 l
433.38791 5.1143985 l
404.9382 5.1143985 l
h
f
Q
q
0 60 m
530 60 l
530 0 l
0 0 l
h
W*
472.93228 11.005918 m
472.97174 10.532544 472.99146 9.8422089 472.99146 8.9349108 c
472.99146 8.1065092 472.92242 7.5246549 472.78436 7.1893492 c
472.6463 6.8540435 472.43918 6.6469426 472.16306 6.5680475 c
471.88693 6.489152 471.41354 6.4497042 470.74292 6.4497042 c
470.32874 6.4497042 l
469.38199 6.5088758 l
467.84354 6.4497042 l
465.39777 6.3708086 461.7883 6.3313608 457.01514 6.3313608 c
452.47864 6.3313608 448.86917 6.3510847 446.18674 6.3905325 c
446.18674 7.7514791 l
446.46286 14.260355 446.60092 20.808678 446.60092 27.39645 c
446.60092 29.329388 446.56146 32.662724 446.48257 37.39645 c
446.48257 38.816566 l
446.48257 41.005917 l
446.44315 41.676529 446.4234 42.879684 446.4234 44.615383 c
446.36423 48.46154 l
446.9165 48.658775 447.68573 48.826431 448.67194 48.964497 c
449.65811 49.102566 450.64432 49.171597 451.63052 49.171597 c
452.73505 49.171597 453.83957 49.092701 454.94412 48.93491 c
456.04865 48.777119 456.93622 48.560158 457.60684 48.284023 c
457.52795 45.443787 457.48849 43.175541 457.48849 41.47929 c
457.48849 39.112427 457.52795 35.56213 457.60684 30.828402 c
457.6463 28.461538 457.66602 24.970415 457.66602 20.35503 c
457.66602 16.508875 l
458.96777 16.508875 460.56543 16.449703 462.45892 16.331362 c
465.595 16.213018 l
467.2518 16.094675 468.81 16.035503 470.26956 16.035503 c
471.2952 16.035503 472.20251 16.074951 472.99146 16.153847 c
472.99146 15.246549 472.97174 14.654832 472.93228 14.378698 c
472.93228 14.43787 l
472.85339 13.372781 472.83368 12.60355 472.87311 12.130177 c
472.93228 11.005918 l
h
W
0 0 530 60 rc
445.18674 50.171597 m
473.99146 50.171597 l
473.99146 5.3313608 l
445.18674 5.3313608 l
h
f
Q
q
0 60 m
530 60 l
530 0 l
0 0 l
h
W*
500.21039 11.005918 m
500.24985 10.532544 500.26956 9.8422089 500.26956 8.9349108 c
500.26956 8.1065092 500.20053 7.5246549 500.06247 7.1893492 c
499.92441 6.8540435 499.71729 6.6469426 499.44116 6.5680475 c
499.16504 6.489152 498.69165 6.4497042 498.02103 6.4497042 c
497.60684 6.4497042 l
496.6601 6.5088758 l
495.12164 6.4497042 l
492.67587 6.3708086 489.06641 6.3313608 484.29324 6.3313608 c
479.75674 6.3313608 476.14728 6.3510847 473.46481 6.3905325 c
473.46481 7.7514791 l
473.74097 14.260355 473.87903 20.808678 473.87903 27.39645 c
473.87903 29.329388 473.83957 32.662724 473.76068 37.39645 c
473.76068 38.816566 l
473.76068 41.005917 l
473.72125 41.676529 473.70151 42.879684 473.70151 44.615383 c
473.64233 48.46154 l
474.19461 48.658775 474.96384 48.826431 475.95004 48.964497 c
476.93622 49.102566 477.92242 49.171597 478.90863 49.171597 c
480.01315 49.171597 481.11768 49.092701 482.22223 48.93491 c
483.32675 48.777119 484.21432 48.560158 484.88495 48.284023 c
484.80606 45.443787 484.7666 43.175541 484.7666 41.47929 c
484.7666 39.112427 484.80606 35.56213 484.88495 30.828402 c
484.92441 28.461538 484.94412 24.970415 484.94412 20.35503 c
484.94412 16.508875 l
486.24588 16.508875 487.84354 16.449703 489.73703 16.331362 c
492.87311 16.213018 l
494.52991 16.094675 496.0881 16.035503 497.54767 16.035503 c
498.5733 16.035503 499.48062 16.074951 500.26956 16.153847 c
500.26956 15.246549 500.24985 14.654832 500.21039 14.378698 c
500.21039 14.43787 l
500.1315 13.372781 500.11179 12.60355 500.15121 12.130177 c
500.21039 11.005918 l
h
W
0 0 530 60 rc
472.46481 50.171597 m
501.26956 50.171597 l
501.26956 5.3313608 l
472.46481 5.3313608 l
h
f
Q
q
0 60 m
530 60 l
530 0 l
0 0 l
h
W*
511.51218 38.16568 m
511.43326 38.007889 511.33466 36.765285 511.21631 34.43787 c
511.09796 32.110455 511.03879 29.743589 511.03879 27.337278 c
511.03879 24.89152 511.09796 22.840237 511.21631 21.183432 c
511.33466 20.118343 511.65024 19.08284 512.16302 18.076923 c
512.6759 17.071007 513.28729 16.390533 513.99738 16.035503 c
515.37805 15.956608 516.4234 16.58777 517.13348 17.928993 c
517.07428 17.928993 l
517.42932 18.678501 517.60681 19.802761 517.60681 21.301775 c
517.60681 22.485207 517.68573 23.41223 517.84351 24.08284 c
518.82971 23.925049 519.77649 23.846153 520.68378 23.846153 c
523.40564 23.905325 l
524.82581 23.905325 526.16699 23.747534 527.42932 23.431953 c
527.90271 22.051283 528.1394 20.611441 528.1394 19.112427 c
528.1394 16.863905 527.57727 14.733727 526.453 12.721893 c
525.32874 10.710059 523.7804 9.072978 521.80804 7.8106508 c
519.83563 6.5483236 517.6463 5.8777122 515.23999 5.7988167 c
514.52991 5.6804733 513.70154 5.6213017 512.75476 5.6213017 c
509.67786 5.6213017 506.97568 6.3116369 504.64825 7.6923075 c
502.32083 9.072978 501.01907 11.143984 500.74292 13.905326 c
500.54568 17.8501 500.44708 22.090731 500.44708 26.627218 c
500.44708 30.374754 500.4668 33.451675 500.50626 35.857986 c
500.56543 38.52071 l
500.52597 39.112427 500.57529 39.7929 500.71335 40.56213 c
500.85141 41.33136 501.03879 42.011833 501.27548 42.60355 c
501.63052 43.510849 502.09402 44.418144 502.66602 45.325443 c
503.23801 46.232742 503.83957 46.98225 504.47073 47.573963 c
505.29913 48.244576 506.52203 48.816566 508.13937 49.28994 c
509.67786 49.763313 511.27548 50 512.93231 50 c
515.61475 50 518.1394 49.378696 520.50623 48.136093 c
522.87311 46.89349 524.7666 45.197239 526.18671 43.047337 c
527.60681 40.897434 528.31689 38.560158 528.31689 36.035503 c
528.31689 34.536488 528.04077 33.037476 527.48853 31.538462 c
525.83167 31.183432 524.45105 31.005917 523.3465 31.005917 c
521.84747 31.005917 519.77649 31.262327 517.13348 31.775148 c
516.95593 34.02367 l
516.87708 35.838264 516.65021 37.209072 516.27545 38.136093 c
515.9007 39.063118 515.10193 39.506905 513.87903 39.467457 c
513.8396 39.467457 513.79028 39.457592 513.73108 39.43787 c
513.67194 39.418144 513.58319 39.408283 513.46484 39.408283 c
513.52399 39.408283 l
512.30115 39.211044 511.63052 38.796844 511.51218 38.16568 c
h
W
0 0 530 60 rc
499.44708 51 m
529.31689 51 l
529.31689 4.6213017 l
499.44708 4.6213017 l
h
f
Q
q
0 60 m
530 60 l
530 0 l
0 0 l
h
W*
1.8186938 35.242302 m
-5.6225595 10.688217 10.867105 -7.0675297 31.351221 2.7548454 c
59.173428 2.7548454 l
61.398571 2.7548454 63.426029 3.6680038 64.895477 5.1364613 c
64.906334 5.1470733 l
66.174881 6.4163637 67.029549 8.10077 67.238098 9.9705238 c
73.13858 15.081249 72.532196 24.240227 67.288445 31.474415 c
67.288445 42.972065 l
67.288445 45.197952 66.375778 47.225163 64.906334 48.694855 c
64.895477 48.705467 l
63.426029 50.174664 61.398571 51.08733 59.173428 51.08733 c
49.660786 51.08733 l
49.660786 52.687328 l
49.660786 54.699734 48.838451 56.530491 47.513878 57.853832 c
46.190784 59.177666 44.360023 60 42.347622 60 c
32.627914 60 l
30.614031 60 28.785492 59.177666 27.46166 57.853832 c
26.137827 56.530491 25.315491 54.699734 25.315491 52.687328 c
25.315491 51.08733 l
15.803343 51.08733 l
13.576471 51.08733 11.55074 50.174664 10.081049 48.705467 c
10.070436 48.694855 l
8.6012392 47.225163 7.6888208 45.197952 7.6888208 42.972065 c
7.6888208 31.134819 l
5.6430993 32.212841 3.6869662 33.720783 1.8186938 35.242302 c
h
31.028408 51.08733 m
43.947128 51.08733 l
43.947128 52.687328 l
43.947128 53.124905 43.76672 53.525215 43.476234 53.815697 c
43.186001 54.105194 42.78495 54.287083 42.347622 54.287083 c
32.627914 54.287083 l
32.191078 54.287083 31.790277 54.105194 31.500534 53.815697 c
31.210052 53.525215 31.028408 53.124905 31.028408 52.687328 c
31.028408 51.08733 l
h
W*
0 0 530 60 rc
-1 61 m
74.13858 61 l
74.13858 -1 l
-1 -1 l
h
f
Q
0 0 0 sc
q
0 60 m
530 60 l
530 0 l
0 0 l
h
W*
40.049179 8.467761 m
45.331921 12.747019 50.412289 17.290846 56.242928 18.683041 c
58.280998 18.782995 60.067829 18.077888 61.574787 17.031458 c
61.574787 10.869615 l
61.574787 10.209919 61.308243 9.6099501 60.879551 9.1748419 c
60.868694 9.1639833 l
60.433338 8.7345514 59.83337 8.467761 59.173428 8.467761 c
40.049179 8.467761 l
h
W*
0 0 530 60 rc
39.049179 19.782995 m
62.574787 19.782995 l
62.574787 7.4677615 l
39.049179 7.4677615 l
h
f
Q
q
0 60 m
530 60 l
530 0 l
0 0 l
h
W*
61.574787 37.155247 m
52.911381 43.394093 39.177235 45.099972 22.927952 34.037182 c
21.106819 32.797752 19.462147 31.678764 18.204208 30.947744 c
16.556822 29.993124 14.95682 29.581463 13.401737 29.565914 c
13.401737 42.972065 l
13.401737 43.632008 13.668281 44.231976 14.097712 44.66684 c
14.108571 44.678192 l
14.543925 45.10762 15.143401 45.374165 15.803343 45.374165 c
59.173428 45.374165 l
59.83337 45.374165 60.433338 45.10762 60.868694 44.678192 c
60.879551 44.66684 l
61.308243 44.231976 61.574787 43.632008 61.574787 42.972065 c
61.574787 37.155247 l
h
W*
0 0 530 60 rc
12.401737 46.374165 m
62.574787 46.374165 l
62.574787 28.565914 l
12.401737 28.565914 l
h
f
Q
1 1 1 sc
q
0 60 m
530 60 l
530 0 l
0 0 l
h
W*
41.507023 29.766315 m
37.105846 26.897024 33.814281 24.053152 28.393082 21.488165 c
28.393082 21.488165 32.614094 29.308996 33.679279 34.014229 c
27.602335 27.711462 15.248044 19.160351 6.6836061 24.251085 c
6.2988458 16.356215 9.4038305 10.465604 17.16691 7.5617604 c
26.743473 3.9804521 37.474812 12.162598 43.431072 20.259598 c
40.57486 19.270424 38.329231 17.963373 34.940922 17.987066 c
37.730988 20.952364 40.435173 25.127718 41.507023 29.766315 c
41.507023 29.766315 l
h
W*
0 0 530 60 rc
5.2988458 35.014229 m
44.431072 35.014229 l
44.431072 2.9804521 l
5.2988458 2.9804521 l
h
f
ep
end
%%Trailer
%%EOF
